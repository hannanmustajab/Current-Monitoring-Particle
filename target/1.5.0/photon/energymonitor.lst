
/Users/abdulhannanmustajab/Desktop/Projects/IoT/Particle/energyMonitor/energymonitor/target/1.5.0/photon/energymonitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000040a0  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a40c0  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000190  20000000  080a40c4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000006e4  20000190  20000190  00040190  2**3
                  ALLOC
  6 .module_info_suffix 00000028  080a4254  080a4254  00034254  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a427c  080a427c  0003427c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000b9236  00000000  00000000  00034280  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000104bb  00000000  00000000  000ed4b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00013ab8  00000000  00000000  000fd971  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002058  00000000  00000000  00111429  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000035f0  00000000  00000000  00113481  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000256d3  00000000  00000000  00116a71  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000265e8  00000000  00000000  0013c144  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a99ef  00000000  00000000  0016272c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c048  00000000  00000000  0020c11c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f003 f861 	bl	80a30f8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f003 f866 	bl	80a310e <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a40c4 	.word	0x080a40c4
 80a0050:	20000190 	.word	0x20000190
 80a0054:	20000190 	.word	0x20000190
 80a0058:	20000874 	.word	0x20000874
 80a005c:	20000874 	.word	0x20000874

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f001 ff43 	bl	80a1eec <module_user_init_hook>
 80a0066:	4b07      	ldr	r3, [pc, #28]	; (80a0084 <module_user_init+0x24>)
 80a0068:	4c07      	ldr	r4, [pc, #28]	; (80a0088 <module_user_init+0x28>)
 80a006a:	461e      	mov	r6, r3
 80a006c:	1ae4      	subs	r4, r4, r3
 80a006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0070:	2500      	movs	r5, #0
 80a0072:	42a5      	cmp	r5, r4
 80a0074:	d004      	beq.n	80a0080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f8      	b.n	80a0072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0080:	bd70      	pop	{r4, r5, r6, pc}
 80a0082:	bf00      	nop
 80a0084:	080a4080 	.word	0x080a4080
 80a0088:	080a40b4 	.word	0x080a40b4

080a008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a008c:	f000 bb3a 	b.w	80a0704 <setup>

080a0090 <module_user_loop>:
}

void module_user_loop() {
 80a0090:	b508      	push	{r3, lr}
    loop();
 80a0092:	f000 f9c5 	bl	80a0420 <loop>
    _post_loop();
}
 80a0096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a009a:	f001 bee9 	b.w	80a1e70 <_post_loop>

080a009e <_Znwj>:
 80a009e:	f000 be71 	b.w	80a0d84 <malloc>

080a00a2 <_ZdlPv>:
 80a00a2:	f000 be77 	b.w	80a0d94 <free>

080a00a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a6:	7800      	ldrb	r0, [r0, #0]
 80a00a8:	fab0 f080 	clz	r0, r0
 80a00ac:	0940      	lsrs	r0, r0, #5
 80a00ae:	4770      	bx	lr

080a00b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b0:	2301      	movs	r3, #1
 80a00b2:	7003      	strb	r3, [r0, #0]
 80a00b4:	4770      	bx	lr

080a00b6 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a00b6:	2a01      	cmp	r2, #1
 80a00b8:	d002      	beq.n	80a00c0 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xa>
 80a00ba:	2a02      	cmp	r2, #2
 80a00bc:	d002      	beq.n	80a00c4 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>
 80a00be:	e004      	b.n	80a00ca <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a00c0:	6001      	str	r1, [r0, #0]
	      break;
 80a00c2:	e002      	b.n	80a00ca <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80a00c4:	680b      	ldr	r3, [r1, #0]
 80a00c6:	b100      	cbz	r0, 80a00ca <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
 80a00c8:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a00ca:	2000      	movs	r0, #0
 80a00cc:	4770      	bx	lr

080a00ce <_ZNSt17_Function_handlerIFi6StringEPFbS0_EE9_M_invokeERKSt9_Any_dataOS0_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

    public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a00ce:	b51f      	push	{r0, r1, r2, r3, r4, lr}
      {
	return (*_Base::_M_get_pointer(__functor))(
 80a00d0:	6804      	ldr	r4, [r0, #0]
 80a00d2:	4668      	mov	r0, sp
 80a00d4:	f001 fb85 	bl	80a17e2 <_ZN6StringC1EOS_>
 80a00d8:	4668      	mov	r0, sp
 80a00da:	47a0      	blx	r4
 80a00dc:	4604      	mov	r4, r0
 80a00de:	4668      	mov	r0, sp
 80a00e0:	f001 fb8f 	bl	80a1802 <_ZN6StringD1Ev>
	    std::forward<_ArgTypes>(__args)...);
      }
 80a00e4:	4620      	mov	r0, r4
 80a00e6:	b004      	add	sp, #16
 80a00e8:	bd10      	pop	{r4, pc}

080a00ea <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a00ea:	b510      	push	{r4, lr}
 80a00ec:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
 80a00ee:	6800      	ldr	r0, [r0, #0]
 80a00f0:	b108      	cbz	r0, 80a00f6 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
 80a00f2:	f000 fe4f 	bl	80a0d94 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a00f6:	4620      	mov	r0, r4
 80a00f8:	bd10      	pop	{r4, pc}

080a00fa <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.36.constprop.48>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
 80a00fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a00fc:	4605      	mov	r5, r0
 80a00fe:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80a0102:	4323      	orrs	r3, r4
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0104:	f88d 3000 	strb.w	r3, [sp]
 80a0108:	233c      	movs	r3, #60	; 0x3c
 80a010a:	f001 f835 	bl	80a1178 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }
 80a010e:	4628      	mov	r0, r5
 80a0110:	b003      	add	sp, #12
 80a0112:	bd30      	pop	{r4, r5, pc}

080a0114 <_Z16takeMeasurementsv>:
    Particle.publish("Ubidots Hook", data, PRIVATE);                              // Publish the response code
  }

}

bool takeMeasurements(){
 80a0114:	b508      	push	{r3, lr}
  current_irms = emon1.calcIrms(1480);                                               // Calculate Irms only
 80a0116:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
 80a011a:	480d      	ldr	r0, [pc, #52]	; (80a0150 <_Z16takeMeasurementsv+0x3c>)
 80a011c:	f000 fbb8 	bl	80a0890 <_ZN13EnergyMonitor8calcIrmsEj>
 80a0120:	4b0c      	ldr	r3, [pc, #48]	; (80a0154 <_Z16takeMeasurementsv+0x40>)
 80a0122:	e9c3 0100 	strd	r0, r1, [r3]
  // waitUntil(meterParticlePublish);
  // Particle.publish("Irms",String(current_irms),PRIVATE);
  // Particle.publish("Sensor",String((current_irms - previous_irms)),PRIVATE);
  // Particle.publish("lastIrms",String(abs(previous_irms)),PRIVATE);
  if (abs(current_irms - previous_irms) > 0.5){
 80a0126:	4b0c      	ldr	r3, [pc, #48]	; (80a0158 <_Z16takeMeasurementsv+0x44>)
 80a0128:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a012c:	f002 fa4e 	bl	80a25cc <__aeabi_dsub>
 80a0130:	f002 feb0 	bl	80a2e94 <__aeabi_d2iz>
 80a0134:	2800      	cmp	r0, #0
 80a0136:	bfb8      	it	lt
 80a0138:	4240      	neglt	r0, r0
 80a013a:	f002 fb95 	bl	80a2868 <__aeabi_i2d>
 80a013e:	2200      	movs	r2, #0
 80a0140:	4b06      	ldr	r3, [pc, #24]	; (80a015c <_Z16takeMeasurementsv+0x48>)
 80a0142:	f002 fe87 	bl	80a2e54 <__aeabi_dcmpgt>
 80a0146:	b108      	cbz	r0, 80a014c <_Z16takeMeasurementsv+0x38>
    return 1;
 80a0148:	2001      	movs	r0, #1
 80a014a:	bd08      	pop	{r3, pc}
  } 
}
 80a014c:	bd08      	pop	{r3, pc}
 80a014e:	bf00      	nop
 80a0150:	200001c8 	.word	0x200001c8
 80a0154:	200001b8 	.word	0x200001b8
 80a0158:	20000290 	.word	0x20000290
 80a015c:	3fe00000 	.word	0x3fe00000

080a0160 <_Z17connectToParticlev>:
// They are intended to allow for customization and control during installations
// and to allow for management.


// These functions control the connection and disconnection from Particle
bool connectToParticle() {
 80a0160:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 80a0164:	f000 fd7e 	bl	80a0c64 <spark_cloud_flag_connect>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a0168:	f240 36e7 	movw	r6, #999	; 0x3e7
 80a016c:	f44f 7496 	mov.w	r4, #300	; 0x12c
 80a0170:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 80a0172:	2000      	movs	r0, #0
 80a0174:	f000 fc30 	bl	80a09d8 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a0178:	4680      	mov	r8, r0
 80a017a:	f04f 0900 	mov.w	r9, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 80a017e:	2000      	movs	r0, #0
 80a0180:	f000 fc2a 	bl	80a09d8 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a0184:	ebb0 0008 	subs.w	r0, r0, r8
 80a0188:	eb61 0109 	sbc.w	r1, r1, r9
 80a018c:	428f      	cmp	r7, r1
 80a018e:	bf08      	it	eq
 80a0190:	4286      	cmpeq	r6, r0
 80a0192:	d305      	bcc.n	80a01a0 <_Z17connectToParticlev+0x40>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a0194:	f000 fd6e 	bl	80a0c74 <spark_cloud_flag_connected>
 80a0198:	b910      	cbnz	r0, 80a01a0 <_Z17connectToParticlev+0x40>
            spark_process();
 80a019a:	f000 fd5b 	bl	80a0c54 <spark_process>
 80a019e:	e7ee      	b.n	80a017e <_Z17connectToParticlev+0x1e>
 80a01a0:	f000 fd68 	bl	80a0c74 <spark_cloud_flag_connected>
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
 80a01a4:	b118      	cbz	r0, 80a01ae <_Z17connectToParticlev+0x4e>
    Particle.process();
  }
  if (Particle.connected()) return 1;                               // Were able to connect successfully
  else return 0;                                                    // Failed to connect
}
 80a01a6:	e8bd 43d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, lr}
 80a01aa:	f000 bd63 	b.w	80a0c74 <spark_cloud_flag_connected>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a01ae:	f000 fbfb 	bl	80a09a8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a01b2:	4b03      	ldr	r3, [pc, #12]	; (80a01c0 <_Z17connectToParticlev+0x60>)
 80a01b4:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 80a01b6:	f000 fd4d 	bl	80a0c54 <spark_process>

// These functions control the connection and disconnection from Particle
bool connectToParticle() {
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
 80a01ba:	3c01      	subs	r4, #1
 80a01bc:	d0f3      	beq.n	80a01a6 <_Z17connectToParticlev+0x46>
 80a01be:	e7d8      	b.n	80a0172 <_Z17connectToParticlev+0x12>
 80a01c0:	20000760 	.word	0x20000760

080a01c4 <_Z20meterParticlePublishv>:
  }
  Serial.println(stateTransitionString);
}

bool meterParticlePublish(void)
{
 80a01c4:	b508      	push	{r3, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a01c6:	f000 fbef 	bl	80a09a8 <HAL_Timer_Get_Milli_Seconds>
  if(millis() - lastPublish >= publishFrequency) return 1;
 80a01ca:	4b04      	ldr	r3, [pc, #16]	; (80a01dc <_Z20meterParticlePublishv+0x18>)
 80a01cc:	681b      	ldr	r3, [r3, #0]
 80a01ce:	1ac0      	subs	r0, r0, r3
  else return 0;
}
 80a01d0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80a01d4:	bf34      	ite	cc
 80a01d6:	2000      	movcc	r0, #0
 80a01d8:	2001      	movcs	r0, #1
 80a01da:	bd08      	pop	{r3, pc}
 80a01dc:	20000284 	.word	0x20000284

080a01e0 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.21>:
        }
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
 80a01e0:	b508      	push	{r3, lr}

bool sendNow(String Command)                                                      // This command lets you force a reporting cycle
{
  if (Command == "1") {
    state = REPORTING_STATE;                                                      // Set the state to reporting
    waitUntil(meterParticlePublish);  
 80a01e2:	f7ff ffef 	bl	80a01c4 <_Z20meterParticlePublishv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a01e6:	b118      	cbz	r0, 80a01f0 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.21+0x10>
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }
 80a01e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80a01ec:	f7ff bfea 	b.w	80a01c4 <_Z20meterParticlePublishv>

    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
            spark_process();
 80a01f0:	f000 fd30 	bl	80a0c54 <spark_process>
 80a01f4:	e7f5      	b.n	80a01e2 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.21+0x2>

080a01f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a01f6:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a01f8:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a01fa:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a01fc:	b17c      	cbz	r4, 80a021e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a01fe:	6863      	ldr	r3, [r4, #4]
 80a0200:	3b01      	subs	r3, #1
 80a0202:	6063      	str	r3, [r4, #4]
 80a0204:	b95b      	cbnz	r3, 80a021e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a0206:	6823      	ldr	r3, [r4, #0]
 80a0208:	4620      	mov	r0, r4
 80a020a:	689b      	ldr	r3, [r3, #8]
 80a020c:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a020e:	68a3      	ldr	r3, [r4, #8]
 80a0210:	3b01      	subs	r3, #1
 80a0212:	60a3      	str	r3, [r4, #8]
 80a0214:	b91b      	cbnz	r3, 80a021e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a0216:	6823      	ldr	r3, [r4, #0]
 80a0218:	4620      	mov	r0, r4
 80a021a:	68db      	ldr	r3, [r3, #12]
 80a021c:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a021e:	4628      	mov	r0, r5
 80a0220:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0224 <_Z9sendEventv>:
}



void sendEvent()
{
 80a0224:	b500      	push	{lr}
  char data[64];
  snprintf(data, sizeof(data), "{\"current\":%3.1f, \"raw_current\":%f}",current_irms,raw_irms);
 80a0226:	4b15      	ldr	r3, [pc, #84]	; (80a027c <_Z9sendEventv+0x58>)
}



void sendEvent()
{
 80a0228:	b097      	sub	sp, #92	; 0x5c
  char data[64];
  snprintf(data, sizeof(data), "{\"current\":%3.1f, \"raw_current\":%f}",current_irms,raw_irms);
 80a022a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a022e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80a0232:	4b13      	ldr	r3, [pc, #76]	; (80a0280 <_Z9sendEventv+0x5c>)
 80a0234:	2140      	movs	r1, #64	; 0x40
 80a0236:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a023a:	a806      	add	r0, sp, #24
 80a023c:	e9cd 2300 	strd	r2, r3, [sp]
 80a0240:	4a10      	ldr	r2, [pc, #64]	; (80a0284 <_Z9sendEventv+0x60>)
 80a0242:	f000 fdbf 	bl	80a0dc4 <snprintf>
 80a0246:	4b10      	ldr	r3, [pc, #64]	; (80a0288 <_Z9sendEventv+0x64>)
  Particle.publish("current-webhook", data, PRIVATE);
 80a0248:	2200      	movs	r2, #0
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 80a024a:	781b      	ldrb	r3, [r3, #0]
 80a024c:	490f      	ldr	r1, [pc, #60]	; (80a028c <_Z9sendEventv+0x68>)
 80a024e:	f88d 2000 	strb.w	r2, [sp]
 80a0252:	a804      	add	r0, sp, #16
 80a0254:	aa06      	add	r2, sp, #24
 80a0256:	f7ff ff50 	bl	80a00fa <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.36.constprop.48>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a025a:	a805      	add	r0, sp, #20
 80a025c:	f7ff ffcb 	bl	80a01f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  currentMinutePeriod = Time.minute();                                                        // Change the time period
 80a0260:	f001 fc02 	bl	80a1a68 <_ZN9TimeClass6minuteEv>
 80a0264:	4b0a      	ldr	r3, [pc, #40]	; (80a0290 <_Z9sendEventv+0x6c>)
  dataInFlight = true;                                                                      // set the data inflight flag
 80a0266:	2201      	movs	r2, #1
void sendEvent()
{
  char data[64];
  snprintf(data, sizeof(data), "{\"current\":%3.1f, \"raw_current\":%f}",current_irms,raw_irms);
  Particle.publish("current-webhook", data, PRIVATE);
  currentMinutePeriod = Time.minute();                                                        // Change the time period
 80a0268:	7018      	strb	r0, [r3, #0]
  dataInFlight = true;                                                                      // set the data inflight flag
 80a026a:	4b0a      	ldr	r3, [pc, #40]	; (80a0294 <_Z9sendEventv+0x70>)
 80a026c:	701a      	strb	r2, [r3, #0]
 80a026e:	f000 fb9b 	bl	80a09a8 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
 80a0272:	4b09      	ldr	r3, [pc, #36]	; (80a0298 <_Z9sendEventv+0x74>)
 80a0274:	6018      	str	r0, [r3, #0]
}
 80a0276:	b017      	add	sp, #92	; 0x5c
 80a0278:	f85d fb04 	ldr.w	pc, [sp], #4
 80a027c:	20000198 	.word	0x20000198
 80a0280:	200001b8 	.word	0x200001b8
 80a0284:	080a3ad0 	.word	0x080a3ad0
 80a0288:	20000280 	.word	0x20000280
 80a028c:	080a3af4 	.word	0x080a3af4
 80a0290:	20000281 	.word	0x20000281
 80a0294:	200000d0 	.word	0x200000d0
 80a0298:	20000288 	.word	0x20000288

080a029c <_Z14UbidotsHandlerPKcS0_>:

void UbidotsHandler(const char *event, const char *data)                                    // Looks at the response from Ubidots - Will reset Photon if no successful response
{                                                                                           // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
 80a029c:	b530      	push	{r4, r5, lr}
    // Response Template: "{{hourly.0.status_code}}"
  if (!data) {                                                                    // First check to see if there is any data
 80a029e:	460c      	mov	r4, r1
  dataInFlight = true;                                                                      // set the data inflight flag
  webhookTimeStamp = millis();
}

void UbidotsHandler(const char *event, const char *data)                                    // Looks at the response from Ubidots - Will reset Photon if no successful response
{                                                                                           // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
 80a02a0:	b085      	sub	sp, #20
 80a02a2:	4d1d      	ldr	r5, [pc, #116]	; (80a0318 <_Z14UbidotsHandlerPKcS0_+0x7c>)
    // Response Template: "{{hourly.0.status_code}}"
  if (!data) {                                                                    // First check to see if there is any data
 80a02a4:	b951      	cbnz	r1, 80a02bc <_Z14UbidotsHandlerPKcS0_+0x20>
    if (verboseMode) {
 80a02a6:	782b      	ldrb	r3, [r5, #0]
 80a02a8:	2b00      	cmp	r3, #0
 80a02aa:	d032      	beq.n	80a0312 <_Z14UbidotsHandlerPKcS0_+0x76>
      waitUntil(meterParticlePublish);
 80a02ac:	f7ff ff98 	bl	80a01e0 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.21>
 80a02b0:	4b1a      	ldr	r3, [pc, #104]	; (80a031c <_Z14UbidotsHandlerPKcS0_+0x80>)
      Particle.publish("Ubidots Hook", "No Data", PRIVATE);
 80a02b2:	4a1b      	ldr	r2, [pc, #108]	; (80a0320 <_Z14UbidotsHandlerPKcS0_+0x84>)
 80a02b4:	781b      	ldrb	r3, [r3, #0]
 80a02b6:	f88d 4000 	strb.w	r4, [sp]
 80a02ba:	e023      	b.n	80a0304 <_Z14UbidotsHandlerPKcS0_+0x68>
    }
    return;
  }
  int responseCode = atoi(data);                                                  // Response is only a single number thanks to Template
 80a02bc:	4608      	mov	r0, r1
 80a02be:	f002 fe11 	bl	80a2ee4 <atoi>
  
  if ((responseCode == 200) || (responseCode == 201))
 80a02c2:	38c8      	subs	r0, #200	; 0xc8
 80a02c4:	2801      	cmp	r0, #1
  {
    if (verboseMode) {
 80a02c6:	782b      	ldrb	r3, [r5, #0]
    }
    return;
  }
  int responseCode = atoi(data);                                                  // Response is only a single number thanks to Template
  
  if ((responseCode == 200) || (responseCode == 201))
 80a02c8:	d813      	bhi.n	80a02f2 <_Z14UbidotsHandlerPKcS0_+0x56>
  {
    if (verboseMode) {
 80a02ca:	b173      	cbz	r3, 80a02ea <_Z14UbidotsHandlerPKcS0_+0x4e>
      waitUntil(meterParticlePublish);
 80a02cc:	f7ff ff88 	bl	80a01e0 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.21>
 80a02d0:	4b12      	ldr	r3, [pc, #72]	; (80a031c <_Z14UbidotsHandlerPKcS0_+0x80>)
      Particle.publish("State", "Response Received", PRIVATE);
 80a02d2:	2200      	movs	r2, #0
 80a02d4:	781b      	ldrb	r3, [r3, #0]
 80a02d6:	a802      	add	r0, sp, #8
 80a02d8:	f88d 2000 	strb.w	r2, [sp]
 80a02dc:	4911      	ldr	r1, [pc, #68]	; (80a0324 <_Z14UbidotsHandlerPKcS0_+0x88>)
 80a02de:	4a12      	ldr	r2, [pc, #72]	; (80a0328 <_Z14UbidotsHandlerPKcS0_+0x8c>)
 80a02e0:	f7ff ff0b 	bl	80a00fa <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.36.constprop.48>
 80a02e4:	a803      	add	r0, sp, #12
 80a02e6:	f7ff ff86 	bl	80a01f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
    dataInFlight = false;    
 80a02ea:	4b10      	ldr	r3, [pc, #64]	; (80a032c <_Z14UbidotsHandlerPKcS0_+0x90>)
 80a02ec:	2200      	movs	r2, #0
 80a02ee:	701a      	strb	r2, [r3, #0]
 80a02f0:	e00f      	b.n	80a0312 <_Z14UbidotsHandlerPKcS0_+0x76>
  }
  else if (verboseMode) {
 80a02f2:	b173      	cbz	r3, 80a0312 <_Z14UbidotsHandlerPKcS0_+0x76>
    waitUntil(meterParticlePublish);      
 80a02f4:	f7ff ff74 	bl	80a01e0 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.21>
 80a02f8:	4b08      	ldr	r3, [pc, #32]	; (80a031c <_Z14UbidotsHandlerPKcS0_+0x80>)
    Particle.publish("Ubidots Hook", data, PRIVATE);                              // Publish the response code
 80a02fa:	2200      	movs	r2, #0
 80a02fc:	781b      	ldrb	r3, [r3, #0]
 80a02fe:	f88d 2000 	strb.w	r2, [sp]
 80a0302:	4622      	mov	r2, r4
 80a0304:	a802      	add	r0, sp, #8
 80a0306:	490a      	ldr	r1, [pc, #40]	; (80a0330 <_Z14UbidotsHandlerPKcS0_+0x94>)
 80a0308:	f7ff fef7 	bl	80a00fa <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.36.constprop.48>
 80a030c:	a803      	add	r0, sp, #12
 80a030e:	f7ff ff72 	bl	80a01f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }

}
 80a0312:	b005      	add	sp, #20
 80a0314:	bd30      	pop	{r4, r5, pc}
 80a0316:	bf00      	nop
 80a0318:	20000283 	.word	0x20000283
 80a031c:	20000280 	.word	0x20000280
 80a0320:	080a3b04 	.word	0x080a3b04
 80a0324:	080a3b2b 	.word	0x080a3b2b
 80a0328:	080a3b19 	.word	0x080a3b19
 80a032c:	200000d0 	.word	0x200000d0
 80a0330:	080a3b0c 	.word	0x080a3b0c

080a0334 <_Z14setVerboseMode6String>:
  if (Particle.connected()) return 1;                               // Were able to connect successfully
  else return 0;                                                    // Failed to connect
}

int setVerboseMode(String command) // Function to force sending data in current hour
{
 80a0334:	b530      	push	{r4, r5, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80a0336:	4913      	ldr	r1, [pc, #76]	; (80a0384 <_Z14setVerboseMode6String+0x50>)
 80a0338:	b085      	sub	sp, #20
 80a033a:	4605      	mov	r5, r0
 80a033c:	f001 fad5 	bl	80a18ea <_ZNK6String6equalsEPKc>
  if (command == "1")
 80a0340:	4604      	mov	r4, r0
 80a0342:	b148      	cbz	r0, 80a0358 <_Z14setVerboseMode6String+0x24>
  {
    verboseMode = true;
 80a0344:	4b10      	ldr	r3, [pc, #64]	; (80a0388 <_Z14setVerboseMode6String+0x54>)
 80a0346:	2401      	movs	r4, #1
 80a0348:	701c      	strb	r4, [r3, #0]
 80a034a:	4b10      	ldr	r3, [pc, #64]	; (80a038c <_Z14setVerboseMode6String+0x58>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
 80a034c:	2200      	movs	r2, #0
 80a034e:	781b      	ldrb	r3, [r3, #0]
 80a0350:	f88d 2000 	strb.w	r2, [sp]
 80a0354:	4a0e      	ldr	r2, [pc, #56]	; (80a0390 <_Z14setVerboseMode6String+0x5c>)
 80a0356:	e00b      	b.n	80a0370 <_Z14setVerboseMode6String+0x3c>
 80a0358:	490e      	ldr	r1, [pc, #56]	; (80a0394 <_Z14setVerboseMode6String+0x60>)
 80a035a:	4628      	mov	r0, r5
 80a035c:	f001 fac5 	bl	80a18ea <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
 80a0360:	b170      	cbz	r0, 80a0380 <_Z14setVerboseMode6String+0x4c>
  {
    verboseMode = false;
 80a0362:	4b09      	ldr	r3, [pc, #36]	; (80a0388 <_Z14setVerboseMode6String+0x54>)
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
 80a0364:	4a0c      	ldr	r2, [pc, #48]	; (80a0398 <_Z14setVerboseMode6String+0x64>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
    return 1;
  }
  else if (command == "0")
  {
    verboseMode = false;
 80a0366:	701c      	strb	r4, [r3, #0]
 80a0368:	4b08      	ldr	r3, [pc, #32]	; (80a038c <_Z14setVerboseMode6String+0x58>)
 80a036a:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
 80a036c:	f88d 4000 	strb.w	r4, [sp]
 80a0370:	490a      	ldr	r1, [pc, #40]	; (80a039c <_Z14setVerboseMode6String+0x68>)
 80a0372:	a802      	add	r0, sp, #8
 80a0374:	f7ff fec1 	bl	80a00fa <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.36.constprop.48>
 80a0378:	a803      	add	r0, sp, #12
 80a037a:	f7ff ff3c 	bl	80a01f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a037e:	2001      	movs	r0, #1
    return 1;
  }
  else return 0;
}
 80a0380:	b005      	add	sp, #20
 80a0382:	bd30      	pop	{r4, r5, pc}
 80a0384:	080a3c2f 	.word	0x080a3c2f
 80a0388:	20000283 	.word	0x20000283
 80a038c:	20000280 	.word	0x20000280
 80a0390:	080a3b31 	.word	0x080a3b31
 80a0394:	080a3b42 	.word	0x080a3b42
 80a0398:	080a3b44 	.word	0x080a3b44
 80a039c:	080a3b54 	.word	0x080a3b54

080a03a0 <_Z22publishStateTransitionv>:


void publishStateTransition(void)
{
 80a03a0:	b530      	push	{r4, r5, lr}
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
 80a03a2:	4d18      	ldr	r5, [pc, #96]	; (80a0404 <_Z22publishStateTransitionv+0x64>)
 80a03a4:	4918      	ldr	r1, [pc, #96]	; (80a0408 <_Z22publishStateTransitionv+0x68>)
 80a03a6:	782a      	ldrb	r2, [r5, #0]
 80a03a8:	231a      	movs	r3, #26
 80a03aa:	fb03 1202 	mla	r2, r3, r2, r1
 80a03ae:	4c17      	ldr	r4, [pc, #92]	; (80a040c <_Z22publishStateTransitionv+0x6c>)
  else return 0;
}


void publishStateTransition(void)
{
 80a03b0:	b08f      	sub	sp, #60	; 0x3c
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
 80a03b2:	7820      	ldrb	r0, [r4, #0]
 80a03b4:	9200      	str	r2, [sp, #0]
 80a03b6:	fb03 1300 	mla	r3, r3, r0, r1
 80a03ba:	4a15      	ldr	r2, [pc, #84]	; (80a0410 <_Z22publishStateTransitionv+0x70>)
 80a03bc:	2128      	movs	r1, #40	; 0x28
 80a03be:	a804      	add	r0, sp, #16
 80a03c0:	f000 fd00 	bl	80a0dc4 <snprintf>
  oldState = state;
 80a03c4:	782b      	ldrb	r3, [r5, #0]
 80a03c6:	7023      	strb	r3, [r4, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a03c8:	f000 fc54 	bl	80a0c74 <spark_cloud_flag_connected>
  if(Particle.connected()) {
 80a03cc:	b190      	cbz	r0, 80a03f4 <_Z22publishStateTransitionv+0x54>
    waitUntil(meterParticlePublish);
 80a03ce:	f7ff ff07 	bl	80a01e0 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.21>
 80a03d2:	4b10      	ldr	r3, [pc, #64]	; (80a0414 <_Z22publishStateTransitionv+0x74>)
    Particle.publish("State Transition",stateTransitionString, PRIVATE);
 80a03d4:	2200      	movs	r2, #0
 80a03d6:	781b      	ldrb	r3, [r3, #0]
 80a03d8:	490f      	ldr	r1, [pc, #60]	; (80a0418 <_Z22publishStateTransitionv+0x78>)
 80a03da:	f88d 2000 	strb.w	r2, [sp]
 80a03de:	a802      	add	r0, sp, #8
 80a03e0:	aa04      	add	r2, sp, #16
 80a03e2:	f7ff fe8a 	bl	80a00fa <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.36.constprop.48>
 80a03e6:	a803      	add	r0, sp, #12
 80a03e8:	f7ff ff05 	bl	80a01f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a03ec:	f000 fadc 	bl	80a09a8 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
 80a03f0:	4b0a      	ldr	r3, [pc, #40]	; (80a041c <_Z22publishStateTransitionv+0x7c>)
 80a03f2:	6018      	str	r0, [r3, #0]
  }
  Serial.println(stateTransitionString);
 80a03f4:	f001 fc48 	bl	80a1c88 <_Z16_fetch_usbserialv>
 80a03f8:	a904      	add	r1, sp, #16
 80a03fa:	f001 f988 	bl	80a170e <_ZN5Print7printlnEPKc>
}
 80a03fe:	b00f      	add	sp, #60	; 0x3c
 80a0400:	bd30      	pop	{r4, r5, pc}
 80a0402:	bf00      	nop
 80a0404:	200001b0 	.word	0x200001b0
 80a0408:	20000000 	.word	0x20000000
 80a040c:	20000282 	.word	0x20000282
 80a0410:	080a3b59 	.word	0x080a3b59
 80a0414:	20000280 	.word	0x20000280
 80a0418:	080a3b67 	.word	0x080a3b67
 80a041c:	20000284 	.word	0x20000284

080a0420 <loop>:
  if(verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);                                 // Let Particle know how the startup process went
  
  lastPublish = millis();
}

void loop() {
 80a0420:	b530      	push	{r4, r5, lr}
    
  switch(state) {
 80a0422:	4c5e      	ldr	r4, [pc, #376]	; (80a059c <loop+0x17c>)
  if(verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);                                 // Let Particle know how the startup process went
  
  lastPublish = millis();
}

void loop() {
 80a0424:	b085      	sub	sp, #20
    
  switch(state) {
 80a0426:	7823      	ldrb	r3, [r4, #0]
 80a0428:	3b01      	subs	r3, #1
 80a042a:	2b04      	cmp	r3, #4
 80a042c:	f200 80b3 	bhi.w	80a0596 <loop+0x176>
 80a0430:	e8df f003 	tbb	[pc, r3]
 80a0434:	341d0382 	.word	0x341d0382
 80a0438:	56          	.byte	0x56
 80a0439:	00          	.byte	0x00
  
  case IDLE_STATE:                                                                          // Stay here if the device is turned off. 
    {
      
      if (verboseMode && oldState != state) publishStateTransition();                    // If verboseMode is on and state is changed, Then publish the state transition.
 80a043a:	4b59      	ldr	r3, [pc, #356]	; (80a05a0 <loop+0x180>)
 80a043c:	781b      	ldrb	r3, [r3, #0]
 80a043e:	b12b      	cbz	r3, 80a044c <loop+0x2c>
 80a0440:	4b58      	ldr	r3, [pc, #352]	; (80a05a4 <loop+0x184>)
 80a0442:	781b      	ldrb	r3, [r3, #0]
 80a0444:	2b02      	cmp	r3, #2
 80a0446:	d001      	beq.n	80a044c <loop+0x2c>
 80a0448:	f7ff ffaa 	bl	80a03a0 <_Z22publishStateTransitionv>

      static int TimePassed = 0;
  
      if ((Time.second() - TimePassed >= 5) || Time.minute() != currentMinutePeriod) {     // Sample time or the top of the hour
 80a044c:	f001 fb16 	bl	80a1a7c <_ZN9TimeClass6secondEv>
 80a0450:	4b55      	ldr	r3, [pc, #340]	; (80a05a8 <loop+0x188>)
 80a0452:	681a      	ldr	r2, [r3, #0]
 80a0454:	461d      	mov	r5, r3
 80a0456:	1a80      	subs	r0, r0, r2
 80a0458:	2804      	cmp	r0, #4
 80a045a:	f300 8097 	bgt.w	80a058c <loop+0x16c>
 80a045e:	f001 fb03 	bl	80a1a68 <_ZN9TimeClass6minuteEv>
 80a0462:	4b52      	ldr	r3, [pc, #328]	; (80a05ac <loop+0x18c>)
 80a0464:	781b      	ldrb	r3, [r3, #0]
 80a0466:	4298      	cmp	r0, r3
 80a0468:	f040 8090 	bne.w	80a058c <loop+0x16c>
 80a046c:	e093      	b.n	80a0596 <loop+0x176>
      break;
      
    } 

  case MEASURING_STATE:                                                                     // Take measurements prior to sending
    if (verboseMode && state != oldState) publishStateTransition();
 80a046e:	4b4c      	ldr	r3, [pc, #304]	; (80a05a0 <loop+0x180>)
 80a0470:	781b      	ldrb	r3, [r3, #0]
 80a0472:	b12b      	cbz	r3, 80a0480 <loop+0x60>
 80a0474:	4b4b      	ldr	r3, [pc, #300]	; (80a05a4 <loop+0x184>)
 80a0476:	781b      	ldrb	r3, [r3, #0]
 80a0478:	2b03      	cmp	r3, #3
 80a047a:	d001      	beq.n	80a0480 <loop+0x60>
 80a047c:	f7ff ff90 	bl	80a03a0 <_Z22publishStateTransitionv>

    if (!takeMeasurements())
 80a0480:	f7ff fe48 	bl	80a0114 <_Z16takeMeasurementsv>
 80a0484:	b908      	cbnz	r0, 80a048a <loop+0x6a>
    {
      state = IDLE_STATE;
 80a0486:	2302      	movs	r3, #2
 80a0488:	e021      	b.n	80a04ce <loop+0xae>
    }
   
    else {
      state = REPORTING_STATE;
 80a048a:	2304      	movs	r3, #4
 80a048c:	7023      	strb	r3, [r4, #0]
      previous_irms = current_irms;
 80a048e:	4b48      	ldr	r3, [pc, #288]	; (80a05b0 <loop+0x190>)
 80a0490:	e9d3 0100 	ldrd	r0, r1, [r3]
 80a0494:	4b47      	ldr	r3, [pc, #284]	; (80a05b4 <loop+0x194>)
 80a0496:	e9c3 0100 	strd	r0, r1, [r3]
 80a049a:	e07c      	b.n	80a0596 <loop+0x176>
    }
    break;

  case REPORTING_STATE:
    if (verboseMode && state != oldState) publishStateTransition();                         // Reporting - hourly or on command
 80a049c:	4b40      	ldr	r3, [pc, #256]	; (80a05a0 <loop+0x180>)
 80a049e:	781b      	ldrb	r3, [r3, #0]
 80a04a0:	b12b      	cbz	r3, 80a04ae <loop+0x8e>
 80a04a2:	4b40      	ldr	r3, [pc, #256]	; (80a05a4 <loop+0x184>)
 80a04a4:	781b      	ldrb	r3, [r3, #0]
 80a04a6:	2b04      	cmp	r3, #4
 80a04a8:	d001      	beq.n	80a04ae <loop+0x8e>
 80a04aa:	f7ff ff79 	bl	80a03a0 <_Z22publishStateTransitionv>
 80a04ae:	f000 fbe1 	bl	80a0c74 <spark_cloud_flag_connected>
   
    if (Particle.connected()) {
 80a04b2:	b170      	cbz	r0, 80a04d2 <loop+0xb2>
      if (Time.hour() == 12) Particle.syncTime();                                           // Set the clock each day at noon
 80a04b4:	f001 face 	bl	80a1a54 <_ZN9TimeClass4hourEv>
 80a04b8:	280c      	cmp	r0, #12
 80a04ba:	d105      	bne.n	80a04c8 <loop+0xa8>
 80a04bc:	f000 fbda 	bl	80a0c74 <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
 80a04c0:	b110      	cbz	r0, 80a04c8 <loop+0xa8>
            return false;
        }
        return spark_sync_time(NULL);
 80a04c2:	2000      	movs	r0, #0
 80a04c4:	f000 fbf6 	bl	80a0cb4 <spark_sync_time>
      sendEvent();                                                                          // Send data to Ubidots
 80a04c8:	f7ff feac 	bl	80a0224 <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                                              // Wait for Response
 80a04cc:	2305      	movs	r3, #5
 80a04ce:	7023      	strb	r3, [r4, #0]
 80a04d0:	e061      	b.n	80a0596 <loop+0x176>
    }
    else {
      state = ERROR_STATE;
 80a04d2:	2301      	movs	r3, #1
 80a04d4:	7023      	strb	r3, [r4, #0]
 80a04d6:	f000 fa67 	bl	80a09a8 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
 80a04da:	4b37      	ldr	r3, [pc, #220]	; (80a05b8 <loop+0x198>)
 80a04dc:	6018      	str	r0, [r3, #0]
 80a04de:	e05a      	b.n	80a0596 <loop+0x176>
    }
    break;

  case RESP_WAIT_STATE:
    if (verboseMode && state != oldState) publishStateTransition();
 80a04e0:	4b2f      	ldr	r3, [pc, #188]	; (80a05a0 <loop+0x180>)
 80a04e2:	781b      	ldrb	r3, [r3, #0]
 80a04e4:	b12b      	cbz	r3, 80a04f2 <loop+0xd2>
 80a04e6:	4b2f      	ldr	r3, [pc, #188]	; (80a05a4 <loop+0x184>)
 80a04e8:	781b      	ldrb	r3, [r3, #0]
 80a04ea:	2b05      	cmp	r3, #5
 80a04ec:	d001      	beq.n	80a04f2 <loop+0xd2>
 80a04ee:	f7ff ff57 	bl	80a03a0 <_Z22publishStateTransitionv>
    if (!dataInFlight)                                                // Response received back to IDLE state
 80a04f2:	4b32      	ldr	r3, [pc, #200]	; (80a05bc <loop+0x19c>)
 80a04f4:	781b      	ldrb	r3, [r3, #0]
 80a04f6:	2b00      	cmp	r3, #0
 80a04f8:	d0c5      	beq.n	80a0486 <loop+0x66>
 80a04fa:	f000 fa55 	bl	80a09a8 <HAL_Timer_Get_Milli_Seconds>
    {
     state = IDLE_STATE;
    }
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
 80a04fe:	4b30      	ldr	r3, [pc, #192]	; (80a05c0 <loop+0x1a0>)
 80a0500:	681b      	ldr	r3, [r3, #0]
 80a0502:	1ac0      	subs	r0, r0, r3
 80a0504:	f64a 73c8 	movw	r3, #45000	; 0xafc8
 80a0508:	4298      	cmp	r0, r3
 80a050a:	d944      	bls.n	80a0596 <loop+0x176>
 80a050c:	f000 fa4c 	bl	80a09a8 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
 80a0510:	4d29      	ldr	r5, [pc, #164]	; (80a05b8 <loop+0x198>)
 80a0512:	4b2c      	ldr	r3, [pc, #176]	; (80a05c4 <loop+0x1a4>)
      Particle.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
 80a0514:	2200      	movs	r2, #0
    if (!dataInFlight)                                                // Response received back to IDLE state
    {
     state = IDLE_STATE;
    }
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
      resetTimeStamp = millis();
 80a0516:	6028      	str	r0, [r5, #0]
 80a0518:	781b      	ldrb	r3, [r3, #0]
      Particle.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
 80a051a:	492b      	ldr	r1, [pc, #172]	; (80a05c8 <loop+0x1a8>)
 80a051c:	f88d 2000 	strb.w	r2, [sp]
 80a0520:	a802      	add	r0, sp, #8
 80a0522:	4a2a      	ldr	r2, [pc, #168]	; (80a05cc <loop+0x1ac>)
 80a0524:	f7ff fde9 	bl	80a00fa <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.36.constprop.48>
 80a0528:	a803      	add	r0, sp, #12
 80a052a:	f7ff fe64 	bl	80a01f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      state = ERROR_STATE;                                            // Response timed out
 80a052e:	2301      	movs	r3, #1
 80a0530:	7023      	strb	r3, [r4, #0]
 80a0532:	f000 fa39 	bl	80a09a8 <HAL_Timer_Get_Milli_Seconds>
 80a0536:	e02d      	b.n	80a0594 <loop+0x174>
    }
    break;

  
  case ERROR_STATE:                                                                         // To be enhanced - where we deal with errors
    if (verboseMode && state != oldState) publishStateTransition();
 80a0538:	4b19      	ldr	r3, [pc, #100]	; (80a05a0 <loop+0x180>)
 80a053a:	781b      	ldrb	r3, [r3, #0]
 80a053c:	b12b      	cbz	r3, 80a054a <loop+0x12a>
 80a053e:	4b19      	ldr	r3, [pc, #100]	; (80a05a4 <loop+0x184>)
 80a0540:	781b      	ldrb	r3, [r3, #0]
 80a0542:	2b01      	cmp	r3, #1
 80a0544:	d001      	beq.n	80a054a <loop+0x12a>
 80a0546:	f7ff ff2b 	bl	80a03a0 <_Z22publishStateTransitionv>
 80a054a:	f000 fa2d 	bl	80a09a8 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait)
 80a054e:	4b1a      	ldr	r3, [pc, #104]	; (80a05b8 <loop+0x198>)
 80a0550:	681b      	ldr	r3, [r3, #0]
 80a0552:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 80a0556:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 80a055a:	4298      	cmp	r0, r3
 80a055c:	d91b      	bls.n	80a0596 <loop+0x176>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a055e:	f000 fb89 	bl	80a0c74 <spark_cloud_flag_connected>
    {
      if (Particle.connected()) Particle.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
 80a0562:	b160      	cbz	r0, 80a057e <loop+0x15e>
 80a0564:	4b17      	ldr	r3, [pc, #92]	; (80a05c4 <loop+0x1a4>)
 80a0566:	2200      	movs	r2, #0
 80a0568:	781b      	ldrb	r3, [r3, #0]
 80a056a:	a802      	add	r0, sp, #8
 80a056c:	f88d 2000 	strb.w	r2, [sp]
 80a0570:	4917      	ldr	r1, [pc, #92]	; (80a05d0 <loop+0x1b0>)
 80a0572:	4a18      	ldr	r2, [pc, #96]	; (80a05d4 <loop+0x1b4>)
 80a0574:	f7ff fdc1 	bl	80a00fa <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.36.constprop.48>
 80a0578:	a803      	add	r0, sp, #12
 80a057a:	f7ff fe3c 	bl	80a01f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      delay(2000);
 80a057e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80a0582:	f000 fc3f 	bl	80a0e04 <delay>
      System.reset();
 80a0586:	f001 f9df 	bl	80a1948 <_ZN11SystemClass5resetEv>
    }
    break;
  }
}
 80a058a:	e004      	b.n	80a0596 <loop+0x176>
      if (verboseMode && oldState != state) publishStateTransition();                    // If verboseMode is on and state is changed, Then publish the state transition.

      static int TimePassed = 0;
  
      if ((Time.second() - TimePassed >= 5) || Time.minute() != currentMinutePeriod) {     // Sample time or the top of the hour
          state = MEASURING_STATE;
 80a058c:	2303      	movs	r3, #3
 80a058e:	7023      	strb	r3, [r4, #0]
          TimePassed = Time.second();
 80a0590:	f001 fa74 	bl	80a1a7c <_ZN9TimeClass6secondEv>
 80a0594:	6028      	str	r0, [r5, #0]
      delay(2000);
      System.reset();
    }
    break;
  }
}
 80a0596:	b005      	add	sp, #20
 80a0598:	bd30      	pop	{r4, r5, pc}
 80a059a:	bf00      	nop
 80a059c:	200001b0 	.word	0x200001b0
 80a05a0:	20000283 	.word	0x20000283
 80a05a4:	20000282 	.word	0x20000282
 80a05a8:	200001c0 	.word	0x200001c0
 80a05ac:	20000281 	.word	0x20000281
 80a05b0:	200001b8 	.word	0x200001b8
 80a05b4:	20000290 	.word	0x20000290
 80a05b8:	200001ac 	.word	0x200001ac
 80a05bc:	200000d0 	.word	0x200000d0
 80a05c0:	20000288 	.word	0x20000288
 80a05c4:	20000280 	.word	0x20000280
 80a05c8:	080a3b78 	.word	0x080a3b78
 80a05cc:	080a3d36 	.word	0x080a3d36
 80a05d0:	080a3b2b 	.word	0x080a3b2b
 80a05d4:	080a3b91 	.word	0x080a3b91

080a05d8 <_Z8senseNow6String>:
  if(millis() - lastPublish >= publishFrequency) return 1;
  else return 0;
}

bool senseNow(String Command)                                                      // This command lets you force a reporting cycle
{
 80a05d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a05da:	4911      	ldr	r1, [pc, #68]	; (80a0620 <_Z8senseNow6String+0x48>)
 80a05dc:	4604      	mov	r4, r0
 80a05de:	f001 f984 	bl	80a18ea <_ZNK6String6equalsEPKc>
  if (Command == "1") {
 80a05e2:	b198      	cbz	r0, 80a060c <_Z8senseNow6String+0x34>
    state = MEASURING_STATE;                                                      // Set the state to reporting
 80a05e4:	4b0f      	ldr	r3, [pc, #60]	; (80a0624 <_Z8senseNow6String+0x4c>)
 80a05e6:	2203      	movs	r2, #3
 80a05e8:	701a      	strb	r2, [r3, #0]
    waitUntil(meterParticlePublish);  
 80a05ea:	f7ff fdf9 	bl	80a01e0 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.21>
 80a05ee:	4b0e      	ldr	r3, [pc, #56]	; (80a0628 <_Z8senseNow6String+0x50>)
    Particle.publish("Function", "Command accepted - sensing now",PRIVATE);       // Acknowledge receipt
 80a05f0:	2200      	movs	r2, #0
 80a05f2:	781b      	ldrb	r3, [r3, #0]
 80a05f4:	490d      	ldr	r1, [pc, #52]	; (80a062c <_Z8senseNow6String+0x54>)
 80a05f6:	f88d 2000 	strb.w	r2, [sp]
 80a05fa:	a802      	add	r0, sp, #8
 80a05fc:	4a0c      	ldr	r2, [pc, #48]	; (80a0630 <_Z8senseNow6String+0x58>)
 80a05fe:	f7ff fd7c 	bl	80a00fa <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.36.constprop.48>
 80a0602:	a803      	add	r0, sp, #12
 80a0604:	f7ff fdf7 	bl	80a01f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0608:	2001      	movs	r0, #1
 80a060a:	e006      	b.n	80a061a <_Z8senseNow6String+0x42>
 80a060c:	4909      	ldr	r1, [pc, #36]	; (80a0634 <_Z8senseNow6String+0x5c>)
 80a060e:	4620      	mov	r0, r4
 80a0610:	f001 f96b 	bl	80a18ea <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (Command == "0") {                                                      // No action required
 80a0614:	3000      	adds	r0, #0
 80a0616:	bf18      	it	ne
 80a0618:	2001      	movne	r0, #1
    return 1;

  }
  return 0;
}
 80a061a:	b004      	add	sp, #16
 80a061c:	bd10      	pop	{r4, pc}
 80a061e:	bf00      	nop
 80a0620:	080a3c2f 	.word	0x080a3c2f
 80a0624:	200001b0 	.word	0x200001b0
 80a0628:	20000280 	.word	0x20000280
 80a062c:	080a3bc4 	.word	0x080a3bc4
 80a0630:	080a3ba5 	.word	0x080a3ba5
 80a0634:	080a3b42 	.word	0x080a3b42

080a0638 <_Z7sendNow6String>:

bool sendNow(String Command)                                                      // This command lets you force a reporting cycle
{
 80a0638:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a063a:	4911      	ldr	r1, [pc, #68]	; (80a0680 <_Z7sendNow6String+0x48>)
 80a063c:	4604      	mov	r4, r0
 80a063e:	f001 f954 	bl	80a18ea <_ZNK6String6equalsEPKc>
  if (Command == "1") {
 80a0642:	b198      	cbz	r0, 80a066c <_Z7sendNow6String+0x34>
    state = REPORTING_STATE;                                                      // Set the state to reporting
 80a0644:	4b0f      	ldr	r3, [pc, #60]	; (80a0684 <_Z7sendNow6String+0x4c>)
 80a0646:	2204      	movs	r2, #4
 80a0648:	701a      	strb	r2, [r3, #0]
    waitUntil(meterParticlePublish);  
 80a064a:	f7ff fdc9 	bl	80a01e0 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.21>
 80a064e:	4b0e      	ldr	r3, [pc, #56]	; (80a0688 <_Z7sendNow6String+0x50>)
    Particle.publish("Function", "Command accepted - reporting now",PRIVATE);     // Acknowledge receipt
 80a0650:	2200      	movs	r2, #0
 80a0652:	781b      	ldrb	r3, [r3, #0]
 80a0654:	490d      	ldr	r1, [pc, #52]	; (80a068c <_Z7sendNow6String+0x54>)
 80a0656:	f88d 2000 	strb.w	r2, [sp]
 80a065a:	a802      	add	r0, sp, #8
 80a065c:	4a0c      	ldr	r2, [pc, #48]	; (80a0690 <_Z7sendNow6String+0x58>)
 80a065e:	f7ff fd4c 	bl	80a00fa <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.36.constprop.48>
 80a0662:	a803      	add	r0, sp, #12
 80a0664:	f7ff fdc7 	bl	80a01f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0668:	2001      	movs	r0, #1
 80a066a:	e006      	b.n	80a067a <_Z7sendNow6String+0x42>
 80a066c:	4909      	ldr	r1, [pc, #36]	; (80a0694 <_Z7sendNow6String+0x5c>)
 80a066e:	4620      	mov	r0, r4
 80a0670:	f001 f93b 	bl	80a18ea <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (Command == "0") {                                                      // No action required
 80a0674:	3000      	adds	r0, #0
 80a0676:	bf18      	it	ne
 80a0678:	2001      	movne	r0, #1
    return 1;
  }
  return 0;
}
 80a067a:	b004      	add	sp, #16
 80a067c:	bd10      	pop	{r4, pc}
 80a067e:	bf00      	nop
 80a0680:	080a3c2f 	.word	0x080a3c2f
 80a0684:	200001b0 	.word	0x200001b0
 80a0688:	20000280 	.word	0x20000280
 80a068c:	080a3bc4 	.word	0x080a3bc4
 80a0690:	080a3bcd 	.word	0x080a3bcd
 80a0694:	080a3b42 	.word	0x080a3b42

080a0698 <_ZN10CloudClass8functionIA12_cIPFb6StringEEEEbRKT_DpT0_>:
        static_assert(sizeof(T)==0, "\n\nIn Particle.variable(\"name\", myVar, STRING); myVar must be declared as char myVar[] not String myVar\n\n");
        return false;
    }

    template <typename T, class ... Types>
    static inline bool function(const T &name, Types ... args)
 80a0698:	b530      	push	{r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a069a:	2300      	movs	r3, #0
 80a069c:	b085      	sub	sp, #20
 80a069e:	4605      	mov	r5, r0
 80a06a0:	9302      	str	r3, [sp, #8]
      function(_Functor __f)
      : _Function_base()
      {
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
 80a06a2:	b121      	cbz	r1, 80a06ae <_ZN10CloudClass8functionIA12_cIPFb6StringEEEEbRKT_DpT0_+0x16>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a06a4:	4b14      	ldr	r3, [pc, #80]	; (80a06f8 <_ZN10CloudClass8functionIA12_cIPFb6StringEEEEbRKT_DpT0_+0x60>)
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 80a06a6:	9100      	str	r1, [sp, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a06a8:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a06aa:	4b14      	ldr	r3, [pc, #80]	; (80a06fc <_ZN10CloudClass8functionIA12_cIPFb6StringEEEEbRKT_DpT0_+0x64>)
 80a06ac:	9302      	str	r3, [sp, #8]
    }

    static bool _function(const char *funcKey, user_std_function_int_str_t func, void* reserved=NULL)
    {
        bool success = false;
        if (func) // if the call-wrapper has wrapped a callable object
 80a06ae:	9b02      	ldr	r3, [sp, #8]
 80a06b0:	b183      	cbz	r3, 80a06d4 <_ZN10CloudClass8functionIA12_cIPFb6StringEEEEbRKT_DpT0_+0x3c>
        {
            auto wrapper = new user_std_function_int_str_t(func);
 80a06b2:	2010      	movs	r0, #16
 80a06b4:	f7ff fcf3 	bl	80a009e <_Znwj>
 80a06b8:	4604      	mov	r4, r0
 80a06ba:	b158      	cbz	r0, 80a06d4 <_ZN10CloudClass8functionIA12_cIPFb6StringEEEEbRKT_DpT0_+0x3c>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a06bc:	2300      	movs	r3, #0
 80a06be:	6083      	str	r3, [r0, #8]
 80a06c0:	9b02      	ldr	r3, [sp, #8]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a06c2:	b17b      	cbz	r3, 80a06e4 <_ZN10CloudClass8functionIA12_cIPFb6StringEEEEbRKT_DpT0_+0x4c>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a06c4:	2202      	movs	r2, #2
 80a06c6:	4669      	mov	r1, sp
 80a06c8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a06ca:	9b03      	ldr	r3, [sp, #12]
 80a06cc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a06ce:	9b02      	ldr	r3, [sp, #8]
 80a06d0:	60a3      	str	r3, [r4, #8]
 80a06d2:	e007      	b.n	80a06e4 <_ZN10CloudClass8functionIA12_cIPFb6StringEEEEbRKT_DpT0_+0x4c>
        return register_function(call_raw_user_function, (void*)func, funcKey);
    }

    static bool _function(const char *funcKey, user_std_function_int_str_t func, void* reserved=NULL)
    {
        bool success = false;
 80a06d4:	2400      	movs	r4, #0

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a06d6:	9b02      	ldr	r3, [sp, #8]
 80a06d8:	b15b      	cbz	r3, 80a06f2 <_ZN10CloudClass8functionIA12_cIPFb6StringEEEEbRKT_DpT0_+0x5a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a06da:	2203      	movs	r2, #3
 80a06dc:	4669      	mov	r1, sp
 80a06de:	4668      	mov	r0, sp
 80a06e0:	4798      	blx	r3
    static inline bool function(const T &name, Types ... args)
    {
        static_assert(!is_string_literal<T>::value || sizeof(name) <= USER_FUNC_KEY_LENGTH + 1,
            "\n\nIn Particle.function, name must be " __XSTRING(USER_FUNC_KEY_LENGTH) " characters or less\n\n");

        return _function(name, args...);
 80a06e2:	e006      	b.n	80a06f2 <_ZN10CloudClass8functionIA12_cIPFb6StringEEEEbRKT_DpT0_+0x5a>
        bool success = false;
        if (func) // if the call-wrapper has wrapped a callable object
        {
            auto wrapper = new user_std_function_int_str_t(func);
            if (wrapper) {
                success = register_function(call_std_user_function, wrapper, funcKey);
 80a06e4:	4621      	mov	r1, r4
 80a06e6:	462a      	mov	r2, r5
 80a06e8:	4805      	ldr	r0, [pc, #20]	; (80a0700 <_ZN10CloudClass8functionIA12_cIPFb6StringEEEEbRKT_DpT0_+0x68>)
 80a06ea:	f000 fc1d 	bl	80a0f28 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a06ee:	4604      	mov	r4, r0
 80a06f0:	e7f1      	b.n	80a06d6 <_ZN10CloudClass8functionIA12_cIPFb6StringEEEEbRKT_DpT0_+0x3e>
    {
        static_assert(!is_string_literal<T>::value || sizeof(name) <= USER_FUNC_KEY_LENGTH + 1,
            "\n\nIn Particle.function, name must be " __XSTRING(USER_FUNC_KEY_LENGTH) " characters or less\n\n");

        return _function(name, args...);
    }
 80a06f2:	4620      	mov	r0, r4
 80a06f4:	b005      	add	sp, #20
 80a06f6:	bd30      	pop	{r4, r5, pc}
 80a06f8:	080a00cf 	.word	0x080a00cf
 80a06fc:	080a00b7 	.word	0x080a00b7
 80a0700:	080a0f01 	.word	0x080a0f01

080a0704 <setup>:
const char* releaseNumber = SOFTWARERELEASENUMBER;                                          // Displays the release on the menu
byte controlRegister;                                                                       // Stores the control register values
bool verboseMode=0;     

// setup() runs once, when the device is first turned on.
void setup() {
 80a0704:	b570      	push	{r4, r5, r6, lr}
 80a0706:	b0b8      	sub	sp, #224	; 0xe0
  Serial.begin(9600);
 80a0708:	f001 fabe 	bl	80a1c88 <_Z16_fetch_usbserialv>
 80a070c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0710:	f001 faa0 	bl	80a1c54 <_ZN9USBSerial5beginEl>

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
 80a0714:	4a32      	ldr	r2, [pc, #200]	; (80a07e0 <setup+0xdc>)
 80a0716:	4933      	ldr	r1, [pc, #204]	; (80a07e4 <setup+0xe0>)
 80a0718:	4833      	ldr	r0, [pc, #204]	; (80a07e8 <setup+0xe4>)
 80a071a:	f000 fc05 	bl	80a0f28 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>

  Particle.function("verboseMode",setVerboseMode);                                          // Added Particle Function For VerboseMode.
  Particle.function("Get-Reading", senseNow);                                               // This function will force it to get a reading and set the refresh rate to 15mins.
 80a071e:	4933      	ldr	r1, [pc, #204]	; (80a07ec <setup+0xe8>)
 80a0720:	4833      	ldr	r0, [pc, #204]	; (80a07f0 <setup+0xec>)
 80a0722:	f7ff ffb9 	bl	80a0698 <_ZN10CloudClass8functionIA12_cIPFb6StringEEEEbRKT_DpT0_>
  Particle.function("Send-Report", sendNow);                                                // This function will force it to get a reading and set the refresh rate to 15mins.
 80a0726:	4933      	ldr	r1, [pc, #204]	; (80a07f4 <setup+0xf0>)
 80a0728:	4833      	ldr	r0, [pc, #204]	; (80a07f8 <setup+0xf4>)
 80a072a:	f7ff ffb5 	bl	80a0698 <_ZN10CloudClass8functionIA12_cIPFb6StringEEEEbRKT_DpT0_>
  
  char StartupMessage[64] = "Startup Successful";                                                       // Messages from Initialization
 80a072e:	aa08      	add	r2, sp, #32
 80a0730:	4615      	mov	r5, r2
 80a0732:	4b32      	ldr	r3, [pc, #200]	; (80a07fc <setup+0xf8>)
 80a0734:	f103 0610 	add.w	r6, r3, #16
 80a0738:	4614      	mov	r4, r2
 80a073a:	6818      	ldr	r0, [r3, #0]
 80a073c:	6859      	ldr	r1, [r3, #4]
 80a073e:	3308      	adds	r3, #8
 80a0740:	c403      	stmia	r4!, {r0, r1}
 80a0742:	42b3      	cmp	r3, r6
 80a0744:	4622      	mov	r2, r4
 80a0746:	d1f7      	bne.n	80a0738 <setup+0x34>
 80a0748:	8819      	ldrh	r1, [r3, #0]
 80a074a:	789b      	ldrb	r3, [r3, #2]
 80a074c:	8021      	strh	r1, [r4, #0]
 80a074e:	70a3      	strb	r3, [r4, #2]
 80a0750:	222d      	movs	r2, #45	; 0x2d
 80a0752:	2100      	movs	r1, #0
 80a0754:	f10d 0033 	add.w	r0, sp, #51	; 0x33
  state = IDLE_STATE;
 80a0758:	4c29      	ldr	r4, [pc, #164]	; (80a0800 <setup+0xfc>)

  Particle.function("verboseMode",setVerboseMode);                                          // Added Particle Function For VerboseMode.
  Particle.function("Get-Reading", senseNow);                                               // This function will force it to get a reading and set the refresh rate to 15mins.
  Particle.function("Send-Report", sendNow);                                                // This function will force it to get a reading and set the refresh rate to 15mins.
  
  char StartupMessage[64] = "Startup Successful";                                                       // Messages from Initialization
 80a075a:	f002 fcd8 	bl	80a310e <memset>
  state = IDLE_STATE;
 80a075e:	2302      	movs	r3, #2
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
 80a0760:	a804      	add	r0, sp, #16
 80a0762:	7023      	strb	r3, [r4, #0]
 80a0764:	f000 fa8e 	bl	80a0c84 <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
 80a0768:	2300      	movs	r3, #0
 80a076a:	227d      	movs	r2, #125	; 0x7d
 80a076c:	a918      	add	r1, sp, #96	; 0x60
 80a076e:	a804      	add	r0, sp, #16
 80a0770:	f001 f8cd 	bl	80a190e <_ZNK6String8getBytesEPhjj>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
 80a0774:	2300      	movs	r3, #0
 80a0776:	9301      	str	r3, [sp, #4]
 80a0778:	9300      	str	r3, [sp, #0]
 80a077a:	461a      	mov	r2, r3
 80a077c:	4921      	ldr	r1, [pc, #132]	; (80a0804 <setup+0x100>)
 80a077e:	a818      	add	r0, sp, #96	; 0x60
 80a0780:	f000 fa90 	bl	80a0ca4 <spark_subscribe>
  char responseTopic[125];
  String deviceID = System.deviceID();                                                      // Multiple Electrons share the same hook - keeps things straight
  deviceID.toCharArray(responseTopic,125);
  Particle.subscribe(responseTopic, UbidotsHandler, MY_DEVICES);                            // Subscribe to the integration response event
  
  if(!connectToParticle()) {
 80a0784:	f7ff fcec 	bl	80a0160 <_Z17connectToParticlev>
 80a0788:	b948      	cbnz	r0, 80a079e <setup+0x9a>
    state = ERROR_STATE;                                                                               // We failed to connect can reset here or go to the ERROR state for remediation
 80a078a:	2301      	movs	r3, #1
 80a078c:	7023      	strb	r3, [r4, #0]
 80a078e:	f000 f90b 	bl	80a09a8 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
 80a0792:	4b1d      	ldr	r3, [pc, #116]	; (80a0808 <setup+0x104>)
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
 80a0794:	491d      	ldr	r1, [pc, #116]	; (80a080c <setup+0x108>)
  deviceID.toCharArray(responseTopic,125);
  Particle.subscribe(responseTopic, UbidotsHandler, MY_DEVICES);                            // Subscribe to the integration response event
  
  if(!connectToParticle()) {
    state = ERROR_STATE;                                                                               // We failed to connect can reset here or go to the ERROR state for remediation
    resetTimeStamp = millis();
 80a0796:	6018      	str	r0, [r3, #0]
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
 80a0798:	4628      	mov	r0, r5
 80a079a:	f002 fcf3 	bl	80a3184 <strcpy>
  }

  emon1.current(A2, 90.9);                                                                 // Current: input pin, calibration.
 80a079e:	4b1c      	ldr	r3, [pc, #112]	; (80a0810 <setup+0x10c>)
 80a07a0:	2200      	movs	r2, #0
 80a07a2:	210c      	movs	r1, #12
 80a07a4:	481b      	ldr	r0, [pc, #108]	; (80a0814 <setup+0x110>)
 80a07a6:	f000 f869 	bl	80a087c <_ZN13EnergyMonitor7currentEjd>
  takeMeasurements();
 80a07aa:	f7ff fcb3 	bl	80a0114 <_Z16takeMeasurementsv>
  
  if(verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);                                 // Let Particle know how the startup process went
 80a07ae:	4b1a      	ldr	r3, [pc, #104]	; (80a0818 <setup+0x114>)
 80a07b0:	781b      	ldrb	r3, [r3, #0]
 80a07b2:	b163      	cbz	r3, 80a07ce <setup+0xca>
 80a07b4:	4b19      	ldr	r3, [pc, #100]	; (80a081c <setup+0x118>)
 80a07b6:	2200      	movs	r2, #0
 80a07b8:	781b      	ldrb	r3, [r3, #0]
 80a07ba:	a802      	add	r0, sp, #8
 80a07bc:	f88d 2000 	strb.w	r2, [sp]
 80a07c0:	4917      	ldr	r1, [pc, #92]	; (80a0820 <setup+0x11c>)
 80a07c2:	462a      	mov	r2, r5
 80a07c4:	f7ff fc99 	bl	80a00fa <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.36.constprop.48>
 80a07c8:	a803      	add	r0, sp, #12
 80a07ca:	f7ff fd14 	bl	80a01f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a07ce:	f000 f8eb 	bl	80a09a8 <HAL_Timer_Get_Milli_Seconds>
  
  lastPublish = millis();
 80a07d2:	4b14      	ldr	r3, [pc, #80]	; (80a0824 <setup+0x120>)
 80a07d4:	6018      	str	r0, [r3, #0]
  
  char StartupMessage[64] = "Startup Successful";                                                       // Messages from Initialization
  state = IDLE_STATE;

  char responseTopic[125];
  String deviceID = System.deviceID();                                                      // Multiple Electrons share the same hook - keeps things straight
 80a07d6:	a804      	add	r0, sp, #16
 80a07d8:	f001 f813 	bl	80a1802 <_ZN6StringD1Ev>
  takeMeasurements();
  
  if(verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);                                 // Let Particle know how the startup process went
  
  lastPublish = millis();
}
 80a07dc:	b038      	add	sp, #224	; 0xe0
 80a07de:	bd70      	pop	{r4, r5, r6, pc}
 80a07e0:	080a3bee 	.word	0x080a3bee
 80a07e4:	080a0335 	.word	0x080a0335
 80a07e8:	080a0ed5 	.word	0x080a0ed5
 80a07ec:	080a05d9 	.word	0x080a05d9
 80a07f0:	080a3bfa 	.word	0x080a3bfa
 80a07f4:	080a0639 	.word	0x080a0639
 80a07f8:	080a3c06 	.word	0x080a3c06
 80a07fc:	080a3a90 	.word	0x080a3a90
 80a0800:	200001b0 	.word	0x200001b0
 80a0804:	080a029d 	.word	0x080a029d
 80a0808:	200001ac 	.word	0x200001ac
 80a080c:	080a3c12 	.word	0x080a3c12
 80a0810:	40554000 	.word	0x40554000
 80a0814:	200001c8 	.word	0x200001c8
 80a0818:	20000283 	.word	0x20000283
 80a081c:	20000280 	.word	0x20000280
 80a0820:	080a3c24 	.word	0x080a3c24
 80a0824:	20000284 	.word	0x20000284

080a0828 <_GLOBAL__sub_I_SystemMode>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0828:	4b10      	ldr	r3, [pc, #64]	; (80a086c <_GLOBAL__sub_I_SystemMode+0x44>)
  }
  else if (Command == "0") {                                                      // No action required
    return 1;
  }
  return 0;
}
 80a082a:	b570      	push	{r4, r5, r6, lr}
 80a082c:	2601      	movs	r6, #1
 80a082e:	701e      	strb	r6, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0830:	f000 f8da 	bl	80a09e8 <HAL_Pin_Map>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a0834:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a0838:	4c0d      	ldr	r4, [pc, #52]	; (80a0870 <_GLOBAL__sub_I_SystemMode+0x48>)
 80a083a:	2500      	movs	r5, #0

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a083c:	2002      	movs	r0, #2
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a083e:	8163      	strh	r3, [r4, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a0840:	6025      	str	r5, [r4, #0]
 80a0842:	80a5      	strh	r5, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a0844:	71a5      	strb	r5, [r4, #6]
 80a0846:	8125      	strh	r5, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0848:	f000 f9b8 	bl	80a0bbc <set_system_mode>

#define SOFTWARERELEASENUMBER "1.01"                                                        // Keep track of release numbers

// Prototypes and System Mode calls

SYSTEM_MODE(SEMI_AUTOMATIC);                                                               // This will enable user code to start executing automatically.
 80a084c:	4a09      	ldr	r2, [pc, #36]	; (80a0874 <_GLOBAL__sub_I_SystemMode+0x4c>)
 80a084e:	490a      	ldr	r1, [pc, #40]	; (80a0878 <_GLOBAL__sub_I_SystemMode+0x50>)
 80a0850:	4620      	mov	r0, r4
 80a0852:	f001 fc29 	bl	80a20a8 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);                                                                    // Means my code will not be held up by Particle processes.
 80a0856:	4629      	mov	r1, r5
 80a0858:	4630      	mov	r0, r6
 80a085a:	f000 f9bf 	bl	80a0bdc <system_thread_set_state>
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
 80a085e:	4631      	mov	r1, r6
  }
  else if (Command == "0") {                                                      // No action required
    return 1;
  }
  return 0;
}
 80a0860:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a0864:	2004      	movs	r0, #4
 80a0866:	f000 b887 	b.w	80a0978 <HAL_Feature_Set>
 80a086a:	bf00      	nop
 80a086c:	20000280 	.word	0x20000280
 80a0870:	200001a0 	.word	0x200001a0
 80a0874:	20000190 	.word	0x20000190
 80a0878:	080a00eb 	.word	0x080a00eb

080a087c <_ZN13EnergyMonitor7currentEjd>:
}

void EnergyMonitor::current(unsigned int _inPinI, double _ICAL)
{
   inPinI = _inPinI;
   ICAL = _ICAL;
 80a087c:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
   offsetI = ADC_COUNTS>>1;
 80a0880:	4b02      	ldr	r3, [pc, #8]	; (80a088c <_ZN13EnergyMonitor7currentEjd+0x10>)
 80a0882:	2200      	movs	r2, #0
   offsetV = ADC_COUNTS>>1;
}

void EnergyMonitor::current(unsigned int _inPinI, double _ICAL)
{
   inPinI = _inPinI;
 80a0884:	62c1      	str	r1, [r0, #44]	; 0x2c
   ICAL = _ICAL;
   offsetI = ADC_COUNTS>>1;
 80a0886:	e9c0 231c 	strd	r2, r3, [r0, #112]	; 0x70
 80a088a:	4770      	bx	lr
 80a088c:	40a00000 	.word	0x40a00000

080a0890 <_ZN13EnergyMonitor8calcIrmsEj>:
//--------------------------------------------------------------------------------------       
}

//--------------------------------------------------------------------------------------
double EnergyMonitor::calcIrms(unsigned int Number_of_Samples)
{
 80a0890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a0894:	4604      	mov	r4, r0
 80a0896:	468a      	mov	sl, r1
  
  int SupplyVoltage=3300;

  for (unsigned int n = 0; n < Number_of_Samples; n++)
 80a0898:	2500      	movs	r5, #0
 80a089a:	4555      	cmp	r5, sl
 80a089c:	d02f      	beq.n	80a08fe <_ZN13EnergyMonitor8calcIrmsEj+0x6e>
  {
    sampleI = analogRead(inPinI);
 80a089e:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 80a08a0:	f001 fb72 	bl	80a1f88 <analogRead>
 80a08a4:	64e0      	str	r0, [r4, #76]	; 0x4c

    // Digital low pass filter extracts the 2.5 V or 1.65 V dc offset, 
  //  then subtract this - signal is now centered on 0 counts.
    offsetI = (offsetI + (sampleI-offsetI)/1024);
 80a08a6:	f001 ffdf 	bl	80a2868 <__aeabi_i2d>
 80a08aa:	e9d4 671c 	ldrd	r6, r7, [r4, #112]	; 0x70
 80a08ae:	4632      	mov	r2, r6
 80a08b0:	463b      	mov	r3, r7
 80a08b2:	4680      	mov	r8, r0
 80a08b4:	4689      	mov	r9, r1
 80a08b6:	f001 fe89 	bl	80a25cc <__aeabi_dsub>
 80a08ba:	2200      	movs	r2, #0
 80a08bc:	4b24      	ldr	r3, [pc, #144]	; (80a0950 <_ZN13EnergyMonitor8calcIrmsEj+0xc0>)
 80a08be:	f002 f839 	bl	80a2934 <__aeabi_dmul>
 80a08c2:	4632      	mov	r2, r6
 80a08c4:	463b      	mov	r3, r7
 80a08c6:	f001 fe83 	bl	80a25d0 <__adddf3>
 80a08ca:	4602      	mov	r2, r0
 80a08cc:	460b      	mov	r3, r1
  filteredI = sampleI - offsetI;
 80a08ce:	4640      	mov	r0, r8
  {
    sampleI = analogRead(inPinI);

    // Digital low pass filter extracts the 2.5 V or 1.65 V dc offset, 
  //  then subtract this - signal is now centered on 0 counts.
    offsetI = (offsetI + (sampleI-offsetI)/1024);
 80a08d0:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70
  filteredI = sampleI - offsetI;
 80a08d4:	4649      	mov	r1, r9
 80a08d6:	f001 fe79 	bl	80a25cc <__aeabi_dsub>
 80a08da:	4602      	mov	r2, r0
 80a08dc:	460b      	mov	r3, r1
 80a08de:	e9c4 2318 	strd	r2, r3, [r4, #96]	; 0x60

    // Root-mean-square method current
    // 1) square current values
    sqI = filteredI * filteredI;
 80a08e2:	f002 f827 	bl	80a2934 <__aeabi_dmul>
 80a08e6:	4602      	mov	r2, r0
 80a08e8:	460b      	mov	r3, r1
    // 2) sum 
    sumI += sqI;
 80a08ea:	e9d4 0126 	ldrd	r0, r1, [r4, #152]	; 0x98
    offsetI = (offsetI + (sampleI-offsetI)/1024);
  filteredI = sampleI - offsetI;

    // Root-mean-square method current
    // 1) square current values
    sqI = filteredI * filteredI;
 80a08ee:	e9c4 2324 	strd	r2, r3, [r4, #144]	; 0x90
    // 2) sum 
    sumI += sqI;
 80a08f2:	f001 fe6d 	bl	80a25d0 <__adddf3>
double EnergyMonitor::calcIrms(unsigned int Number_of_Samples)
{
  
  int SupplyVoltage=3300;

  for (unsigned int n = 0; n < Number_of_Samples; n++)
 80a08f6:	3501      	adds	r5, #1

    // Root-mean-square method current
    // 1) square current values
    sqI = filteredI * filteredI;
    // 2) sum 
    sumI += sqI;
 80a08f8:	e9c4 0126 	strd	r0, r1, [r4, #152]	; 0x98
double EnergyMonitor::calcIrms(unsigned int Number_of_Samples)
{
  
  int SupplyVoltage=3300;

  for (unsigned int n = 0; n < Number_of_Samples; n++)
 80a08fc:	e7cd      	b.n	80a089a <_ZN13EnergyMonitor8calcIrmsEj+0xa>
    sqI = filteredI * filteredI;
    // 2) sum 
    sumI += sqI;
  }

  double I_RATIO = ICAL *((SupplyVoltage/1000.0) / (ADC_COUNTS));
 80a08fe:	a312      	add	r3, pc, #72	; (adr r3, 80a0948 <_ZN13EnergyMonitor8calcIrmsEj+0xb8>)
 80a0900:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0904:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
 80a0908:	f002 f814 	bl	80a2934 <__aeabi_dmul>
 80a090c:	4606      	mov	r6, r0
  Irms = I_RATIO * sqrt(sumI / Number_of_Samples); 
 80a090e:	4628      	mov	r0, r5
    sqI = filteredI * filteredI;
    // 2) sum 
    sumI += sqI;
  }

  double I_RATIO = ICAL *((SupplyVoltage/1000.0) / (ADC_COUNTS));
 80a0910:	460f      	mov	r7, r1
  Irms = I_RATIO * sqrt(sumI / Number_of_Samples); 
 80a0912:	f001 ff99 	bl	80a2848 <__aeabi_ui2d>
 80a0916:	4602      	mov	r2, r0
 80a0918:	460b      	mov	r3, r1
 80a091a:	e9d4 0126 	ldrd	r0, r1, [r4, #152]	; 0x98
 80a091e:	f002 f933 	bl	80a2b88 <__aeabi_ddiv>
 80a0922:	f001 fd2d 	bl	80a2380 <sqrt>
 80a0926:	4602      	mov	r2, r0
 80a0928:	460b      	mov	r3, r1
 80a092a:	4630      	mov	r0, r6
 80a092c:	4639      	mov	r1, r7
 80a092e:	f002 f801 	bl	80a2934 <__aeabi_dmul>

  //Reset accumulators
  sumI = 0;
 80a0932:	2200      	movs	r2, #0
 80a0934:	2300      	movs	r3, #0
    // 2) sum 
    sumI += sqI;
  }

  double I_RATIO = ICAL *((SupplyVoltage/1000.0) / (ADC_COUNTS));
  Irms = I_RATIO * sqrt(sumI / Number_of_Samples); 
 80a0936:	e9c4 0108 	strd	r0, r1, [r4, #32]

  //Reset accumulators
  sumI = 0;
 80a093a:	e9c4 2326 	strd	r2, r3, [r4, #152]	; 0x98
//--------------------------------------------------------------------------------------             
 
  return Irms;
}
 80a093e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a0942:	bf00      	nop
 80a0944:	f3af 8000 	nop.w
 80a0948:	66666666 	.word	0x66666666
 80a094c:	3f4a6666 	.word	0x3f4a6666
 80a0950:	3f500000 	.word	0x3f500000

080a0954 <_GLOBAL__sub_I__ZN13EnergyMonitor7voltageEjdd>:
 80a0954:	f000 b848 	b.w	80a09e8 <HAL_Pin_Map>

080a0958 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a0958:	b508      	push	{r3, lr}
 80a095a:	4b02      	ldr	r3, [pc, #8]	; (80a0964 <os_mutex_recursive_create+0xc>)
 80a095c:	681b      	ldr	r3, [r3, #0]
 80a095e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0960:	9301      	str	r3, [sp, #4]
 80a0962:	bd08      	pop	{r3, pc}
 80a0964:	080601d0 	.word	0x080601d0

080a0968 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a0968:	b508      	push	{r3, lr}
 80a096a:	4b02      	ldr	r3, [pc, #8]	; (80a0974 <os_mutex_recursive_destroy+0xc>)
 80a096c:	681b      	ldr	r3, [r3, #0]
 80a096e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0970:	9301      	str	r3, [sp, #4]
 80a0972:	bd08      	pop	{r3, pc}
 80a0974:	080601d0 	.word	0x080601d0

080a0978 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
 80a0978:	b508      	push	{r3, lr}
 80a097a:	4b02      	ldr	r3, [pc, #8]	; (80a0984 <HAL_Feature_Set+0xc>)
 80a097c:	681b      	ldr	r3, [r3, #0]
 80a097e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0980:	9301      	str	r3, [sp, #4]
 80a0982:	bd08      	pop	{r3, pc}
 80a0984:	080601b8 	.word	0x080601b8

080a0988 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
 80a0988:	b508      	push	{r3, lr}
 80a098a:	4b02      	ldr	r3, [pc, #8]	; (80a0994 <HAL_Core_System_Reset_Ex+0xc>)
 80a098c:	681b      	ldr	r3, [r3, #0]
 80a098e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0990:	9301      	str	r3, [sp, #4]
 80a0992:	bd08      	pop	{r3, pc}
 80a0994:	080601b8 	.word	0x080601b8

080a0998 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0998:	b508      	push	{r3, lr}
 80a099a:	4b02      	ldr	r3, [pc, #8]	; (80a09a4 <HAL_RNG_GetRandomNumber+0xc>)
 80a099c:	681b      	ldr	r3, [r3, #0]
 80a099e:	685b      	ldr	r3, [r3, #4]
 80a09a0:	9301      	str	r3, [sp, #4]
 80a09a2:	bd08      	pop	{r3, pc}
 80a09a4:	0806019c 	.word	0x0806019c

080a09a8 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a09a8:	b508      	push	{r3, lr}
 80a09aa:	4b02      	ldr	r3, [pc, #8]	; (80a09b4 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a09ac:	681b      	ldr	r3, [r3, #0]
 80a09ae:	695b      	ldr	r3, [r3, #20]
 80a09b0:	9301      	str	r3, [sp, #4]
 80a09b2:	bd08      	pop	{r3, pc}
 80a09b4:	0806019c 	.word	0x0806019c

080a09b8 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 80a09b8:	b508      	push	{r3, lr}
 80a09ba:	4b02      	ldr	r3, [pc, #8]	; (80a09c4 <HAL_RTC_Get_UnixTime+0xc>)
 80a09bc:	681b      	ldr	r3, [r3, #0]
 80a09be:	69db      	ldr	r3, [r3, #28]
 80a09c0:	9301      	str	r3, [sp, #4]
 80a09c2:	bd08      	pop	{r3, pc}
 80a09c4:	0806019c 	.word	0x0806019c

080a09c8 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 80a09c8:	b508      	push	{r3, lr}
 80a09ca:	4b02      	ldr	r3, [pc, #8]	; (80a09d4 <HAL_RTC_Time_Is_Valid+0xc>)
 80a09cc:	681b      	ldr	r3, [r3, #0]
 80a09ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a09d0:	9301      	str	r3, [sp, #4]
 80a09d2:	bd08      	pop	{r3, pc}
 80a09d4:	0806019c 	.word	0x0806019c

080a09d8 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 80a09d8:	b508      	push	{r3, lr}
 80a09da:	4b02      	ldr	r3, [pc, #8]	; (80a09e4 <hal_timer_millis+0xc>)
 80a09dc:	681b      	ldr	r3, [r3, #0]
 80a09de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a09e0:	9301      	str	r3, [sp, #4]
 80a09e2:	bd08      	pop	{r3, pc}
 80a09e4:	0806019c 	.word	0x0806019c

080a09e8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a09e8:	b508      	push	{r3, lr}
 80a09ea:	4b02      	ldr	r3, [pc, #8]	; (80a09f4 <HAL_Pin_Map+0xc>)
 80a09ec:	681b      	ldr	r3, [r3, #0]
 80a09ee:	681b      	ldr	r3, [r3, #0]
 80a09f0:	9301      	str	r3, [sp, #4]
 80a09f2:	bd08      	pop	{r3, pc}
 80a09f4:	080601b0 	.word	0x080601b0

080a09f8 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a09f8:	b508      	push	{r3, lr}
 80a09fa:	4b02      	ldr	r3, [pc, #8]	; (80a0a04 <HAL_Validate_Pin_Function+0xc>)
 80a09fc:	681b      	ldr	r3, [r3, #0]
 80a09fe:	685b      	ldr	r3, [r3, #4]
 80a0a00:	9301      	str	r3, [sp, #4]
 80a0a02:	bd08      	pop	{r3, pc}
 80a0a04:	080601b0 	.word	0x080601b0

080a0a08 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 80a0a08:	b508      	push	{r3, lr}
 80a0a0a:	4b02      	ldr	r3, [pc, #8]	; (80a0a14 <HAL_ADC_Read+0xc>)
 80a0a0c:	681b      	ldr	r3, [r3, #0]
 80a0a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0a10:	9301      	str	r3, [sp, #4]
 80a0a12:	bd08      	pop	{r3, pc}
 80a0a14:	080601b0 	.word	0x080601b0

080a0a18 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a0a18:	b508      	push	{r3, lr}
 80a0a1a:	4b02      	ldr	r3, [pc, #8]	; (80a0a24 <HAL_I2C_Write_Data+0xc>)
 80a0a1c:	681b      	ldr	r3, [r3, #0]
 80a0a1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0a20:	9301      	str	r3, [sp, #4]
 80a0a22:	bd08      	pop	{r3, pc}
 80a0a24:	080601ac 	.word	0x080601ac

080a0a28 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a0a28:	b508      	push	{r3, lr}
 80a0a2a:	4b02      	ldr	r3, [pc, #8]	; (80a0a34 <HAL_I2C_Available_Data+0xc>)
 80a0a2c:	681b      	ldr	r3, [r3, #0]
 80a0a2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0a30:	9301      	str	r3, [sp, #4]
 80a0a32:	bd08      	pop	{r3, pc}
 80a0a34:	080601ac 	.word	0x080601ac

080a0a38 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a0a38:	b508      	push	{r3, lr}
 80a0a3a:	4b02      	ldr	r3, [pc, #8]	; (80a0a44 <HAL_I2C_Read_Data+0xc>)
 80a0a3c:	681b      	ldr	r3, [r3, #0]
 80a0a3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0a40:	9301      	str	r3, [sp, #4]
 80a0a42:	bd08      	pop	{r3, pc}
 80a0a44:	080601ac 	.word	0x080601ac

080a0a48 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a0a48:	b508      	push	{r3, lr}
 80a0a4a:	4b02      	ldr	r3, [pc, #8]	; (80a0a54 <HAL_I2C_Peek_Data+0xc>)
 80a0a4c:	681b      	ldr	r3, [r3, #0]
 80a0a4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0a50:	9301      	str	r3, [sp, #4]
 80a0a52:	bd08      	pop	{r3, pc}
 80a0a54:	080601ac 	.word	0x080601ac

080a0a58 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a0a58:	b508      	push	{r3, lr}
 80a0a5a:	4b02      	ldr	r3, [pc, #8]	; (80a0a64 <HAL_I2C_Flush_Data+0xc>)
 80a0a5c:	681b      	ldr	r3, [r3, #0]
 80a0a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0a60:	9301      	str	r3, [sp, #4]
 80a0a62:	bd08      	pop	{r3, pc}
 80a0a64:	080601ac 	.word	0x080601ac

080a0a68 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a0a68:	b508      	push	{r3, lr}
 80a0a6a:	4b02      	ldr	r3, [pc, #8]	; (80a0a74 <HAL_I2C_Is_Enabled+0xc>)
 80a0a6c:	681b      	ldr	r3, [r3, #0]
 80a0a6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0a70:	9301      	str	r3, [sp, #4]
 80a0a72:	bd08      	pop	{r3, pc}
 80a0a74:	080601ac 	.word	0x080601ac

080a0a78 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
 80a0a78:	b508      	push	{r3, lr}
 80a0a7a:	4b03      	ldr	r3, [pc, #12]	; (80a0a88 <HAL_I2C_Init+0x10>)
 80a0a7c:	681b      	ldr	r3, [r3, #0]
 80a0a7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0a82:	9301      	str	r3, [sp, #4]
 80a0a84:	bd08      	pop	{r3, pc}
 80a0a86:	0000      	.short	0x0000
 80a0a88:	080601ac 	.word	0x080601ac

080a0a8c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a0a8c:	b508      	push	{r3, lr}
 80a0a8e:	4b02      	ldr	r3, [pc, #8]	; (80a0a98 <HAL_SPI_Init+0xc>)
 80a0a90:	681b      	ldr	r3, [r3, #0]
 80a0a92:	69db      	ldr	r3, [r3, #28]
 80a0a94:	9301      	str	r3, [sp, #4]
 80a0a96:	bd08      	pop	{r3, pc}
 80a0a98:	080601b4 	.word	0x080601b4

080a0a9c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a0a9c:	b508      	push	{r3, lr}
 80a0a9e:	4b02      	ldr	r3, [pc, #8]	; (80a0aa8 <HAL_SPI_Is_Enabled+0xc>)
 80a0aa0:	681b      	ldr	r3, [r3, #0]
 80a0aa2:	6a1b      	ldr	r3, [r3, #32]
 80a0aa4:	9301      	str	r3, [sp, #4]
 80a0aa6:	bd08      	pop	{r3, pc}
 80a0aa8:	080601b4 	.word	0x080601b4

080a0aac <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0aac:	b508      	push	{r3, lr}
 80a0aae:	4b02      	ldr	r3, [pc, #8]	; (80a0ab8 <HAL_USART_Init+0xc>)
 80a0ab0:	681b      	ldr	r3, [r3, #0]
 80a0ab2:	699b      	ldr	r3, [r3, #24]
 80a0ab4:	9301      	str	r3, [sp, #4]
 80a0ab6:	bd08      	pop	{r3, pc}
 80a0ab8:	080601c4 	.word	0x080601c4

080a0abc <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0abc:	b508      	push	{r3, lr}
 80a0abe:	4b02      	ldr	r3, [pc, #8]	; (80a0ac8 <HAL_USART_Write_Data+0xc>)
 80a0ac0:	681b      	ldr	r3, [r3, #0]
 80a0ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0ac4:	9301      	str	r3, [sp, #4]
 80a0ac6:	bd08      	pop	{r3, pc}
 80a0ac8:	080601c4 	.word	0x080601c4

080a0acc <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0acc:	b508      	push	{r3, lr}
 80a0ace:	4b02      	ldr	r3, [pc, #8]	; (80a0ad8 <HAL_USART_Available_Data+0xc>)
 80a0ad0:	681b      	ldr	r3, [r3, #0]
 80a0ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0ad4:	9301      	str	r3, [sp, #4]
 80a0ad6:	bd08      	pop	{r3, pc}
 80a0ad8:	080601c4 	.word	0x080601c4

080a0adc <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0adc:	b508      	push	{r3, lr}
 80a0ade:	4b02      	ldr	r3, [pc, #8]	; (80a0ae8 <HAL_USART_Read_Data+0xc>)
 80a0ae0:	681b      	ldr	r3, [r3, #0]
 80a0ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0ae4:	9301      	str	r3, [sp, #4]
 80a0ae6:	bd08      	pop	{r3, pc}
 80a0ae8:	080601c4 	.word	0x080601c4

080a0aec <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0aec:	b508      	push	{r3, lr}
 80a0aee:	4b02      	ldr	r3, [pc, #8]	; (80a0af8 <HAL_USART_Peek_Data+0xc>)
 80a0af0:	681b      	ldr	r3, [r3, #0]
 80a0af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0af4:	9301      	str	r3, [sp, #4]
 80a0af6:	bd08      	pop	{r3, pc}
 80a0af8:	080601c4 	.word	0x080601c4

080a0afc <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0afc:	b508      	push	{r3, lr}
 80a0afe:	4b02      	ldr	r3, [pc, #8]	; (80a0b08 <HAL_USART_Flush_Data+0xc>)
 80a0b00:	681b      	ldr	r3, [r3, #0]
 80a0b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0b04:	9301      	str	r3, [sp, #4]
 80a0b06:	bd08      	pop	{r3, pc}
 80a0b08:	080601c4 	.word	0x080601c4

080a0b0c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a0b0c:	b508      	push	{r3, lr}
 80a0b0e:	4b02      	ldr	r3, [pc, #8]	; (80a0b18 <HAL_USART_Is_Enabled+0xc>)
 80a0b10:	681b      	ldr	r3, [r3, #0]
 80a0b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0b14:	9301      	str	r3, [sp, #4]
 80a0b16:	bd08      	pop	{r3, pc}
 80a0b18:	080601c4 	.word	0x080601c4

080a0b1c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0b1c:	b508      	push	{r3, lr}
 80a0b1e:	4b02      	ldr	r3, [pc, #8]	; (80a0b28 <HAL_USART_Available_Data_For_Write+0xc>)
 80a0b20:	681b      	ldr	r3, [r3, #0]
 80a0b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0b24:	9301      	str	r3, [sp, #4]
 80a0b26:	bd08      	pop	{r3, pc}
 80a0b28:	080601c4 	.word	0x080601c4

080a0b2c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0b2c:	b508      	push	{r3, lr}
 80a0b2e:	4b02      	ldr	r3, [pc, #8]	; (80a0b38 <HAL_USB_USART_Init+0xc>)
 80a0b30:	681b      	ldr	r3, [r3, #0]
 80a0b32:	681b      	ldr	r3, [r3, #0]
 80a0b34:	9301      	str	r3, [sp, #4]
 80a0b36:	bd08      	pop	{r3, pc}
 80a0b38:	080601d8 	.word	0x080601d8

080a0b3c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0b3c:	b508      	push	{r3, lr}
 80a0b3e:	4b02      	ldr	r3, [pc, #8]	; (80a0b48 <HAL_USB_USART_Begin+0xc>)
 80a0b40:	681b      	ldr	r3, [r3, #0]
 80a0b42:	685b      	ldr	r3, [r3, #4]
 80a0b44:	9301      	str	r3, [sp, #4]
 80a0b46:	bd08      	pop	{r3, pc}
 80a0b48:	080601d8 	.word	0x080601d8

080a0b4c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0b4c:	b508      	push	{r3, lr}
 80a0b4e:	4b02      	ldr	r3, [pc, #8]	; (80a0b58 <HAL_USB_USART_Available_Data+0xc>)
 80a0b50:	681b      	ldr	r3, [r3, #0]
 80a0b52:	691b      	ldr	r3, [r3, #16]
 80a0b54:	9301      	str	r3, [sp, #4]
 80a0b56:	bd08      	pop	{r3, pc}
 80a0b58:	080601d8 	.word	0x080601d8

080a0b5c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0b5c:	b508      	push	{r3, lr}
 80a0b5e:	4b02      	ldr	r3, [pc, #8]	; (80a0b68 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0b60:	681b      	ldr	r3, [r3, #0]
 80a0b62:	695b      	ldr	r3, [r3, #20]
 80a0b64:	9301      	str	r3, [sp, #4]
 80a0b66:	bd08      	pop	{r3, pc}
 80a0b68:	080601d8 	.word	0x080601d8

080a0b6c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0b6c:	b508      	push	{r3, lr}
 80a0b6e:	4b02      	ldr	r3, [pc, #8]	; (80a0b78 <HAL_USB_USART_Receive_Data+0xc>)
 80a0b70:	681b      	ldr	r3, [r3, #0]
 80a0b72:	699b      	ldr	r3, [r3, #24]
 80a0b74:	9301      	str	r3, [sp, #4]
 80a0b76:	bd08      	pop	{r3, pc}
 80a0b78:	080601d8 	.word	0x080601d8

080a0b7c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0b7c:	b508      	push	{r3, lr}
 80a0b7e:	4b02      	ldr	r3, [pc, #8]	; (80a0b88 <HAL_USB_USART_Send_Data+0xc>)
 80a0b80:	681b      	ldr	r3, [r3, #0]
 80a0b82:	69db      	ldr	r3, [r3, #28]
 80a0b84:	9301      	str	r3, [sp, #4]
 80a0b86:	bd08      	pop	{r3, pc}
 80a0b88:	080601d8 	.word	0x080601d8

080a0b8c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0b8c:	b508      	push	{r3, lr}
 80a0b8e:	4b02      	ldr	r3, [pc, #8]	; (80a0b98 <HAL_USB_USART_Flush_Data+0xc>)
 80a0b90:	681b      	ldr	r3, [r3, #0]
 80a0b92:	6a1b      	ldr	r3, [r3, #32]
 80a0b94:	9301      	str	r3, [sp, #4]
 80a0b96:	bd08      	pop	{r3, pc}
 80a0b98:	080601d8 	.word	0x080601d8

080a0b9c <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0b9c:	b508      	push	{r3, lr}
 80a0b9e:	4b02      	ldr	r3, [pc, #8]	; (80a0ba8 <inet_gethostbyname+0xc>)
 80a0ba0:	681b      	ldr	r3, [r3, #0]
 80a0ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0ba4:	9301      	str	r3, [sp, #4]
 80a0ba6:	bd08      	pop	{r3, pc}
 80a0ba8:	080601c0 	.word	0x080601c0

080a0bac <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a0bac:	b508      	push	{r3, lr}
 80a0bae:	4b02      	ldr	r3, [pc, #8]	; (80a0bb8 <system_mode+0xc>)
 80a0bb0:	681b      	ldr	r3, [r3, #0]
 80a0bb2:	681b      	ldr	r3, [r3, #0]
 80a0bb4:	9301      	str	r3, [sp, #4]
 80a0bb6:	bd08      	pop	{r3, pc}
 80a0bb8:	080601a4 	.word	0x080601a4

080a0bbc <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0bbc:	b508      	push	{r3, lr}
 80a0bbe:	4b02      	ldr	r3, [pc, #8]	; (80a0bc8 <set_system_mode+0xc>)
 80a0bc0:	681b      	ldr	r3, [r3, #0]
 80a0bc2:	685b      	ldr	r3, [r3, #4]
 80a0bc4:	9301      	str	r3, [sp, #4]
 80a0bc6:	bd08      	pop	{r3, pc}
 80a0bc8:	080601a4 	.word	0x080601a4

080a0bcc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0bcc:	b508      	push	{r3, lr}
 80a0bce:	4b02      	ldr	r3, [pc, #8]	; (80a0bd8 <system_delay_ms+0xc>)
 80a0bd0:	681b      	ldr	r3, [r3, #0]
 80a0bd2:	695b      	ldr	r3, [r3, #20]
 80a0bd4:	9301      	str	r3, [sp, #4]
 80a0bd6:	bd08      	pop	{r3, pc}
 80a0bd8:	080601a4 	.word	0x080601a4

080a0bdc <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a0bdc:	b508      	push	{r3, lr}
 80a0bde:	4b02      	ldr	r3, [pc, #8]	; (80a0be8 <system_thread_set_state+0xc>)
 80a0be0:	681b      	ldr	r3, [r3, #0]
 80a0be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0be4:	9301      	str	r3, [sp, #4]
 80a0be6:	bd08      	pop	{r3, pc}
 80a0be8:	080601a4 	.word	0x080601a4

080a0bec <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a0bec:	b508      	push	{r3, lr}
 80a0bee:	4b02      	ldr	r3, [pc, #8]	; (80a0bf8 <application_thread_current+0xc>)
 80a0bf0:	681b      	ldr	r3, [r3, #0]
 80a0bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0bf4:	9301      	str	r3, [sp, #4]
 80a0bf6:	bd08      	pop	{r3, pc}
 80a0bf8:	080601a4 	.word	0x080601a4

080a0bfc <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a0bfc:	b508      	push	{r3, lr}
 80a0bfe:	4b02      	ldr	r3, [pc, #8]	; (80a0c08 <application_thread_invoke+0xc>)
 80a0c00:	681b      	ldr	r3, [r3, #0]
 80a0c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0c04:	9301      	str	r3, [sp, #4]
 80a0c06:	bd08      	pop	{r3, pc}
 80a0c08:	080601a4 	.word	0x080601a4

080a0c0c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a0c0c:	b508      	push	{r3, lr}
 80a0c0e:	4b02      	ldr	r3, [pc, #8]	; (80a0c18 <system_thread_get_state+0xc>)
 80a0c10:	681b      	ldr	r3, [r3, #0]
 80a0c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0c14:	9301      	str	r3, [sp, #4]
 80a0c16:	bd08      	pop	{r3, pc}
 80a0c18:	080601a4 	.word	0x080601a4

080a0c1c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0c1c:	b508      	push	{r3, lr}
 80a0c1e:	4b03      	ldr	r3, [pc, #12]	; (80a0c2c <system_ctrl_set_app_request_handler+0x10>)
 80a0c20:	681b      	ldr	r3, [r3, #0]
 80a0c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0c26:	9301      	str	r3, [sp, #4]
 80a0c28:	bd08      	pop	{r3, pc}
 80a0c2a:	0000      	.short	0x0000
 80a0c2c:	080601a4 	.word	0x080601a4

080a0c30 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0c30:	b508      	push	{r3, lr}
 80a0c32:	4b03      	ldr	r3, [pc, #12]	; (80a0c40 <system_ctrl_set_result+0x10>)
 80a0c34:	681b      	ldr	r3, [r3, #0]
 80a0c36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0c3a:	9301      	str	r3, [sp, #4]
 80a0c3c:	bd08      	pop	{r3, pc}
 80a0c3e:	0000      	.short	0x0000
 80a0c40:	080601a4 	.word	0x080601a4

080a0c44 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a0c44:	b508      	push	{r3, lr}
 80a0c46:	4b02      	ldr	r3, [pc, #8]	; (80a0c50 <spark_function+0xc>)
 80a0c48:	681b      	ldr	r3, [r3, #0]
 80a0c4a:	685b      	ldr	r3, [r3, #4]
 80a0c4c:	9301      	str	r3, [sp, #4]
 80a0c4e:	bd08      	pop	{r3, pc}
 80a0c50:	080601cc 	.word	0x080601cc

080a0c54 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a0c54:	b508      	push	{r3, lr}
 80a0c56:	4b02      	ldr	r3, [pc, #8]	; (80a0c60 <spark_process+0xc>)
 80a0c58:	681b      	ldr	r3, [r3, #0]
 80a0c5a:	689b      	ldr	r3, [r3, #8]
 80a0c5c:	9301      	str	r3, [sp, #4]
 80a0c5e:	bd08      	pop	{r3, pc}
 80a0c60:	080601cc 	.word	0x080601cc

080a0c64 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 80a0c64:	b508      	push	{r3, lr}
 80a0c66:	4b02      	ldr	r3, [pc, #8]	; (80a0c70 <spark_cloud_flag_connect+0xc>)
 80a0c68:	681b      	ldr	r3, [r3, #0]
 80a0c6a:	68db      	ldr	r3, [r3, #12]
 80a0c6c:	9301      	str	r3, [sp, #4]
 80a0c6e:	bd08      	pop	{r3, pc}
 80a0c70:	080601cc 	.word	0x080601cc

080a0c74 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a0c74:	b508      	push	{r3, lr}
 80a0c76:	4b02      	ldr	r3, [pc, #8]	; (80a0c80 <spark_cloud_flag_connected+0xc>)
 80a0c78:	681b      	ldr	r3, [r3, #0]
 80a0c7a:	695b      	ldr	r3, [r3, #20]
 80a0c7c:	9301      	str	r3, [sp, #4]
 80a0c7e:	bd08      	pop	{r3, pc}
 80a0c80:	080601cc 	.word	0x080601cc

080a0c84 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 80a0c84:	b508      	push	{r3, lr}
 80a0c86:	4b02      	ldr	r3, [pc, #8]	; (80a0c90 <spark_deviceID+0xc>)
 80a0c88:	681b      	ldr	r3, [r3, #0]
 80a0c8a:	69db      	ldr	r3, [r3, #28]
 80a0c8c:	9301      	str	r3, [sp, #4]
 80a0c8e:	bd08      	pop	{r3, pc}
 80a0c90:	080601cc 	.word	0x080601cc

080a0c94 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a0c94:	b508      	push	{r3, lr}
 80a0c96:	4b02      	ldr	r3, [pc, #8]	; (80a0ca0 <spark_send_event+0xc>)
 80a0c98:	681b      	ldr	r3, [r3, #0]
 80a0c9a:	6a1b      	ldr	r3, [r3, #32]
 80a0c9c:	9301      	str	r3, [sp, #4]
 80a0c9e:	bd08      	pop	{r3, pc}
 80a0ca0:	080601cc 	.word	0x080601cc

080a0ca4 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 80a0ca4:	b508      	push	{r3, lr}
 80a0ca6:	4b02      	ldr	r3, [pc, #8]	; (80a0cb0 <spark_subscribe+0xc>)
 80a0ca8:	681b      	ldr	r3, [r3, #0]
 80a0caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0cac:	9301      	str	r3, [sp, #4]
 80a0cae:	bd08      	pop	{r3, pc}
 80a0cb0:	080601cc 	.word	0x080601cc

080a0cb4 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
 80a0cb4:	b508      	push	{r3, lr}
 80a0cb6:	4b02      	ldr	r3, [pc, #8]	; (80a0cc0 <spark_sync_time+0xc>)
 80a0cb8:	681b      	ldr	r3, [r3, #0]
 80a0cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0cbc:	9301      	str	r3, [sp, #4]
 80a0cbe:	bd08      	pop	{r3, pc}
 80a0cc0:	080601cc 	.word	0x080601cc

080a0cc4 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a0cc4:	b508      	push	{r3, lr}
 80a0cc6:	4b02      	ldr	r3, [pc, #8]	; (80a0cd0 <spark_sync_time_pending+0xc>)
 80a0cc8:	681b      	ldr	r3, [r3, #0]
 80a0cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0ccc:	9301      	str	r3, [sp, #4]
 80a0cce:	bd08      	pop	{r3, pc}
 80a0cd0:	080601cc 	.word	0x080601cc

080a0cd4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0cd4:	b508      	push	{r3, lr}
 80a0cd6:	4b02      	ldr	r3, [pc, #8]	; (80a0ce0 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0cd8:	681b      	ldr	r3, [r3, #0]
 80a0cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0cdc:	9301      	str	r3, [sp, #4]
 80a0cde:	bd08      	pop	{r3, pc}
 80a0ce0:	080601cc 	.word	0x080601cc

080a0ce4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0ce4:	b508      	push	{r3, lr}
 80a0ce6:	4b02      	ldr	r3, [pc, #8]	; (80a0cf0 <network_connect+0xc>)
 80a0ce8:	681b      	ldr	r3, [r3, #0]
 80a0cea:	685b      	ldr	r3, [r3, #4]
 80a0cec:	9301      	str	r3, [sp, #4]
 80a0cee:	bd08      	pop	{r3, pc}
 80a0cf0:	080601c8 	.word	0x080601c8

080a0cf4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0cf4:	b508      	push	{r3, lr}
 80a0cf6:	4b02      	ldr	r3, [pc, #8]	; (80a0d00 <network_connecting+0xc>)
 80a0cf8:	681b      	ldr	r3, [r3, #0]
 80a0cfa:	689b      	ldr	r3, [r3, #8]
 80a0cfc:	9301      	str	r3, [sp, #4]
 80a0cfe:	bd08      	pop	{r3, pc}
 80a0d00:	080601c8 	.word	0x080601c8

080a0d04 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0d04:	b508      	push	{r3, lr}
 80a0d06:	4b02      	ldr	r3, [pc, #8]	; (80a0d10 <network_disconnect+0xc>)
 80a0d08:	681b      	ldr	r3, [r3, #0]
 80a0d0a:	68db      	ldr	r3, [r3, #12]
 80a0d0c:	9301      	str	r3, [sp, #4]
 80a0d0e:	bd08      	pop	{r3, pc}
 80a0d10:	080601c8 	.word	0x080601c8

080a0d14 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0d14:	b508      	push	{r3, lr}
 80a0d16:	4b02      	ldr	r3, [pc, #8]	; (80a0d20 <network_ready+0xc>)
 80a0d18:	681b      	ldr	r3, [r3, #0]
 80a0d1a:	691b      	ldr	r3, [r3, #16]
 80a0d1c:	9301      	str	r3, [sp, #4]
 80a0d1e:	bd08      	pop	{r3, pc}
 80a0d20:	080601c8 	.word	0x080601c8

080a0d24 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0d24:	b508      	push	{r3, lr}
 80a0d26:	4b02      	ldr	r3, [pc, #8]	; (80a0d30 <network_on+0xc>)
 80a0d28:	681b      	ldr	r3, [r3, #0]
 80a0d2a:	695b      	ldr	r3, [r3, #20]
 80a0d2c:	9301      	str	r3, [sp, #4]
 80a0d2e:	bd08      	pop	{r3, pc}
 80a0d30:	080601c8 	.word	0x080601c8

080a0d34 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0d34:	b508      	push	{r3, lr}
 80a0d36:	4b02      	ldr	r3, [pc, #8]	; (80a0d40 <network_off+0xc>)
 80a0d38:	681b      	ldr	r3, [r3, #0]
 80a0d3a:	699b      	ldr	r3, [r3, #24]
 80a0d3c:	9301      	str	r3, [sp, #4]
 80a0d3e:	bd08      	pop	{r3, pc}
 80a0d40:	080601c8 	.word	0x080601c8

080a0d44 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0d44:	b508      	push	{r3, lr}
 80a0d46:	4b02      	ldr	r3, [pc, #8]	; (80a0d50 <network_listen+0xc>)
 80a0d48:	681b      	ldr	r3, [r3, #0]
 80a0d4a:	69db      	ldr	r3, [r3, #28]
 80a0d4c:	9301      	str	r3, [sp, #4]
 80a0d4e:	bd08      	pop	{r3, pc}
 80a0d50:	080601c8 	.word	0x080601c8

080a0d54 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0d54:	b508      	push	{r3, lr}
 80a0d56:	4b02      	ldr	r3, [pc, #8]	; (80a0d60 <network_listening+0xc>)
 80a0d58:	681b      	ldr	r3, [r3, #0]
 80a0d5a:	6a1b      	ldr	r3, [r3, #32]
 80a0d5c:	9301      	str	r3, [sp, #4]
 80a0d5e:	bd08      	pop	{r3, pc}
 80a0d60:	080601c8 	.word	0x080601c8

080a0d64 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0d64:	b508      	push	{r3, lr}
 80a0d66:	4b02      	ldr	r3, [pc, #8]	; (80a0d70 <network_set_listen_timeout+0xc>)
 80a0d68:	681b      	ldr	r3, [r3, #0]
 80a0d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0d6c:	9301      	str	r3, [sp, #4]
 80a0d6e:	bd08      	pop	{r3, pc}
 80a0d70:	080601c8 	.word	0x080601c8

080a0d74 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0d74:	b508      	push	{r3, lr}
 80a0d76:	4b02      	ldr	r3, [pc, #8]	; (80a0d80 <network_get_listen_timeout+0xc>)
 80a0d78:	681b      	ldr	r3, [r3, #0]
 80a0d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0d7c:	9301      	str	r3, [sp, #4]
 80a0d7e:	bd08      	pop	{r3, pc}
 80a0d80:	080601c8 	.word	0x080601c8

080a0d84 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0d84:	b508      	push	{r3, lr}
 80a0d86:	4b02      	ldr	r3, [pc, #8]	; (80a0d90 <malloc+0xc>)
 80a0d88:	681b      	ldr	r3, [r3, #0]
 80a0d8a:	681b      	ldr	r3, [r3, #0]
 80a0d8c:	9301      	str	r3, [sp, #4]
 80a0d8e:	bd08      	pop	{r3, pc}
 80a0d90:	080601a0 	.word	0x080601a0

080a0d94 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0d94:	b508      	push	{r3, lr}
 80a0d96:	4b02      	ldr	r3, [pc, #8]	; (80a0da0 <free+0xc>)
 80a0d98:	681b      	ldr	r3, [r3, #0]
 80a0d9a:	685b      	ldr	r3, [r3, #4]
 80a0d9c:	9301      	str	r3, [sp, #4]
 80a0d9e:	bd08      	pop	{r3, pc}
 80a0da0:	080601a0 	.word	0x080601a0

080a0da4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a0da4:	b508      	push	{r3, lr}
 80a0da6:	4b02      	ldr	r3, [pc, #8]	; (80a0db0 <realloc+0xc>)
 80a0da8:	681b      	ldr	r3, [r3, #0]
 80a0daa:	689b      	ldr	r3, [r3, #8]
 80a0dac:	9301      	str	r3, [sp, #4]
 80a0dae:	bd08      	pop	{r3, pc}
 80a0db0:	080601a0 	.word	0x080601a0

080a0db4 <siscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80a0db4:	b508      	push	{r3, lr}
 80a0db6:	4b02      	ldr	r3, [pc, #8]	; (80a0dc0 <siscanf+0xc>)
 80a0db8:	681b      	ldr	r3, [r3, #0]
 80a0dba:	699b      	ldr	r3, [r3, #24]
 80a0dbc:	9301      	str	r3, [sp, #4]
 80a0dbe:	bd08      	pop	{r3, pc}
 80a0dc0:	080601a0 	.word	0x080601a0

080a0dc4 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80a0dc4:	b508      	push	{r3, lr}
 80a0dc6:	4b02      	ldr	r3, [pc, #8]	; (80a0dd0 <snprintf+0xc>)
 80a0dc8:	681b      	ldr	r3, [r3, #0]
 80a0dca:	69db      	ldr	r3, [r3, #28]
 80a0dcc:	9301      	str	r3, [sp, #4]
 80a0dce:	bd08      	pop	{r3, pc}
 80a0dd0:	080601a0 	.word	0x080601a0

080a0dd4 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a0dd4:	b508      	push	{r3, lr}
 80a0dd6:	4b02      	ldr	r3, [pc, #8]	; (80a0de0 <abort+0xc>)
 80a0dd8:	681b      	ldr	r3, [r3, #0]
 80a0dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0ddc:	9301      	str	r3, [sp, #4]
 80a0dde:	bd08      	pop	{r3, pc}
 80a0de0:	080601a0 	.word	0x080601a0

080a0de4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a0de4:	b508      	push	{r3, lr}
 80a0de6:	4b02      	ldr	r3, [pc, #8]	; (80a0df0 <_malloc_r+0xc>)
 80a0de8:	681b      	ldr	r3, [r3, #0]
 80a0dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0dec:	9301      	str	r3, [sp, #4]
 80a0dee:	bd08      	pop	{r3, pc}
 80a0df0:	080601a0 	.word	0x080601a0

080a0df4 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 80a0df4:	b508      	push	{r3, lr}
 80a0df6:	4b02      	ldr	r3, [pc, #8]	; (80a0e00 <__errno+0xc>)
 80a0df8:	681b      	ldr	r3, [r3, #0]
 80a0dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0dfc:	9301      	str	r3, [sp, #4]
 80a0dfe:	bd08      	pop	{r3, pc}
 80a0e00:	080601a0 	.word	0x080601a0

080a0e04 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0e04:	2100      	movs	r1, #0
 80a0e06:	f7ff bee1 	b.w	80a0bcc <system_delay_ms>

080a0e0a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a0e0a:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0e0c:	6883      	ldr	r3, [r0, #8]
 80a0e0e:	4604      	mov	r4, r0
 80a0e10:	b90b      	cbnz	r3, 80a0e16 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a0e12:	f001 f96a 	bl	80a20ea <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0e16:	68c3      	ldr	r3, [r0, #12]
 80a0e18:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a0e1a:	68a3      	ldr	r3, [r4, #8]
 80a0e1c:	b11b      	cbz	r3, 80a0e26 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0e1e:	2203      	movs	r2, #3
 80a0e20:	4621      	mov	r1, r4
 80a0e22:	4620      	mov	r0, r4
 80a0e24:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a0e26:	4620      	mov	r0, r4
}
 80a0e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a0e2c:	2110      	movs	r1, #16
 80a0e2e:	f001 b940 	b.w	80a20b2 <_ZdlPvj>

080a0e32 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a0e32:	4770      	bx	lr

080a0e34 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a0e34:	2000      	movs	r0, #0
 80a0e36:	4770      	bx	lr

080a0e38 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a0e38:	b510      	push	{r4, lr}
 80a0e3a:	4604      	mov	r4, r0
 80a0e3c:	2110      	movs	r1, #16
 80a0e3e:	f001 f938 	bl	80a20b2 <_ZdlPvj>
 80a0e42:	4620      	mov	r0, r4
 80a0e44:	bd10      	pop	{r4, pc}

080a0e46 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a0e46:	b508      	push	{r3, lr}
      { delete this; }
 80a0e48:	b108      	cbz	r0, 80a0e4e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a0e4a:	f7ff fff5 	bl	80a0e38 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a0e4e:	bd08      	pop	{r3, pc}

080a0e50 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0e50:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0e52:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0e54:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a0e56:	b113      	cbz	r3, 80a0e5e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0e58:	2203      	movs	r2, #3
 80a0e5a:	4601      	mov	r1, r0
 80a0e5c:	4798      	blx	r3
    }
 80a0e5e:	4620      	mov	r0, r4
 80a0e60:	bd10      	pop	{r4, pc}

080a0e62 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a0e62:	2200      	movs	r2, #0
 80a0e64:	6002      	str	r2, [r0, #0]
 80a0e66:	f64f 729c 	movw	r2, #65436	; 0xff9c
 80a0e6a:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a0e6c:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0e6e:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80a0e72:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0e74:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0e76:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a0e78:	680c      	ldr	r4, [r1, #0]
 80a0e7a:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0e7c:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a0e7e:	bd10      	pop	{r4, pc}

080a0e80 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a0e80:	b510      	push	{r4, lr}
 80a0e82:	4604      	mov	r4, r0
    free((void*)msg_);
 80a0e84:	6800      	ldr	r0, [r0, #0]
 80a0e86:	f7ff ff85 	bl	80a0d94 <free>
}
 80a0e8a:	4620      	mov	r0, r4
 80a0e8c:	bd10      	pop	{r4, pc}

080a0e8e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a0e8e:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a0e90:	68c4      	ldr	r4, [r0, #12]
 80a0e92:	b1f4      	cbz	r4, 80a0ed2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a0e94:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a0e96:	2b02      	cmp	r3, #2
 80a0e98:	d103      	bne.n	80a0ea2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a0e9a:	f104 000c 	add.w	r0, r4, #12
 80a0e9e:	f7ff ffef 	bl	80a0e80 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a0ea2:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a0ea4:	b135      	cbz	r5, 80a0eb4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0ea6:	4628      	mov	r0, r5
 80a0ea8:	f7ff ffd2 	bl	80a0e50 <_ZNSt14_Function_baseD1Ev>
 80a0eac:	2110      	movs	r1, #16
 80a0eae:	4628      	mov	r0, r5
 80a0eb0:	f001 f8ff 	bl	80a20b2 <_ZdlPvj>
 80a0eb4:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a0eb6:	b135      	cbz	r5, 80a0ec6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a0eb8:	4628      	mov	r0, r5
 80a0eba:	f7ff ffc9 	bl	80a0e50 <_ZNSt14_Function_baseD1Ev>
 80a0ebe:	2110      	movs	r1, #16
 80a0ec0:	4628      	mov	r0, r5
 80a0ec2:	f001 f8f6 	bl	80a20b2 <_ZdlPvj>
 80a0ec6:	4620      	mov	r0, r4
 80a0ec8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a0ecc:	2114      	movs	r1, #20
 80a0ece:	f001 b8f0 	b.w	80a20b2 <_ZdlPvj>
 80a0ed2:	bd38      	pop	{r3, r4, r5, pc}

080a0ed4 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a0ed4:	b510      	push	{r4, lr}
 80a0ed6:	b088      	sub	sp, #32
 80a0ed8:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a0eda:	4668      	mov	r0, sp
 80a0edc:	f000 fcd8 	bl	80a1890 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 80a0ee0:	4669      	mov	r1, sp
 80a0ee2:	a804      	add	r0, sp, #16
 80a0ee4:	f000 fcf6 	bl	80a18d4 <_ZN6StringC1ERKS_>
 80a0ee8:	a804      	add	r0, sp, #16
 80a0eea:	47a0      	blx	r4
 80a0eec:	4604      	mov	r4, r0
 80a0eee:	a804      	add	r0, sp, #16
 80a0ef0:	f000 fc87 	bl	80a1802 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a0ef4:	4668      	mov	r0, sp
 80a0ef6:	f000 fc84 	bl	80a1802 <_ZN6StringD1Ev>
    return (*fn)(p);
}
 80a0efa:	4620      	mov	r0, r4
 80a0efc:	b008      	add	sp, #32
 80a0efe:	bd10      	pop	{r4, pc}

080a0f00 <_ZN10CloudClass22call_std_user_functionEPvPKcS0_>:

int CloudClass::call_std_user_function(void* data, const char* param, void* reserved)
{
 80a0f00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a0f02:	4604      	mov	r4, r0
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
 80a0f04:	4668      	mov	r0, sp
 80a0f06:	f000 fcc3 	bl	80a1890 <_ZN6StringC1EPK19__FlashStringHelper>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0f0a:	68a3      	ldr	r3, [r4, #8]
 80a0f0c:	b90b      	cbnz	r3, 80a0f12 <_ZN10CloudClass22call_std_user_functionEPvPKcS0_+0x12>
	__throw_bad_function_call();
 80a0f0e:	f001 f8ec 	bl	80a20ea <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0f12:	68e3      	ldr	r3, [r4, #12]
 80a0f14:	4669      	mov	r1, sp
 80a0f16:	4620      	mov	r0, r4
 80a0f18:	4798      	blx	r3
 80a0f1a:	4604      	mov	r4, r0
 80a0f1c:	4668      	mov	r0, sp
 80a0f1e:	f000 fc70 	bl	80a1802 <_ZN6StringD1Ev>
}
 80a0f22:	4620      	mov	r0, r4
 80a0f24:	b004      	add	sp, #16
 80a0f26:	bd10      	pop	{r4, pc}

080a0f28 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a0f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0f2a:	4607      	mov	r7, r0
 80a0f2c:	460e      	mov	r6, r1
 80a0f2e:	4615      	mov	r5, r2
 80a0f30:	b085      	sub	sp, #20
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 80a0f32:	2410      	movs	r4, #16
 80a0f34:	4622      	mov	r2, r4
 80a0f36:	2100      	movs	r1, #0
 80a0f38:	4668      	mov	r0, sp
 80a0f3a:	f002 f8e8 	bl	80a310e <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a0f3e:	2200      	movs	r2, #0
 80a0f40:	4669      	mov	r1, sp
 80a0f42:	4610      	mov	r0, r2
         size = sizeof(*this);
 80a0f44:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
 80a0f48:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 80a0f4a:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 80a0f4c:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a0f4e:	f7ff fe79 	bl	80a0c44 <spark_function>
}
 80a0f52:	b005      	add	sp, #20
 80a0f54:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0f56 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a0f56:	b513      	push	{r0, r1, r4, lr}
 80a0f58:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a0f5a:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a0f5e:	2300      	movs	r3, #0
 80a0f60:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a0f62:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a0f64:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a0f66:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0f68:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a0f6a:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a0f6c:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0f6e:	f7ff f942 	bl	80a01f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0f72:	4620      	mov	r0, r4
 80a0f74:	b002      	add	sp, #8
 80a0f76:	bd10      	pop	{r4, pc}

080a0f78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a0f78:	680b      	ldr	r3, [r1, #0]
 80a0f7a:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a0f7c:	b113      	cbz	r3, 80a0f84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a0f7e:	685a      	ldr	r2, [r3, #4]
 80a0f80:	3201      	adds	r2, #1
 80a0f82:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a0f84:	4770      	bx	lr

080a0f86 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a0f86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0f88:	460c      	mov	r4, r1
 80a0f8a:	4606      	mov	r6, r0
 80a0f8c:	460f      	mov	r7, r1
 80a0f8e:	f854 3b04 	ldr.w	r3, [r4], #4
 80a0f92:	ad02      	add	r5, sp, #8
 80a0f94:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a0f98:	4621      	mov	r1, r4
 80a0f9a:	a801      	add	r0, sp, #4
 80a0f9c:	f7ff ffec 	bl	80a0f78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a0fa0:	4629      	mov	r1, r5
 80a0fa2:	4630      	mov	r0, r6
 80a0fa4:	f7ff ffd7 	bl	80a0f56 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0fa8:	a801      	add	r0, sp, #4
 80a0faa:	f7ff f924 	bl	80a01f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0fae:	4620      	mov	r0, r4
 80a0fb0:	f7ff f921 	bl	80a01f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a0fb4:	4638      	mov	r0, r7
 80a0fb6:	2108      	movs	r1, #8
 80a0fb8:	f001 f87b 	bl	80a20b2 <_ZdlPvj>
        return p;
    }
 80a0fbc:	4630      	mov	r0, r6
 80a0fbe:	b003      	add	sp, #12
 80a0fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0fc2 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a0fc2:	b513      	push	{r0, r1, r4, lr}
 80a0fc4:	460b      	mov	r3, r1
 80a0fc6:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0fc8:	c803      	ldmia	r0, {r0, r1}
 80a0fca:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a0fce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a0fd2:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a0fd6:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a0fda:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a0fde:	b002      	add	sp, #8
 80a0fe0:	bd10      	pop	{r4, pc}
	...

080a0fe4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a0fe4:	b538      	push	{r3, r4, r5, lr}
 80a0fe6:	2300      	movs	r3, #0
 80a0fe8:	4604      	mov	r4, r0
 80a0fea:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0fec:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a0fee:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0ff0:	f7ff f855 	bl	80a009e <_Znwj>
 80a0ff4:	b128      	cbz	r0, 80a1002 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a0ff6:	2301      	movs	r3, #1
 80a0ff8:	6043      	str	r3, [r0, #4]
 80a0ffa:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a0ffc:	4b02      	ldr	r3, [pc, #8]	; (80a1008 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a0ffe:	60c5      	str	r5, [r0, #12]
 80a1000:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1002:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 80a1004:	4620      	mov	r0, r4
 80a1006:	bd38      	pop	{r3, r4, r5, pc}
 80a1008:	080a3c3c 	.word	0x080a3c3c

080a100c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a100c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a100e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1010:	b90a      	cbnz	r2, 80a1016 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a1012:	f001 f86a 	bl	80a20ea <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1016:	68c3      	ldr	r3, [r0, #12]
    }
 80a1018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a101c:	4718      	bx	r3

080a101e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a101e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1020:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a1022:	f100 0110 	add.w	r1, r0, #16
 80a1026:	f7ff fff1 	bl	80a100c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a102a:	bd08      	pop	{r3, pc}

080a102c <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a102c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a102e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1030:	b90a      	cbnz	r2, 80a1036 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a1032:	f001 f85a 	bl	80a20ea <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1036:	68c3      	ldr	r3, [r0, #12]
    }
 80a1038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a103c:	4718      	bx	r3

080a103e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a103e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1040:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a1042:	f100 0110 	add.w	r1, r0, #16
 80a1046:	f7ff fff1 	bl	80a102c <_ZNKSt8functionIFvRKbEEclES1_>
 80a104a:	bd08      	pop	{r3, pc}

080a104c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a104c:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a104e:	2300      	movs	r3, #0
 80a1050:	6083      	str	r3, [r0, #8]
 80a1052:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1054:	4604      	mov	r4, r0
 80a1056:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a1058:	b12b      	cbz	r3, 80a1066 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a105a:	2202      	movs	r2, #2
 80a105c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a105e:	68eb      	ldr	r3, [r5, #12]
 80a1060:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1062:	68ab      	ldr	r3, [r5, #8]
 80a1064:	60a3      	str	r3, [r4, #8]
	}
    }
 80a1066:	4620      	mov	r0, r4
 80a1068:	bd38      	pop	{r3, r4, r5, pc}
	...

080a106c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a106c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a106e:	b089      	sub	sp, #36	; 0x24
 80a1070:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a1072:	4668      	mov	r0, sp
 80a1074:	f7ff fef5 	bl	80a0e62 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a1078:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a107c:	2300      	movs	r3, #0
 80a107e:	f88d 3008 	strb.w	r3, [sp, #8]
 80a1082:	e8d4 3f4f 	ldrexb	r3, [r4]
 80a1086:	2b00      	cmp	r3, #0
 80a1088:	d103      	bne.n	80a1092 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 80a108a:	e8c4 2f41 	strexb	r1, r2, [r4]
 80a108e:	2900      	cmp	r1, #0
 80a1090:	d1f7      	bne.n	80a1082 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 80a1092:	d002      	beq.n	80a109a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 80a1094:	f88d 3008 	strb.w	r3, [sp, #8]
 80a1098:	e063      	b.n	80a1162 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a109a:	f114 050c 	adds.w	r5, r4, #12
 80a109e:	d003      	beq.n	80a10a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 80a10a0:	4669      	mov	r1, sp
 80a10a2:	4628      	mov	r0, r5
 80a10a4:	f7ff fedd 	bl	80a0e62 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a10a8:	f3bf 8f5f 	dmb	sy
 80a10ac:	2301      	movs	r3, #1
 80a10ae:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a10b0:	f3bf 8f5f 	dmb	sy
 80a10b4:	f104 0308 	add.w	r3, r4, #8
 80a10b8:	2000      	movs	r0, #0
 80a10ba:	e853 6f00 	ldrex	r6, [r3]
 80a10be:	e843 0200 	strex	r2, r0, [r3]
 80a10c2:	2a00      	cmp	r2, #0
 80a10c4:	d1f9      	bne.n	80a10ba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 80a10c6:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a10ca:	2e00      	cmp	r6, #0
 80a10cc:	d049      	beq.n	80a1162 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a10ce:	f7ff fd8d 	bl	80a0bec <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a10d2:	b120      	cbz	r0, 80a10de <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a10d4:	4629      	mov	r1, r5
 80a10d6:	4630      	mov	r0, r6
 80a10d8:	f7ff ff98 	bl	80a100c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a10dc:	e03a      	b.n	80a1154 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a10de:	4631      	mov	r1, r6
 80a10e0:	a802      	add	r0, sp, #8
 80a10e2:	f7ff ffb3 	bl	80a104c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a10e6:	68e0      	ldr	r0, [r4, #12]
 80a10e8:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a10ec:	b108      	cbz	r0, 80a10f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 80a10ee:	f002 f851 	bl	80a3194 <strdup>
 80a10f2:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a10f4:	2010      	movs	r0, #16
 80a10f6:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a10fa:	f7fe ffd0 	bl	80a009e <_Znwj>
 80a10fe:	4605      	mov	r5, r0
 80a1100:	b1e8      	cbz	r0, 80a113e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1102:	2700      	movs	r7, #0
 80a1104:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1106:	2018      	movs	r0, #24
 80a1108:	f7fe ffc9 	bl	80a009e <_Znwj>
 80a110c:	4604      	mov	r4, r0
 80a110e:	b188      	cbz	r0, 80a1134 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a1110:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1112:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a1114:	a802      	add	r0, sp, #8
 80a1116:	f7ff ff54 	bl	80a0fc2 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a111a:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a111c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a111e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1120:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a1122:	9204      	str	r2, [sp, #16]
 80a1124:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a1126:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a1128:	60e3      	str	r3, [r4, #12]
 80a112a:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a112e:	9205      	str	r2, [sp, #20]
 80a1130:	f7ff fe97 	bl	80a0e62 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1134:	4b0d      	ldr	r3, [pc, #52]	; (80a116c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1136:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1138:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a113a:	4b0d      	ldr	r3, [pc, #52]	; (80a1170 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 80a113c:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 80a113e:	a806      	add	r0, sp, #24
 80a1140:	f7ff fe9e 	bl	80a0e80 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1144:	a802      	add	r0, sp, #8
 80a1146:	f7ff fe83 	bl	80a0e50 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a114a:	2200      	movs	r2, #0
 80a114c:	4629      	mov	r1, r5
 80a114e:	4809      	ldr	r0, [pc, #36]	; (80a1174 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 80a1150:	f7ff fd54 	bl	80a0bfc <application_thread_invoke>
 80a1154:	4630      	mov	r0, r6
 80a1156:	f7ff fe7b 	bl	80a0e50 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a115a:	2110      	movs	r1, #16
 80a115c:	4630      	mov	r0, r6
 80a115e:	f000 ffa8 	bl	80a20b2 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 80a1162:	4668      	mov	r0, sp
 80a1164:	f7ff fe8c 	bl	80a0e80 <_ZN8particle5ErrorD1Ev>
    }
 80a1168:	b009      	add	sp, #36	; 0x24
 80a116a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a116c:	080a101f 	.word	0x080a101f
 80a1170:	080a1295 	.word	0x080a1295
 80a1174:	080a0e0b 	.word	0x080a0e0b

080a1178 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a1178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a117c:	b08b      	sub	sp, #44	; 0x2c
 80a117e:	4606      	mov	r6, r0
 80a1180:	460f      	mov	r7, r1
 80a1182:	4690      	mov	r8, r2
 80a1184:	4699      	mov	r9, r3
 80a1186:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a118a:	f7ff fd73 	bl	80a0c74 <spark_cloud_flag_connected>
 80a118e:	ad07      	add	r5, sp, #28
    if (!connected()) {
 80a1190:	4683      	mov	fp, r0
 80a1192:	bb30      	cbnz	r0, 80a11e2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a1194:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a1198:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a119a:	a905      	add	r1, sp, #20
 80a119c:	4628      	mov	r0, r5
 80a119e:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a11a2:	f7ff fe5e 	bl	80a0e62 <_ZN8particle5ErrorC1EOS0_>
 80a11a6:	2014      	movs	r0, #20
 80a11a8:	f7fe ff79 	bl	80a009e <_Znwj>
 80a11ac:	4604      	mov	r4, r0
 80a11ae:	b158      	cbz	r0, 80a11c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a11b0:	2302      	movs	r3, #2
 80a11b2:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a11b4:	2301      	movs	r3, #1
 80a11b6:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a11b8:	f8c0 b004 	str.w	fp, [r0, #4]
 80a11bc:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 80a11c0:	4629      	mov	r1, r5
 80a11c2:	300c      	adds	r0, #12
 80a11c4:	f7ff fe4d 	bl	80a0e62 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a11c8:	4630      	mov	r0, r6
 80a11ca:	4621      	mov	r1, r4
 80a11cc:	f840 4b04 	str.w	r4, [r0], #4
 80a11d0:	f7ff ff08 	bl	80a0fe4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a11d4:	4628      	mov	r0, r5
 80a11d6:	f7ff fe53 	bl	80a0e80 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a11da:	a805      	add	r0, sp, #20
 80a11dc:	f7ff fe50 	bl	80a0e80 <_ZN8particle5ErrorD1Ev>
 80a11e0:	e052      	b.n	80a1288 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a11e2:	2400      	movs	r4, #0
 80a11e4:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a11e6:	2014      	movs	r0, #20
 80a11e8:	606c      	str	r4, [r5, #4]
 80a11ea:	60ac      	str	r4, [r5, #8]
 80a11ec:	9307      	str	r3, [sp, #28]
 80a11ee:	f7fe ff56 	bl	80a009e <_Znwj>
 80a11f2:	4601      	mov	r1, r0
 80a11f4:	b118      	cbz	r0, 80a11fe <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 80a11f6:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a11f8:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a11fa:	6044      	str	r4, [r0, #4]
 80a11fc:	6084      	str	r4, [r0, #8]
 80a11fe:	a804      	add	r0, sp, #16
 80a1200:	9103      	str	r1, [sp, #12]
 80a1202:	f7ff feef 	bl	80a0fe4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a1206:	4b22      	ldr	r3, [pc, #136]	; (80a1290 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a1208:	2008      	movs	r0, #8
 80a120a:	9308      	str	r3, [sp, #32]
 80a120c:	f7fe ff47 	bl	80a009e <_Znwj>
 80a1210:	4604      	mov	r4, r0
 80a1212:	b128      	cbz	r0, 80a1220 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1214:	9b03      	ldr	r3, [sp, #12]
 80a1216:	a904      	add	r1, sp, #16
 80a1218:	f840 3b04 	str.w	r3, [r0], #4
 80a121c:	f7ff feac 	bl	80a0f78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a1220:	9500      	str	r5, [sp, #0]
 80a1222:	fa5f f38a 	uxtb.w	r3, sl
 80a1226:	464a      	mov	r2, r9
 80a1228:	4641      	mov	r1, r8
 80a122a:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a122c:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a122e:	f7ff fd31 	bl	80a0c94 <spark_send_event>
 80a1232:	b920      	cbnz	r0, 80a123e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a1234:	9b03      	ldr	r3, [sp, #12]
 80a1236:	785b      	ldrb	r3, [r3, #1]
 80a1238:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a123c:	b183      	cbz	r3, 80a1260 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 80a123e:	9b03      	ldr	r3, [sp, #12]
 80a1240:	a904      	add	r1, sp, #16
 80a1242:	a806      	add	r0, sp, #24
 80a1244:	9305      	str	r3, [sp, #20]
 80a1246:	f7ff fe97 	bl	80a0f78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a124a:	a905      	add	r1, sp, #20
 80a124c:	4630      	mov	r0, r6
 80a124e:	f7ff fe82 	bl	80a0f56 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1252:	a806      	add	r0, sp, #24
 80a1254:	f7fe ffcf 	bl	80a01f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1258:	a804      	add	r0, sp, #16
 80a125a:	f7fe ffcc 	bl	80a01f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a125e:	e013      	b.n	80a1288 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 80a1260:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a1264:	a905      	add	r1, sp, #20
 80a1266:	a803      	add	r0, sp, #12
 80a1268:	9205      	str	r2, [sp, #20]
 80a126a:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a126e:	f7ff fefd 	bl	80a106c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a1272:	a805      	add	r0, sp, #20
 80a1274:	f7ff fe04 	bl	80a0e80 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a1278:	a805      	add	r0, sp, #20
 80a127a:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a127c:	f7ff fe83 	bl	80a0f86 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 80a1280:	a806      	add	r0, sp, #24
 80a1282:	f7fe ffb8 	bl	80a01f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1286:	e7da      	b.n	80a123e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
 80a1288:	4630      	mov	r0, r6
 80a128a:	b00b      	add	sp, #44	; 0x2c
 80a128c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1290:	080a1405 	.word	0x080a1405

080a1294 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1294:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a1296:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1298:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a129a:	d006      	beq.n	80a12aa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a129c:	2a03      	cmp	r2, #3
 80a129e:	d017      	beq.n	80a12d0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a12a0:	2a01      	cmp	r2, #1
 80a12a2:	d122      	bne.n	80a12ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a12a4:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a12a6:	6003      	str	r3, [r0, #0]
	      break;
 80a12a8:	e01f      	b.n	80a12ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a12aa:	2018      	movs	r0, #24
 80a12ac:	680e      	ldr	r6, [r1, #0]
 80a12ae:	f7fe fef6 	bl	80a009e <_Znwj>
 80a12b2:	4605      	mov	r5, r0
 80a12b4:	b150      	cbz	r0, 80a12cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a12b6:	4631      	mov	r1, r6
 80a12b8:	f7ff fec8 	bl	80a104c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a12bc:	6930      	ldr	r0, [r6, #16]
 80a12be:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a12c2:	b108      	cbz	r0, 80a12c8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a12c4:	f001 ff66 	bl	80a3194 <strdup>
 80a12c8:	6128      	str	r0, [r5, #16]
 80a12ca:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a12cc:	6025      	str	r5, [r4, #0]
 80a12ce:	e00c      	b.n	80a12ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a12d0:	6804      	ldr	r4, [r0, #0]
 80a12d2:	b154      	cbz	r4, 80a12ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 80a12d4:	f104 0010 	add.w	r0, r4, #16
 80a12d8:	f7ff fdd2 	bl	80a0e80 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a12dc:	4620      	mov	r0, r4
 80a12de:	f7ff fdb7 	bl	80a0e50 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a12e2:	2118      	movs	r1, #24
 80a12e4:	4620      	mov	r0, r4
 80a12e6:	f000 fee4 	bl	80a20b2 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a12ea:	2000      	movs	r0, #0
 80a12ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a12ee <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a12ee:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a12f0:	2300      	movs	r3, #0
 80a12f2:	6083      	str	r3, [r0, #8]
 80a12f4:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a12f6:	4604      	mov	r4, r0
 80a12f8:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a12fa:	b12b      	cbz	r3, 80a1308 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a12fc:	2202      	movs	r2, #2
 80a12fe:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a1300:	68eb      	ldr	r3, [r5, #12]
 80a1302:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1304:	68ab      	ldr	r3, [r5, #8]
 80a1306:	60a3      	str	r3, [r4, #8]
	}
    }
 80a1308:	4620      	mov	r0, r4
 80a130a:	bd38      	pop	{r3, r4, r5, pc}

080a130c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a130c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a130e:	b570      	push	{r4, r5, r6, lr}
 80a1310:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1312:	d006      	beq.n	80a1322 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a1314:	2a03      	cmp	r2, #3
 80a1316:	d011      	beq.n	80a133c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a1318:	2a01      	cmp	r2, #1
 80a131a:	d118      	bne.n	80a134e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a131c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a131e:	6003      	str	r3, [r0, #0]
	      break;
 80a1320:	e015      	b.n	80a134e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1322:	2014      	movs	r0, #20
 80a1324:	680e      	ldr	r6, [r1, #0]
 80a1326:	f7fe feba 	bl	80a009e <_Znwj>
 80a132a:	4605      	mov	r5, r0
 80a132c:	b120      	cbz	r0, 80a1338 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a132e:	4631      	mov	r1, r6
 80a1330:	f7ff ffdd 	bl	80a12ee <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a1334:	7c33      	ldrb	r3, [r6, #16]
 80a1336:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1338:	6025      	str	r5, [r4, #0]
 80a133a:	e008      	b.n	80a134e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a133c:	6804      	ldr	r4, [r0, #0]
 80a133e:	b134      	cbz	r4, 80a134e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1340:	4620      	mov	r0, r4
 80a1342:	f7ff fd85 	bl	80a0e50 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1346:	2114      	movs	r1, #20
 80a1348:	4620      	mov	r0, r4
 80a134a:	f000 feb2 	bl	80a20b2 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a134e:	2000      	movs	r0, #0
 80a1350:	bd70      	pop	{r4, r5, r6, pc}
	...

080a1354 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a1354:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1356:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a1358:	f3bf 8f5f 	dmb	sy
 80a135c:	b087      	sub	sp, #28
 80a135e:	2300      	movs	r3, #0
 80a1360:	e850 6f00 	ldrex	r6, [r0]
 80a1364:	e840 3200 	strex	r2, r3, [r0]
 80a1368:	2a00      	cmp	r2, #0
 80a136a:	d1f9      	bne.n	80a1360 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a136c:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a1370:	2e00      	cmp	r6, #0
 80a1372:	d03f      	beq.n	80a13f4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a1374:	4618      	mov	r0, r3
 80a1376:	f7ff fc39 	bl	80a0bec <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a137a:	4607      	mov	r7, r0
 80a137c:	b120      	cbz	r0, 80a1388 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a137e:	4621      	mov	r1, r4
 80a1380:	4630      	mov	r0, r6
 80a1382:	f7ff fe53 	bl	80a102c <_ZNKSt8functionIFvRKbEEclES1_>
 80a1386:	e02e      	b.n	80a13e6 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a1388:	4631      	mov	r1, r6
 80a138a:	a801      	add	r0, sp, #4
 80a138c:	f7ff ffaf 	bl	80a12ee <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a1390:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a1392:	2010      	movs	r0, #16
 80a1394:	f88d 3014 	strb.w	r3, [sp, #20]
 80a1398:	f7fe fe81 	bl	80a009e <_Znwj>
 80a139c:	4605      	mov	r5, r0
 80a139e:	b1d0      	cbz	r0, 80a13d6 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a13a0:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a13a2:	2014      	movs	r0, #20
 80a13a4:	f7fe fe7b 	bl	80a009e <_Znwj>
 80a13a8:	4604      	mov	r4, r0
 80a13aa:	b178      	cbz	r0, 80a13cc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a13ac:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a13ae:	4601      	mov	r1, r0
 80a13b0:	a801      	add	r0, sp, #4
 80a13b2:	f7ff fe06 	bl	80a0fc2 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a13b6:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a13b8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a13ba:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a13bc:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a13be:	9203      	str	r2, [sp, #12]
 80a13c0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a13c2:	60e3      	str	r3, [r4, #12]
 80a13c4:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a13c8:	9204      	str	r2, [sp, #16]
 80a13ca:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a13cc:	4b0a      	ldr	r3, [pc, #40]	; (80a13f8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a13ce:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a13d0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a13d2:	4b0a      	ldr	r3, [pc, #40]	; (80a13fc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a13d4:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a13d6:	a801      	add	r0, sp, #4
 80a13d8:	f7ff fd3a 	bl	80a0e50 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a13dc:	2200      	movs	r2, #0
 80a13de:	4629      	mov	r1, r5
 80a13e0:	4807      	ldr	r0, [pc, #28]	; (80a1400 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a13e2:	f7ff fc0b 	bl	80a0bfc <application_thread_invoke>
 80a13e6:	4630      	mov	r0, r6
 80a13e8:	f7ff fd32 	bl	80a0e50 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a13ec:	2110      	movs	r1, #16
 80a13ee:	4630      	mov	r0, r6
 80a13f0:	f000 fe5f 	bl	80a20b2 <_ZdlPvj>
        }
    }
 80a13f4:	b007      	add	sp, #28
 80a13f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a13f8:	080a103f 	.word	0x080a103f
 80a13fc:	080a130d 	.word	0x080a130d
 80a1400:	080a0e0b 	.word	0x080a0e0b

080a1404 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a1404:	b530      	push	{r4, r5, lr}
 80a1406:	4604      	mov	r4, r0
 80a1408:	b085      	sub	sp, #20
 80a140a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a140c:	4668      	mov	r0, sp
 80a140e:	4611      	mov	r1, r2
 80a1410:	f7ff fdb9 	bl	80a0f86 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a1414:	b17c      	cbz	r4, 80a1436 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a1416:	b224      	sxth	r4, r4
 80a1418:	4628      	mov	r0, r5
 80a141a:	b10d      	cbz	r5, 80a1420 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a141c:	f001 feba 	bl	80a3194 <strdup>
 80a1420:	9002      	str	r0, [sp, #8]
 80a1422:	a902      	add	r1, sp, #8
 80a1424:	4668      	mov	r0, sp
 80a1426:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a142a:	f7ff fe1f 	bl	80a106c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a142e:	a802      	add	r0, sp, #8
 80a1430:	f7ff fd26 	bl	80a0e80 <_ZN8particle5ErrorD1Ev>
 80a1434:	e01d      	b.n	80a1472 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a1436:	f04f 0201 	mov.w	r2, #1
 80a143a:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a143c:	f88d 4008 	strb.w	r4, [sp, #8]
 80a1440:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a1444:	42a3      	cmp	r3, r4
 80a1446:	d103      	bne.n	80a1450 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a1448:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a144c:	2900      	cmp	r1, #0
 80a144e:	d1f7      	bne.n	80a1440 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a1450:	d002      	beq.n	80a1458 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a1452:	f88d 3008 	strb.w	r3, [sp, #8]
 80a1456:	e00c      	b.n	80a1472 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a1458:	f110 010c 	adds.w	r1, r0, #12
 80a145c:	f04f 0301 	mov.w	r3, #1
 80a1460:	bf18      	it	ne
 80a1462:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a1464:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a1468:	3004      	adds	r0, #4
 80a146a:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a146e:	f7ff ff71 	bl	80a1354 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a1472:	a801      	add	r0, sp, #4
 80a1474:	f7fe febf 	bl	80a01f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a1478:	b005      	add	sp, #20
 80a147a:	bd30      	pop	{r4, r5, pc}

080a147c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
 80a147c:	4770      	bx	lr

080a147e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a147e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1480:	4606      	mov	r6, r0
 80a1482:	4615      	mov	r5, r2
 80a1484:	460c      	mov	r4, r1
 80a1486:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1488:	42bc      	cmp	r4, r7
 80a148a:	d006      	beq.n	80a149a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a148c:	6833      	ldr	r3, [r6, #0]
 80a148e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1492:	689b      	ldr	r3, [r3, #8]
 80a1494:	4630      	mov	r0, r6
 80a1496:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1498:	e7f6      	b.n	80a1488 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a149a:	4628      	mov	r0, r5
 80a149c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a149e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a149e:	2200      	movs	r2, #0
 80a14a0:	7c00      	ldrb	r0, [r0, #16]
 80a14a2:	f7ff bab9 	b.w	80a0a18 <HAL_I2C_Write_Data>

080a14a6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a14a6:	2100      	movs	r1, #0
 80a14a8:	7c00      	ldrb	r0, [r0, #16]
 80a14aa:	f7ff babd 	b.w	80a0a28 <HAL_I2C_Available_Data>

080a14ae <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a14ae:	2100      	movs	r1, #0
 80a14b0:	7c00      	ldrb	r0, [r0, #16]
 80a14b2:	f7ff bac1 	b.w	80a0a38 <HAL_I2C_Read_Data>

080a14b6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a14b6:	2100      	movs	r1, #0
 80a14b8:	7c00      	ldrb	r0, [r0, #16]
 80a14ba:	f7ff bac5 	b.w	80a0a48 <HAL_I2C_Peek_Data>

080a14be <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a14be:	2100      	movs	r1, #0
 80a14c0:	7c00      	ldrb	r0, [r0, #16]
 80a14c2:	f7ff bac9 	b.w	80a0a58 <HAL_I2C_Flush_Data>

080a14c6 <_ZN7TwoWireD0Ev>:
 80a14c6:	b510      	push	{r4, lr}
 80a14c8:	4604      	mov	r4, r0
 80a14ca:	2114      	movs	r1, #20
 80a14cc:	f000 fdf1 	bl	80a20b2 <_ZdlPvj>
 80a14d0:	4620      	mov	r0, r4
 80a14d2:	bd10      	pop	{r4, pc}

080a14d4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a14d4:	b510      	push	{r4, lr}
 80a14d6:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a14d8:	2300      	movs	r3, #0
 80a14da:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a14dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a14e0:	60a3      	str	r3, [r4, #8]
 80a14e2:	4b04      	ldr	r3, [pc, #16]	; (80a14f4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
 80a14e4:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a14e6:	4608      	mov	r0, r1
 80a14e8:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
 80a14ea:	4611      	mov	r1, r2
 80a14ec:	f7ff fac4 	bl	80a0a78 <HAL_I2C_Init>
}
 80a14f0:	4620      	mov	r0, r4
 80a14f2:	bd10      	pop	{r4, pc}
 80a14f4:	080a3c58 	.word	0x080a3c58

080a14f8 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a14f8:	2100      	movs	r1, #0
 80a14fa:	7c00      	ldrb	r0, [r0, #16]
 80a14fc:	f7ff bab4 	b.w	80a0a68 <HAL_I2C_Is_Enabled>

080a1500 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1500:	4770      	bx	lr

080a1502 <_ZN9IPAddressD0Ev>:
 80a1502:	b510      	push	{r4, lr}
 80a1504:	4604      	mov	r4, r0
 80a1506:	2118      	movs	r1, #24
 80a1508:	f000 fdd3 	bl	80a20b2 <_ZdlPvj>
 80a150c:	4620      	mov	r0, r4
 80a150e:	bd10      	pop	{r4, pc}

080a1510 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1512:	460f      	mov	r7, r1
 80a1514:	f100 0608 	add.w	r6, r0, #8
 80a1518:	1d05      	adds	r5, r0, #4
 80a151a:	2400      	movs	r4, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a151c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a1520:	220a      	movs	r2, #10
 80a1522:	4638      	mov	r0, r7
 80a1524:	f000 f8fd 	bl	80a1722 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1528:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a152a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a152c:	d007      	beq.n	80a153e <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a152e:	2c00      	cmp	r4, #0
 80a1530:	d0f4      	beq.n	80a151c <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1532:	212e      	movs	r1, #46	; 0x2e
 80a1534:	4638      	mov	r0, r7
 80a1536:	f000 f8db 	bl	80a16f0 <_ZN5Print5printEc>
 80a153a:	4404      	add	r4, r0
 80a153c:	e7ee      	b.n	80a151c <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a153e:	4620      	mov	r0, r4
 80a1540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a1544 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a1544:	b510      	push	{r4, lr}
 80a1546:	4604      	mov	r4, r0
 80a1548:	4b04      	ldr	r3, [pc, #16]	; (80a155c <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a154a:	2211      	movs	r2, #17
 80a154c:	f840 3b04 	str.w	r3, [r0], #4
 80a1550:	2100      	movs	r1, #0
 80a1552:	f001 fddc 	bl	80a310e <memset>
{
    clear();
}
 80a1556:	4620      	mov	r0, r4
 80a1558:	bd10      	pop	{r4, pc}
 80a155a:	bf00      	nop
 80a155c:	080a3c80 	.word	0x080a3c80

080a1560 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1560:	4603      	mov	r3, r0
 80a1562:	4a07      	ldr	r2, [pc, #28]	; (80a1580 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1564:	b510      	push	{r4, lr}
 80a1566:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a156a:	f101 0210 	add.w	r2, r1, #16
 80a156e:	f851 4b04 	ldr.w	r4, [r1], #4
 80a1572:	4291      	cmp	r1, r2
 80a1574:	f843 4b04 	str.w	r4, [r3], #4
 80a1578:	d1f9      	bne.n	80a156e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a157a:	780a      	ldrb	r2, [r1, #0]
 80a157c:	701a      	strb	r2, [r3, #0]
}
 80a157e:	bd10      	pop	{r4, pc}
 80a1580:	080a3c80 	.word	0x080a3c80

080a1584 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1584:	4a02      	ldr	r2, [pc, #8]	; (80a1590 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a1586:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1588:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a158a:	2204      	movs	r2, #4
 80a158c:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a158e:	4770      	bx	lr
 80a1590:	080a3c80 	.word	0x080a3c80

080a1594 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a1594:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1596:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a159a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a159e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a15a2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a15a6:	2304      	movs	r3, #4
 80a15a8:	6041      	str	r1, [r0, #4]
 80a15aa:	7503      	strb	r3, [r0, #20]
 80a15ac:	bd10      	pop	{r4, pc}
	...

080a15b0 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a15b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a15b2:	4d04      	ldr	r5, [pc, #16]	; (80a15c4 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a15b4:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a15b6:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a15ba:	9500      	str	r5, [sp, #0]
 80a15bc:	f7ff ffea 	bl	80a1594 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a15c0:	b003      	add	sp, #12
 80a15c2:	bd30      	pop	{r4, r5, pc}
 80a15c4:	080a3c80 	.word	0x080a3c80

080a15c8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a15c8:	4a01      	ldr	r2, [pc, #4]	; (80a15d0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a15ca:	4b02      	ldr	r3, [pc, #8]	; (80a15d4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a15cc:	601a      	str	r2, [r3, #0]
 80a15ce:	4770      	bx	lr
 80a15d0:	080a3d02 	.word	0x080a3d02
 80a15d4:	20000298 	.word	0x20000298

080a15d8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a15d8:	2300      	movs	r3, #0
 80a15da:	461a      	mov	r2, r3
 80a15dc:	6840      	ldr	r0, [r0, #4]
 80a15de:	f7ff bb81 	b.w	80a0ce4 <network_connect>

080a15e2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a15e2:	2200      	movs	r2, #0
 80a15e4:	2102      	movs	r1, #2
 80a15e6:	6840      	ldr	r0, [r0, #4]
 80a15e8:	f7ff bb8c 	b.w	80a0d04 <network_disconnect>

080a15ec <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a15ec:	2200      	movs	r2, #0
 80a15ee:	4611      	mov	r1, r2
 80a15f0:	6840      	ldr	r0, [r0, #4]
 80a15f2:	f7ff bb7f 	b.w	80a0cf4 <network_connecting>

080a15f6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a15f6:	2200      	movs	r2, #0
 80a15f8:	4611      	mov	r1, r2
 80a15fa:	6840      	ldr	r0, [r0, #4]
 80a15fc:	f7ff bb8a 	b.w	80a0d14 <network_ready>

080a1600 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a1600:	2300      	movs	r3, #0
 80a1602:	461a      	mov	r2, r3
 80a1604:	4619      	mov	r1, r3
 80a1606:	6840      	ldr	r0, [r0, #4]
 80a1608:	f7ff bb8c 	b.w	80a0d24 <network_on>

080a160c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a160c:	2300      	movs	r3, #0
 80a160e:	461a      	mov	r2, r3
 80a1610:	4619      	mov	r1, r3
 80a1612:	6840      	ldr	r0, [r0, #4]
 80a1614:	f7ff bb8e 	b.w	80a0d34 <network_off>

080a1618 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a1618:	2200      	movs	r2, #0
 80a161a:	f081 0101 	eor.w	r1, r1, #1
 80a161e:	6840      	ldr	r0, [r0, #4]
 80a1620:	f7ff bb90 	b.w	80a0d44 <network_listen>

080a1624 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a1624:	2200      	movs	r2, #0
 80a1626:	6840      	ldr	r0, [r0, #4]
 80a1628:	f7ff bb9c 	b.w	80a0d64 <network_set_listen_timeout>

080a162c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a162c:	2200      	movs	r2, #0
 80a162e:	4611      	mov	r1, r2
 80a1630:	6840      	ldr	r0, [r0, #4]
 80a1632:	f7ff bb9f 	b.w	80a0d74 <network_get_listen_timeout>

080a1636 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a1636:	2200      	movs	r2, #0
 80a1638:	4611      	mov	r1, r2
 80a163a:	6840      	ldr	r0, [r0, #4]
 80a163c:	f7ff bb8a 	b.w	80a0d54 <network_listening>

080a1640 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a1640:	b570      	push	{r4, r5, r6, lr}
 80a1642:	4616      	mov	r6, r2
 80a1644:	b08e      	sub	sp, #56	; 0x38
 80a1646:	4604      	mov	r4, r0
    IPAddress addr;
 80a1648:	a808      	add	r0, sp, #32
 80a164a:	f7ff ff7b 	bl	80a1544 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a164e:	2211      	movs	r2, #17
 80a1650:	2100      	movs	r1, #0
 80a1652:	a803      	add	r0, sp, #12
 80a1654:	f001 fd5b 	bl	80a310e <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1658:	4630      	mov	r0, r6
 80a165a:	f001 fdb6 	bl	80a31ca <strlen>
 80a165e:	2500      	movs	r5, #0
 80a1660:	4b0a      	ldr	r3, [pc, #40]	; (80a168c <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a1662:	9500      	str	r5, [sp, #0]
 80a1664:	b281      	uxth	r1, r0
 80a1666:	685b      	ldr	r3, [r3, #4]
 80a1668:	aa03      	add	r2, sp, #12
 80a166a:	4630      	mov	r0, r6
 80a166c:	f7ff fa96 	bl	80a0b9c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1670:	b120      	cbz	r0, 80a167c <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a1672:	4629      	mov	r1, r5
 80a1674:	4620      	mov	r0, r4
 80a1676:	f7ff ff85 	bl	80a1584 <_ZN9IPAddressC1Em>
 80a167a:	e003      	b.n	80a1684 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a167c:	a903      	add	r1, sp, #12
 80a167e:	4620      	mov	r0, r4
 80a1680:	f7ff ff6e 	bl	80a1560 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a1684:	4620      	mov	r0, r4
 80a1686:	b00e      	add	sp, #56	; 0x38
 80a1688:	bd70      	pop	{r4, r5, r6, pc}
 80a168a:	bf00      	nop
 80a168c:	20000750 	.word	0x20000750

080a1690 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1690:	4b02      	ldr	r3, [pc, #8]	; (80a169c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a1692:	4a03      	ldr	r2, [pc, #12]	; (80a16a0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1694:	601a      	str	r2, [r3, #0]
 80a1696:	2200      	movs	r2, #0
 80a1698:	605a      	str	r2, [r3, #4]
 80a169a:	4770      	bx	lr
 80a169c:	2000029c 	.word	0x2000029c
 80a16a0:	080a3d78 	.word	0x080a3d78

080a16a4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a16a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a16a6:	4606      	mov	r6, r0
 80a16a8:	460d      	mov	r5, r1
 80a16aa:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a16ac:	2400      	movs	r4, #0
  while (size--) {
 80a16ae:	42bd      	cmp	r5, r7
 80a16b0:	d00c      	beq.n	80a16cc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a16b2:	6833      	ldr	r3, [r6, #0]
 80a16b4:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a16b8:	689b      	ldr	r3, [r3, #8]
 80a16ba:	4630      	mov	r0, r6
 80a16bc:	4798      	blx	r3
     if (chunk>=0)
 80a16be:	2800      	cmp	r0, #0
 80a16c0:	db01      	blt.n	80a16c6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a16c2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a16c4:	e7f3      	b.n	80a16ae <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a16c6:	2c00      	cmp	r4, #0
 80a16c8:	bf08      	it	eq
 80a16ca:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a16cc:	4620      	mov	r0, r4
 80a16ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a16d0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a16d0:	b570      	push	{r4, r5, r6, lr}
 80a16d2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a16d4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a16d6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a16d8:	b149      	cbz	r1, 80a16ee <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a16da:	f001 fd76 	bl	80a31ca <strlen>
 80a16de:	682b      	ldr	r3, [r5, #0]
 80a16e0:	4602      	mov	r2, r0
 80a16e2:	4621      	mov	r1, r4
 80a16e4:	4628      	mov	r0, r5
    }
 80a16e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a16ea:	68db      	ldr	r3, [r3, #12]
 80a16ec:	4718      	bx	r3
    }
 80a16ee:	bd70      	pop	{r4, r5, r6, pc}

080a16f0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a16f0:	6803      	ldr	r3, [r0, #0]
 80a16f2:	689b      	ldr	r3, [r3, #8]
 80a16f4:	4718      	bx	r3

080a16f6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a16f6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a16f8:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a16fa:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a16fc:	f7ff fff8 	bl	80a16f0 <_ZN5Print5printEc>
  n += print('\n');
 80a1700:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a1702:	4604      	mov	r4, r0
  n += print('\n');
 80a1704:	4628      	mov	r0, r5
 80a1706:	f7ff fff3 	bl	80a16f0 <_ZN5Print5printEc>
  return n;
}
 80a170a:	4420      	add	r0, r4
 80a170c:	bd38      	pop	{r3, r4, r5, pc}

080a170e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a170e:	b538      	push	{r3, r4, r5, lr}
 80a1710:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1712:	f7ff ffdd 	bl	80a16d0 <_ZN5Print5writeEPKc>
 80a1716:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a1718:	4628      	mov	r0, r5
 80a171a:	f7ff ffec 	bl	80a16f6 <_ZN5Print7printlnEv>
  return n;
}
 80a171e:	4420      	add	r0, r4
 80a1720:	bd38      	pop	{r3, r4, r5, pc}

080a1722 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1722:	2a01      	cmp	r2, #1
 80a1724:	bf98      	it	ls
 80a1726:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1728:	b530      	push	{r4, r5, lr}
 80a172a:	460b      	mov	r3, r1
 80a172c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a172e:	2100      	movs	r1, #0
 80a1730:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a1734:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 80a1738:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 80a173c:	fb05 3312 	mls	r3, r5, r2, r3
 80a1740:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1742:	2b09      	cmp	r3, #9
 80a1744:	bf94      	ite	ls
 80a1746:	3330      	addls	r3, #48	; 0x30
 80a1748:	3337      	addhi	r3, #55	; 0x37
 80a174a:	b2db      	uxtb	r3, r3
 80a174c:	4621      	mov	r1, r4
 80a174e:	f804 3901 	strb.w	r3, [r4], #-1
 80a1752:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a1754:	2d00      	cmp	r5, #0
 80a1756:	d1ef      	bne.n	80a1738 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a1758:	f7ff ffba 	bl	80a16d0 <_ZN5Print5writeEPKc>
}
 80a175c:	b00b      	add	sp, #44	; 0x2c
 80a175e:	bd30      	pop	{r4, r5, pc}

080a1760 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a1760:	b510      	push	{r4, lr}
 80a1762:	4604      	mov	r4, r0
 80a1764:	f7ff fb74 	bl	80a0e50 <_ZNSt14_Function_baseD1Ev>
 80a1768:	4620      	mov	r0, r4
 80a176a:	bd10      	pop	{r4, pc}

080a176c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a176c:	4803      	ldr	r0, [pc, #12]	; (80a177c <_GLOBAL__sub_I_RGB+0x10>)
 80a176e:	2300      	movs	r3, #0
 80a1770:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a1772:	4a03      	ldr	r2, [pc, #12]	; (80a1780 <_GLOBAL__sub_I_RGB+0x14>)
 80a1774:	4903      	ldr	r1, [pc, #12]	; (80a1784 <_GLOBAL__sub_I_RGB+0x18>)
 80a1776:	f000 bc97 	b.w	80a20a8 <__aeabi_atexit>
 80a177a:	bf00      	nop
 80a177c:	200002a4 	.word	0x200002a4
 80a1780:	20000190 	.word	0x20000190
 80a1784:	080a1761 	.word	0x080a1761

080a1788 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a1788:	b510      	push	{r4, lr}
 80a178a:	4b04      	ldr	r3, [pc, #16]	; (80a179c <_ZN8SPIClassD1Ev+0x14>)
 80a178c:	4604      	mov	r4, r0
 80a178e:	6003      	str	r3, [r0, #0]
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a1790:	68c0      	ldr	r0, [r0, #12]
 80a1792:	b108      	cbz	r0, 80a1798 <_ZN8SPIClassD1Ev+0x10>
            os_mutex_recursive_destroy(handle_);
 80a1794:	f7ff f8e8 	bl	80a0968 <os_mutex_recursive_destroy>
 80a1798:	4620      	mov	r0, r4
 80a179a:	bd10      	pop	{r4, pc}
 80a179c:	080a3dac 	.word	0x080a3dac

080a17a0 <_ZN8SPIClassD0Ev>:
 80a17a0:	b510      	push	{r4, lr}
 80a17a2:	4604      	mov	r4, r0
 80a17a4:	f7ff fff0 	bl	80a1788 <_ZN8SPIClassD1Ev>
 80a17a8:	4620      	mov	r0, r4
 80a17aa:	2110      	movs	r1, #16
 80a17ac:	f000 fc81 	bl	80a20b2 <_ZdlPvj>
 80a17b0:	4620      	mov	r0, r4
 80a17b2:	bd10      	pop	{r4, pc}

080a17b4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a17b4:	b570      	push	{r4, r5, r6, lr}
 80a17b6:	4604      	mov	r4, r0
 80a17b8:	460e      	mov	r6, r1
 80a17ba:	4b07      	ldr	r3, [pc, #28]	; (80a17d8 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a17bc:	2500      	movs	r5, #0
 80a17be:	6003      	str	r3, [r0, #0]
 80a17c0:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_recursive_create(&handle_);
 80a17c4:	f7ff f8c8 	bl	80a0958 <os_mutex_recursive_create>
{
    _spi = spi;
    HAL_SPI_Init(_spi);
 80a17c8:	4630      	mov	r0, r6
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
    _spi = spi;
 80a17ca:	7126      	strb	r6, [r4, #4]
    HAL_SPI_Init(_spi);
 80a17cc:	f7ff f95e 	bl	80a0a8c <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a17d0:	60a5      	str	r5, [r4, #8]
}
 80a17d2:	4620      	mov	r0, r4
 80a17d4:	bd70      	pop	{r4, r5, r6, pc}
 80a17d6:	bf00      	nop
 80a17d8:	080a3dac 	.word	0x080a3dac

080a17dc <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
 80a17dc:	7900      	ldrb	r0, [r0, #4]
 80a17de:	f7ff b95d 	b.w	80a0a9c <HAL_SPI_Is_Enabled>

080a17e2 <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a17e2:	2300      	movs	r3, #0
 80a17e4:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a17e6:	6043      	str	r3, [r0, #4]
	len = 0;
 80a17e8:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a17ea:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
 80a17ec:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
 80a17ee:	680c      	ldr	r4, [r1, #0]
 80a17f0:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
 80a17f2:	684c      	ldr	r4, [r1, #4]
 80a17f4:	6044      	str	r4, [r0, #4]
	len = rhs.len;
 80a17f6:	688c      	ldr	r4, [r1, #8]
 80a17f8:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
 80a17fa:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
 80a17fc:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
 80a17fe:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
 80a1800:	bd10      	pop	{r4, pc}

080a1802 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a1802:	b510      	push	{r4, lr}
 80a1804:	4604      	mov	r4, r0
{
	free(buffer);
 80a1806:	6800      	ldr	r0, [r0, #0]
 80a1808:	f7ff fac4 	bl	80a0d94 <free>
}
 80a180c:	4620      	mov	r0, r4
 80a180e:	bd10      	pop	{r4, pc}

080a1810 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a1810:	b510      	push	{r4, lr}
 80a1812:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a1814:	6800      	ldr	r0, [r0, #0]
 80a1816:	b108      	cbz	r0, 80a181c <_ZN6String10invalidateEv+0xc>
 80a1818:	f7ff fabc 	bl	80a0d94 <free>
	buffer = NULL;
 80a181c:	2300      	movs	r3, #0
 80a181e:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a1820:	60a3      	str	r3, [r4, #8]
 80a1822:	6063      	str	r3, [r4, #4]
 80a1824:	bd10      	pop	{r4, pc}

080a1826 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a1826:	b538      	push	{r3, r4, r5, lr}
 80a1828:	4604      	mov	r4, r0
 80a182a:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a182c:	6800      	ldr	r0, [r0, #0]
 80a182e:	3101      	adds	r1, #1
 80a1830:	f7ff fab8 	bl	80a0da4 <realloc>
	if (newbuffer) {
 80a1834:	b110      	cbz	r0, 80a183c <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a1836:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a183a:	2001      	movs	r0, #1
	}
	return 0;
}
 80a183c:	bd38      	pop	{r3, r4, r5, pc}

080a183e <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a183e:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a1840:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a1842:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a1844:	b113      	cbz	r3, 80a184c <_ZN6String7reserveEj+0xe>
 80a1846:	6843      	ldr	r3, [r0, #4]
 80a1848:	428b      	cmp	r3, r1
 80a184a:	d207      	bcs.n	80a185c <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a184c:	4620      	mov	r0, r4
 80a184e:	f7ff ffea 	bl	80a1826 <_ZN6String12changeBufferEj>
 80a1852:	b120      	cbz	r0, 80a185e <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a1854:	68a3      	ldr	r3, [r4, #8]
 80a1856:	b90b      	cbnz	r3, 80a185c <_ZN6String7reserveEj+0x1e>
 80a1858:	6822      	ldr	r2, [r4, #0]
 80a185a:	7013      	strb	r3, [r2, #0]
 80a185c:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a185e:	bd10      	pop	{r4, pc}

080a1860 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1860:	b570      	push	{r4, r5, r6, lr}
 80a1862:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a1864:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1866:	4604      	mov	r4, r0
 80a1868:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a186a:	f7ff ffe8 	bl	80a183e <_ZN6String7reserveEj>
 80a186e:	b918      	cbnz	r0, 80a1878 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a1870:	4620      	mov	r0, r4
 80a1872:	f7ff ffcd 	bl	80a1810 <_ZN6String10invalidateEv>
		return *this;
 80a1876:	e009      	b.n	80a188c <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a1878:	462a      	mov	r2, r5
 80a187a:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a187c:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a187e:	6820      	ldr	r0, [r4, #0]
 80a1880:	f001 fc3a 	bl	80a30f8 <memcpy>
	buffer[len] = 0;
 80a1884:	6822      	ldr	r2, [r4, #0]
 80a1886:	68a3      	ldr	r3, [r4, #8]
 80a1888:	2100      	movs	r1, #0
 80a188a:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a188c:	4620      	mov	r0, r4
 80a188e:	bd70      	pop	{r4, r5, r6, pc}

080a1890 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1890:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1892:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1894:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1896:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a1898:	6043      	str	r3, [r0, #4]
	len = 0;
 80a189a:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a189c:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a189e:	460d      	mov	r5, r1
 80a18a0:	b139      	cbz	r1, 80a18b2 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a18a2:	4608      	mov	r0, r1
 80a18a4:	f001 fc91 	bl	80a31ca <strlen>
 80a18a8:	4629      	mov	r1, r5
 80a18aa:	4602      	mov	r2, r0
 80a18ac:	4620      	mov	r0, r4
 80a18ae:	f7ff ffd7 	bl	80a1860 <_ZN6String4copyEPKcj>
}
 80a18b2:	4620      	mov	r0, r4
 80a18b4:	bd38      	pop	{r3, r4, r5, pc}

080a18b6 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a18b6:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a18b8:	b510      	push	{r4, lr}
 80a18ba:	460b      	mov	r3, r1
 80a18bc:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a18be:	d007      	beq.n	80a18d0 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a18c0:	6809      	ldr	r1, [r1, #0]
 80a18c2:	b119      	cbz	r1, 80a18cc <_ZN6StringaSERKS_+0x16>
 80a18c4:	689a      	ldr	r2, [r3, #8]
 80a18c6:	f7ff ffcb 	bl	80a1860 <_ZN6String4copyEPKcj>
 80a18ca:	e001      	b.n	80a18d0 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a18cc:	f7ff ffa0 	bl	80a1810 <_ZN6String10invalidateEv>

	return *this;
}
 80a18d0:	4620      	mov	r0, r4
 80a18d2:	bd10      	pop	{r4, pc}

080a18d4 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80a18d4:	b510      	push	{r4, lr}
 80a18d6:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a18d8:	2300      	movs	r3, #0
 80a18da:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a18dc:	6043      	str	r3, [r0, #4]
	len = 0;
 80a18de:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a18e0:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a18e2:	f7ff ffe8 	bl	80a18b6 <_ZN6StringaSERKS_>
}
 80a18e6:	4620      	mov	r0, r4
 80a18e8:	bd10      	pop	{r4, pc}

080a18ea <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a18ea:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a18ec:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a18ee:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a18f0:	b912      	cbnz	r2, 80a18f8 <_ZNK6String6equalsEPKc+0xe>
 80a18f2:	b919      	cbnz	r1, 80a18fc <_ZNK6String6equalsEPKc+0x12>
 80a18f4:	2001      	movs	r0, #1
 80a18f6:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a18f8:	b911      	cbnz	r1, 80a1900 <_ZNK6String6equalsEPKc+0x16>
 80a18fa:	6803      	ldr	r3, [r0, #0]
 80a18fc:	7818      	ldrb	r0, [r3, #0]
 80a18fe:	e002      	b.n	80a1906 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 80a1900:	6800      	ldr	r0, [r0, #0]
 80a1902:	f001 fc35 	bl	80a3170 <strcmp>
 80a1906:	fab0 f080 	clz	r0, r0
 80a190a:	0940      	lsrs	r0, r0, #5
}
 80a190c:	bd08      	pop	{r3, pc}

080a190e <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
 80a190e:	b570      	push	{r4, r5, r6, lr}
 80a1910:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
 80a1912:	b19a      	cbz	r2, 80a193c <_ZNK6String8getBytesEPhjj+0x2e>
 80a1914:	b191      	cbz	r1, 80a193c <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
 80a1916:	6885      	ldr	r5, [r0, #8]
 80a1918:	429d      	cmp	r5, r3
 80a191a:	d802      	bhi.n	80a1922 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
 80a191c:	2300      	movs	r3, #0
 80a191e:	700b      	strb	r3, [r1, #0]
		return;
 80a1920:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
 80a1922:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
 80a1924:	1aed      	subs	r5, r5, r3
 80a1926:	42ac      	cmp	r4, r5
 80a1928:	bf28      	it	cs
 80a192a:	462c      	movcs	r4, r5
	strncpy((char *)buf, buffer + index, n);
 80a192c:	6801      	ldr	r1, [r0, #0]
 80a192e:	4622      	mov	r2, r4
 80a1930:	4419      	add	r1, r3
 80a1932:	4630      	mov	r0, r6
 80a1934:	f001 fc66 	bl	80a3204 <strncpy>
	buf[n] = 0;
 80a1938:	2300      	movs	r3, #0
 80a193a:	5533      	strb	r3, [r6, r4]
 80a193c:	bd70      	pop	{r4, r5, r6, pc}

080a193e <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
 80a193e:	4601      	mov	r1, r0
 80a1940:	2200      	movs	r2, #0
 80a1942:	208c      	movs	r0, #140	; 0x8c
 80a1944:	f7ff b820 	b.w	80a0988 <HAL_Core_System_Reset_Ex>

080a1948 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
 80a1948:	2000      	movs	r0, #0
 80a194a:	f7ff bff8 	b.w	80a193e <_ZN11SystemClass5resetEm>
	...

080a1950 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a1950:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a1954:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a1956:	4c08      	ldr	r4, [pc, #32]	; (80a1978 <_GLOBAL__sub_I_System+0x28>)
 80a1958:	2000      	movs	r0, #0
 80a195a:	6020      	str	r0, [r4, #0]
 80a195c:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a195e:	71a0      	strb	r0, [r4, #6]
 80a1960:	8120      	strh	r0, [r4, #8]
 80a1962:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1964:	f7ff f92a 	bl	80a0bbc <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a1968:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a196a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a196e:	4a03      	ldr	r2, [pc, #12]	; (80a197c <_GLOBAL__sub_I_System+0x2c>)
 80a1970:	4903      	ldr	r1, [pc, #12]	; (80a1980 <_GLOBAL__sub_I_System+0x30>)
 80a1972:	f000 bb99 	b.w	80a20a8 <__aeabi_atexit>
 80a1976:	bf00      	nop
 80a1978:	200002b4 	.word	0x200002b4
 80a197c:	20000190 	.word	0x20000190
 80a1980:	080a00eb 	.word	0x080a00eb

080a1984 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80a1984:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
 80a1986:	4b14      	ldr	r3, [pc, #80]	; (80a19d8 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80a1988:	4f14      	ldr	r7, [pc, #80]	; (80a19dc <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 80a198a:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
 80a198c:	4b14      	ldr	r3, [pc, #80]	; (80a19e0 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 80a198e:	4406      	add	r6, r0
    unix_time += dst_current_cache;
 80a1990:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
 80a1992:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
 80a1994:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
 80a1996:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80a1998:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80a199a:	d01b      	beq.n	80a19d4 <_ZL22Refresh_UnixTime_Cachel+0x50>
 80a199c:	a80a      	add	r0, sp, #40	; 0x28
 80a199e:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
 80a19a2:	f001 fab1 	bl	80a2f08 <localtime>
	calendar_time->tm_year += 1900;
	return *calendar_time;
 80a19a6:	4604      	mov	r4, r0
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 80a19a8:	6943      	ldr	r3, [r0, #20]
	return *calendar_time;
 80a19aa:	ad01      	add	r5, sp, #4
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 80a19ac:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80a19b0:	6143      	str	r3, [r0, #20]
	return *calendar_time;
 80a19b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a19b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a19b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a19b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a19ba:	f8d4 e000 	ldr.w	lr, [r4]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a19be:	4c09      	ldr	r4, [pc, #36]	; (80a19e4 <_ZL22Refresh_UnixTime_Cachel+0x60>)
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
 80a19c0:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a19c4:	ad01      	add	r5, sp, #4
 80a19c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a19c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a19ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a19cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 80a19ce:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a19d0:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
 80a19d4:	b00b      	add	sp, #44	; 0x2c
 80a19d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a19d8:	200002f0 	.word	0x200002f0
 80a19dc:	200002ec 	.word	0x200002ec
 80a19e0:	200002e8 	.word	0x200002e8
 80a19e4:	200002c0 	.word	0x200002c0

080a19e8 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 80a19e8:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a19ea:	2000      	movs	r0, #0
 80a19ec:	f7ff f96a 	bl	80a0cc4 <spark_sync_time_pending>
 80a19f0:	b128      	cbz	r0, 80a19fe <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a19f2:	f7ff f93f 	bl	80a0c74 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a19f6:	f080 0001 	eor.w	r0, r0, #1
 80a19fa:	b2c0      	uxtb	r0, r0
 80a19fc:	bd08      	pop	{r3, pc}
 80a19fe:	2001      	movs	r0, #1
    }
 80a1a00:	bd08      	pop	{r3, pc}

080a1a02 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a1a02:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 80a1a04:	2000      	movs	r0, #0
 80a1a06:	f7fe ffdf 	bl	80a09c8 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 80a1a0a:	4604      	mov	r4, r0
 80a1a0c:	b968      	cbnz	r0, 80a1a2a <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a1a0e:	f7ff f8cd 	bl	80a0bac <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a1a12:	2801      	cmp	r0, #1
 80a1a14:	d10b      	bne.n	80a1a2e <_ZN9TimeClass7isValidEv+0x2c>
 80a1a16:	4620      	mov	r0, r4
 80a1a18:	f7ff f8f8 	bl	80a0c0c <system_thread_get_state>
 80a1a1c:	b938      	cbnz	r0, 80a1a2e <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 80a1a1e:	f7ff ffe3 	bl	80a19e8 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a1a22:	b930      	cbnz	r0, 80a1a32 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 80a1a24:	f7ff f916 	bl	80a0c54 <spark_process>
 80a1a28:	e7f9      	b.n	80a1a1e <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 80a1a2a:	2001      	movs	r0, #1
 80a1a2c:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 80a1a2e:	2000      	movs	r0, #0
 80a1a30:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 80a1a32:	f7ff ffd9 	bl	80a19e8 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 80a1a36:	2000      	movs	r0, #0
 80a1a38:	f7fe ffc6 	bl	80a09c8 <HAL_RTC_Time_Is_Valid>
 80a1a3c:	3000      	adds	r0, #0
 80a1a3e:	bf18      	it	ne
 80a1a40:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 80a1a42:	bd10      	pop	{r4, pc}

080a1a44 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 80a1a44:	b508      	push	{r3, lr}
    (void)isValid();
 80a1a46:	f7ff ffdc 	bl	80a1a02 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 80a1a4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 80a1a4e:	f7fe bfb3 	b.w	80a09b8 <HAL_RTC_Get_UnixTime>
	...

080a1a54 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
 80a1a54:	b508      	push	{r3, lr}
	return hour(now());
 80a1a56:	f7ff fff5 	bl	80a1a44 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80a1a5a:	f7ff ff93 	bl	80a1984 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
 80a1a5e:	4b01      	ldr	r3, [pc, #4]	; (80a1a64 <_ZN9TimeClass4hourEv+0x10>)
 80a1a60:	6898      	ldr	r0, [r3, #8]
 80a1a62:	bd08      	pop	{r3, pc}
 80a1a64:	200002c0 	.word	0x200002c0

080a1a68 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
 80a1a68:	b508      	push	{r3, lr}
	return minute(now());
 80a1a6a:	f7ff ffeb 	bl	80a1a44 <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80a1a6e:	f7ff ff89 	bl	80a1984 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
 80a1a72:	4b01      	ldr	r3, [pc, #4]	; (80a1a78 <_ZN9TimeClass6minuteEv+0x10>)
 80a1a74:	6858      	ldr	r0, [r3, #4]
 80a1a76:	bd08      	pop	{r3, pc}
 80a1a78:	200002c0 	.word	0x200002c0

080a1a7c <_ZN9TimeClass6secondEv>:
	return calendar_time_cache.tm_min;
}

/* current seconds */
int TimeClass::second()
{
 80a1a7c:	b508      	push	{r3, lr}
	return second(now());
 80a1a7e:	f7ff ffe1 	bl	80a1a44 <_ZN9TimeClass3nowEv>
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80a1a82:	f7ff ff7f 	bl	80a1984 <_ZL22Refresh_UnixTime_Cachel>

/* current seconds */
int TimeClass::second()
{
	return second(now());
}
 80a1a86:	4b01      	ldr	r3, [pc, #4]	; (80a1a8c <_ZN9TimeClass6secondEv+0x10>)
 80a1a88:	6818      	ldr	r0, [r3, #0]
 80a1a8a:	bd08      	pop	{r3, pc}
 80a1a8c:	200002c0 	.word	0x200002c0

080a1a90 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1a90:	4b02      	ldr	r3, [pc, #8]	; (80a1a9c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1a92:	681a      	ldr	r2, [r3, #0]
 80a1a94:	4b02      	ldr	r3, [pc, #8]	; (80a1aa0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1a96:	601a      	str	r2, [r3, #0]
 80a1a98:	4770      	bx	lr
 80a1a9a:	bf00      	nop
 80a1a9c:	200000d4 	.word	0x200000d4
 80a1aa0:	200002e4 	.word	0x200002e4

080a1aa4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a1aa4:	4770      	bx	lr

080a1aa6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1aa6:	7441      	strb	r1, [r0, #17]
 80a1aa8:	4770      	bx	lr

080a1aaa <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a1aaa:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a1aac:	7c00      	ldrb	r0, [r0, #16]
 80a1aae:	f7ff f835 	bl	80a0b1c <HAL_USART_Available_Data_For_Write>
}
 80a1ab2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1ab6:	bd08      	pop	{r3, pc}

080a1ab8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a1ab8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a1aba:	7c00      	ldrb	r0, [r0, #16]
 80a1abc:	f7ff f806 	bl	80a0acc <HAL_USART_Available_Data>
}
 80a1ac0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1ac4:	bd08      	pop	{r3, pc}

080a1ac6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a1ac6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a1ac8:	7c00      	ldrb	r0, [r0, #16]
 80a1aca:	f7ff f80f 	bl	80a0aec <HAL_USART_Peek_Data>
}
 80a1ace:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1ad2:	bf28      	it	cs
 80a1ad4:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1ad8:	bd08      	pop	{r3, pc}

080a1ada <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a1ada:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a1adc:	7c00      	ldrb	r0, [r0, #16]
 80a1ade:	f7fe fffd 	bl	80a0adc <HAL_USART_Read_Data>
}
 80a1ae2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1ae6:	bf28      	it	cs
 80a1ae8:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1aec:	bd08      	pop	{r3, pc}

080a1aee <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a1aee:	7c00      	ldrb	r0, [r0, #16]
 80a1af0:	f7ff b804 	b.w	80a0afc <HAL_USART_Flush_Data>

080a1af4 <_ZN11USARTSerialD0Ev>:
 80a1af4:	b510      	push	{r4, lr}
 80a1af6:	4604      	mov	r4, r0
 80a1af8:	2114      	movs	r1, #20
 80a1afa:	f000 fada 	bl	80a20b2 <_ZdlPvj>
 80a1afe:	4620      	mov	r0, r4
 80a1b00:	bd10      	pop	{r4, pc}

080a1b02 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1b02:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1b04:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a1b06:	4604      	mov	r4, r0
 80a1b08:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1b0a:	b925      	cbnz	r5, 80a1b16 <_ZN11USARTSerial5writeEh+0x14>
 80a1b0c:	7c00      	ldrb	r0, [r0, #16]
 80a1b0e:	f7ff f805 	bl	80a0b1c <HAL_USART_Available_Data_For_Write>
 80a1b12:	2800      	cmp	r0, #0
 80a1b14:	dd05      	ble.n	80a1b22 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1b16:	4631      	mov	r1, r6
 80a1b18:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a1b1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1b1e:	f7fe bfcd 	b.w	80a0abc <HAL_USART_Write_Data>
  }
  return 0;
}
 80a1b22:	4628      	mov	r0, r5
 80a1b24:	bd70      	pop	{r4, r5, r6, pc}
	...

080a1b28 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1b28:	b510      	push	{r4, lr}
 80a1b2a:	4604      	mov	r4, r0
 80a1b2c:	4608      	mov	r0, r1
 80a1b2e:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1b30:	2200      	movs	r2, #0
 80a1b32:	6062      	str	r2, [r4, #4]
 80a1b34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1b38:	60a2      	str	r2, [r4, #8]
 80a1b3a:	4a05      	ldr	r2, [pc, #20]	; (80a1b50 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a1b3c:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1b3e:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a1b40:	2201      	movs	r2, #1
 80a1b42:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a1b44:	461a      	mov	r2, r3
 80a1b46:	f7fe ffb1 	bl	80a0aac <HAL_USART_Init>
}
 80a1b4a:	4620      	mov	r0, r4
 80a1b4c:	bd10      	pop	{r4, pc}
 80a1b4e:	bf00      	nop
 80a1b50:	080a3de4 	.word	0x080a3de4

080a1b54 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a1b54:	7c00      	ldrb	r0, [r0, #16]
 80a1b56:	f7fe bfd9 	b.w	80a0b0c <HAL_USART_Is_Enabled>
	...

080a1b5c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a1b5c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a1b5e:	4d0c      	ldr	r5, [pc, #48]	; (80a1b90 <_Z22__fetch_global_Serial1v+0x34>)
 80a1b60:	6829      	ldr	r1, [r5, #0]
 80a1b62:	f011 0401 	ands.w	r4, r1, #1
 80a1b66:	d111      	bne.n	80a1b8c <_Z22__fetch_global_Serial1v+0x30>
 80a1b68:	4628      	mov	r0, r5
 80a1b6a:	f7fe fa9c 	bl	80a00a6 <__cxa_guard_acquire>
 80a1b6e:	b168      	cbz	r0, 80a1b8c <_Z22__fetch_global_Serial1v+0x30>
 80a1b70:	4a08      	ldr	r2, [pc, #32]	; (80a1b94 <_Z22__fetch_global_Serial1v+0x38>)
 80a1b72:	4621      	mov	r1, r4
 80a1b74:	4b08      	ldr	r3, [pc, #32]	; (80a1b98 <_Z22__fetch_global_Serial1v+0x3c>)
 80a1b76:	4809      	ldr	r0, [pc, #36]	; (80a1b9c <_Z22__fetch_global_Serial1v+0x40>)
 80a1b78:	f7ff ffd6 	bl	80a1b28 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a1b7c:	4628      	mov	r0, r5
 80a1b7e:	f7fe fa97 	bl	80a00b0 <__cxa_guard_release>
 80a1b82:	4a07      	ldr	r2, [pc, #28]	; (80a1ba0 <_Z22__fetch_global_Serial1v+0x44>)
 80a1b84:	4907      	ldr	r1, [pc, #28]	; (80a1ba4 <_Z22__fetch_global_Serial1v+0x48>)
 80a1b86:	4805      	ldr	r0, [pc, #20]	; (80a1b9c <_Z22__fetch_global_Serial1v+0x40>)
 80a1b88:	f000 fa8e 	bl	80a20a8 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a1b8c:	4803      	ldr	r0, [pc, #12]	; (80a1b9c <_Z22__fetch_global_Serial1v+0x40>)
 80a1b8e:	bd38      	pop	{r3, r4, r5, pc}
 80a1b90:	2000038c 	.word	0x2000038c
 80a1b94:	20000390 	.word	0x20000390
 80a1b98:	20000308 	.word	0x20000308
 80a1b9c:	200002f4 	.word	0x200002f4
 80a1ba0:	20000190 	.word	0x20000190
 80a1ba4:	080a1aa5 	.word	0x080a1aa5

080a1ba8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1ba8:	7441      	strb	r1, [r0, #17]
 80a1baa:	4770      	bx	lr

080a1bac <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a1bac:	4770      	bx	lr

080a1bae <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a1bae:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a1bb0:	2100      	movs	r1, #0
 80a1bb2:	7c00      	ldrb	r0, [r0, #16]
 80a1bb4:	f7fe ffda 	bl	80a0b6c <HAL_USB_USART_Receive_Data>
}
 80a1bb8:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1bbc:	bf28      	it	cs
 80a1bbe:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1bc2:	bd08      	pop	{r3, pc}

080a1bc4 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a1bc4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a1bc6:	2101      	movs	r1, #1
 80a1bc8:	7c00      	ldrb	r0, [r0, #16]
 80a1bca:	f7fe ffcf 	bl	80a0b6c <HAL_USB_USART_Receive_Data>
}
 80a1bce:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1bd2:	bf28      	it	cs
 80a1bd4:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1bd8:	bd08      	pop	{r3, pc}

080a1bda <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a1bda:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a1bdc:	7c00      	ldrb	r0, [r0, #16]
 80a1bde:	f7fe ffbd 	bl	80a0b5c <HAL_USB_USART_Available_Data_For_Write>
}
 80a1be2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1be6:	bd08      	pop	{r3, pc}

080a1be8 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a1be8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a1bea:	7c00      	ldrb	r0, [r0, #16]
 80a1bec:	f7fe ffae 	bl	80a0b4c <HAL_USB_USART_Available_Data>
}
 80a1bf0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1bf4:	bd08      	pop	{r3, pc}

080a1bf6 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a1bf6:	7c00      	ldrb	r0, [r0, #16]
 80a1bf8:	f7fe bfc8 	b.w	80a0b8c <HAL_USB_USART_Flush_Data>

080a1bfc <_ZN9USBSerialD0Ev>:
 80a1bfc:	b510      	push	{r4, lr}
 80a1bfe:	4604      	mov	r4, r0
 80a1c00:	2114      	movs	r1, #20
 80a1c02:	f000 fa56 	bl	80a20b2 <_ZdlPvj>
 80a1c06:	4620      	mov	r0, r4
 80a1c08:	bd10      	pop	{r4, pc}

080a1c0a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a1c0a:	b538      	push	{r3, r4, r5, lr}
 80a1c0c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1c0e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a1c10:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1c12:	f7fe ffa3 	bl	80a0b5c <HAL_USB_USART_Available_Data_For_Write>
 80a1c16:	2800      	cmp	r0, #0
 80a1c18:	dc01      	bgt.n	80a1c1e <_ZN9USBSerial5writeEh+0x14>
 80a1c1a:	7c60      	ldrb	r0, [r4, #17]
 80a1c1c:	b128      	cbz	r0, 80a1c2a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a1c1e:	4629      	mov	r1, r5
 80a1c20:	7c20      	ldrb	r0, [r4, #16]
 80a1c22:	f7fe ffab 	bl	80a0b7c <HAL_USB_USART_Send_Data>
 80a1c26:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a1c2a:	bd38      	pop	{r3, r4, r5, pc}

080a1c2c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1c2c:	b510      	push	{r4, lr}
 80a1c2e:	4604      	mov	r4, r0
 80a1c30:	2300      	movs	r3, #0
 80a1c32:	6063      	str	r3, [r4, #4]
 80a1c34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1c38:	60a3      	str	r3, [r4, #8]
 80a1c3a:	4b05      	ldr	r3, [pc, #20]	; (80a1c50 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a1c3c:	4608      	mov	r0, r1
 80a1c3e:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a1c40:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a1c42:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a1c44:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a1c46:	4611      	mov	r1, r2
 80a1c48:	f7fe ff70 	bl	80a0b2c <HAL_USB_USART_Init>
}
 80a1c4c:	4620      	mov	r0, r4
 80a1c4e:	bd10      	pop	{r4, pc}
 80a1c50:	080a3e14 	.word	0x080a3e14

080a1c54 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a1c54:	2200      	movs	r2, #0
 80a1c56:	7c00      	ldrb	r0, [r0, #16]
 80a1c58:	f7fe bf70 	b.w	80a0b3c <HAL_USB_USART_Begin>

080a1c5c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a1c5c:	b510      	push	{r4, lr}
 80a1c5e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1c60:	2214      	movs	r2, #20
 80a1c62:	2100      	movs	r1, #0
 80a1c64:	f001 fa53 	bl	80a310e <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1c68:	4b05      	ldr	r3, [pc, #20]	; (80a1c80 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1c6a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1c6c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a1c6e:	4b05      	ldr	r3, [pc, #20]	; (80a1c84 <_Z19acquireSerialBufferv+0x28>)
 80a1c70:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1c72:	f240 1301 	movw	r3, #257	; 0x101
 80a1c76:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1c78:	2381      	movs	r3, #129	; 0x81
 80a1c7a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1c7c:	bd10      	pop	{r4, pc}
 80a1c7e:	bf00      	nop
 80a1c80:	20000499 	.word	0x20000499
 80a1c84:	20000418 	.word	0x20000418

080a1c88 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a1c88:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1c8a:	4d0e      	ldr	r5, [pc, #56]	; (80a1cc4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a1c8c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a1c8e:	a801      	add	r0, sp, #4
 80a1c90:	f7ff ffe4 	bl	80a1c5c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1c94:	6829      	ldr	r1, [r5, #0]
 80a1c96:	f011 0401 	ands.w	r4, r1, #1
 80a1c9a:	d110      	bne.n	80a1cbe <_Z16_fetch_usbserialv+0x36>
 80a1c9c:	4628      	mov	r0, r5
 80a1c9e:	f7fe fa02 	bl	80a00a6 <__cxa_guard_acquire>
 80a1ca2:	b160      	cbz	r0, 80a1cbe <_Z16_fetch_usbserialv+0x36>
 80a1ca4:	aa01      	add	r2, sp, #4
 80a1ca6:	4621      	mov	r1, r4
 80a1ca8:	4807      	ldr	r0, [pc, #28]	; (80a1cc8 <_Z16_fetch_usbserialv+0x40>)
 80a1caa:	f7ff ffbf 	bl	80a1c2c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1cae:	4628      	mov	r0, r5
 80a1cb0:	f7fe f9fe 	bl	80a00b0 <__cxa_guard_release>
 80a1cb4:	4a05      	ldr	r2, [pc, #20]	; (80a1ccc <_Z16_fetch_usbserialv+0x44>)
 80a1cb6:	4906      	ldr	r1, [pc, #24]	; (80a1cd0 <_Z16_fetch_usbserialv+0x48>)
 80a1cb8:	4803      	ldr	r0, [pc, #12]	; (80a1cc8 <_Z16_fetch_usbserialv+0x40>)
 80a1cba:	f000 f9f5 	bl	80a20a8 <__aeabi_atexit>
	return _usbserial;
}
 80a1cbe:	4802      	ldr	r0, [pc, #8]	; (80a1cc8 <_Z16_fetch_usbserialv+0x40>)
 80a1cc0:	b007      	add	sp, #28
 80a1cc2:	bd30      	pop	{r4, r5, pc}
 80a1cc4:	20000414 	.word	0x20000414
 80a1cc8:	2000059c 	.word	0x2000059c
 80a1ccc:	20000190 	.word	0x20000190
 80a1cd0:	080a1bad 	.word	0x080a1bad

080a1cd4 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a1cd4:	b510      	push	{r4, lr}
 80a1cd6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1cd8:	2214      	movs	r2, #20
 80a1cda:	2100      	movs	r1, #0
 80a1cdc:	f001 fa17 	bl	80a310e <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1ce0:	4b05      	ldr	r3, [pc, #20]	; (80a1cf8 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1ce2:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1ce4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a1ce6:	4b05      	ldr	r3, [pc, #20]	; (80a1cfc <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a1ce8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1cea:	f240 1301 	movw	r3, #257	; 0x101
 80a1cee:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1cf0:	2381      	movs	r3, #129	; 0x81
 80a1cf2:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1cf4:	bd10      	pop	{r4, pc}
 80a1cf6:	bf00      	nop
 80a1cf8:	2000064c 	.word	0x2000064c
 80a1cfc:	200005b4 	.word	0x200005b4

080a1d00 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1d00:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1d02:	4c0e      	ldr	r4, [pc, #56]	; (80a1d3c <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a1d04:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a1d06:	a801      	add	r0, sp, #4
 80a1d08:	f7ff ffe4 	bl	80a1cd4 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1d0c:	6823      	ldr	r3, [r4, #0]
 80a1d0e:	07db      	lsls	r3, r3, #31
 80a1d10:	d410      	bmi.n	80a1d34 <_Z17_fetch_usbserial1v+0x34>
 80a1d12:	4620      	mov	r0, r4
 80a1d14:	f7fe f9c7 	bl	80a00a6 <__cxa_guard_acquire>
 80a1d18:	b160      	cbz	r0, 80a1d34 <_Z17_fetch_usbserial1v+0x34>
 80a1d1a:	aa01      	add	r2, sp, #4
 80a1d1c:	2101      	movs	r1, #1
 80a1d1e:	4808      	ldr	r0, [pc, #32]	; (80a1d40 <_Z17_fetch_usbserial1v+0x40>)
 80a1d20:	f7ff ff84 	bl	80a1c2c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1d24:	4620      	mov	r0, r4
 80a1d26:	f7fe f9c3 	bl	80a00b0 <__cxa_guard_release>
 80a1d2a:	4a06      	ldr	r2, [pc, #24]	; (80a1d44 <_Z17_fetch_usbserial1v+0x44>)
 80a1d2c:	4906      	ldr	r1, [pc, #24]	; (80a1d48 <_Z17_fetch_usbserial1v+0x48>)
 80a1d2e:	4804      	ldr	r0, [pc, #16]	; (80a1d40 <_Z17_fetch_usbserial1v+0x40>)
 80a1d30:	f000 f9ba 	bl	80a20a8 <__aeabi_atexit>
  return _usbserial1;
}
 80a1d34:	4802      	ldr	r0, [pc, #8]	; (80a1d40 <_Z17_fetch_usbserial1v+0x40>)
 80a1d36:	b006      	add	sp, #24
 80a1d38:	bd10      	pop	{r4, pc}
 80a1d3a:	bf00      	nop
 80a1d3c:	200005b0 	.word	0x200005b0
 80a1d40:	20000638 	.word	0x20000638
 80a1d44:	20000190 	.word	0x20000190
 80a1d48:	080a1bad 	.word	0x080a1bad

080a1d4c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a1d4c:	2200      	movs	r2, #0
 80a1d4e:	4611      	mov	r1, r2
 80a1d50:	6840      	ldr	r0, [r0, #4]
 80a1d52:	f7fe bfdf 	b.w	80a0d14 <network_ready>

080a1d56 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1d56:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1d58:	4616      	mov	r6, r2
 80a1d5a:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a1d5c:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1d5e:	460f      	mov	r7, r1
 80a1d60:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a1d62:	2100      	movs	r1, #0
 80a1d64:	a803      	add	r0, sp, #12
 80a1d66:	f001 f9d2 	bl	80a310e <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1d6a:	4630      	mov	r0, r6
 80a1d6c:	f001 fa2d 	bl	80a31ca <strlen>
 80a1d70:	2500      	movs	r5, #0
 80a1d72:	9500      	str	r5, [sp, #0]
 80a1d74:	b281      	uxth	r1, r0
 80a1d76:	687b      	ldr	r3, [r7, #4]
 80a1d78:	aa03      	add	r2, sp, #12
 80a1d7a:	4630      	mov	r0, r6
 80a1d7c:	f7fe ff0e 	bl	80a0b9c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1d80:	b120      	cbz	r0, 80a1d8c <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a1d82:	4629      	mov	r1, r5
 80a1d84:	4620      	mov	r0, r4
 80a1d86:	f7ff fbfd 	bl	80a1584 <_ZN9IPAddressC1Em>
 80a1d8a:	e003      	b.n	80a1d94 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a1d8c:	a903      	add	r1, sp, #12
 80a1d8e:	4620      	mov	r0, r4
 80a1d90:	f7ff fbe6 	bl	80a1560 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a1d94:	4620      	mov	r0, r4
 80a1d96:	b009      	add	sp, #36	; 0x24
 80a1d98:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1d9a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a1d9a:	2200      	movs	r2, #0
 80a1d9c:	4611      	mov	r1, r2
 80a1d9e:	6840      	ldr	r0, [r0, #4]
 80a1da0:	f7fe bfd8 	b.w	80a0d54 <network_listening>

080a1da4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a1da4:	2200      	movs	r2, #0
 80a1da6:	4611      	mov	r1, r2
 80a1da8:	6840      	ldr	r0, [r0, #4]
 80a1daa:	f7fe bfe3 	b.w	80a0d74 <network_get_listen_timeout>

080a1dae <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a1dae:	2200      	movs	r2, #0
 80a1db0:	6840      	ldr	r0, [r0, #4]
 80a1db2:	f7fe bfd7 	b.w	80a0d64 <network_set_listen_timeout>

080a1db6 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a1db6:	2200      	movs	r2, #0
 80a1db8:	f081 0101 	eor.w	r1, r1, #1
 80a1dbc:	6840      	ldr	r0, [r0, #4]
 80a1dbe:	f7fe bfc1 	b.w	80a0d44 <network_listen>

080a1dc2 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a1dc2:	2300      	movs	r3, #0
 80a1dc4:	461a      	mov	r2, r3
 80a1dc6:	4619      	mov	r1, r3
 80a1dc8:	6840      	ldr	r0, [r0, #4]
 80a1dca:	f7fe bfb3 	b.w	80a0d34 <network_off>

080a1dce <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a1dce:	2300      	movs	r3, #0
 80a1dd0:	461a      	mov	r2, r3
 80a1dd2:	4619      	mov	r1, r3
 80a1dd4:	6840      	ldr	r0, [r0, #4]
 80a1dd6:	f7fe bfa5 	b.w	80a0d24 <network_on>

080a1dda <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a1dda:	2200      	movs	r2, #0
 80a1ddc:	4611      	mov	r1, r2
 80a1dde:	6840      	ldr	r0, [r0, #4]
 80a1de0:	f7fe bf88 	b.w	80a0cf4 <network_connecting>

080a1de4 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a1de4:	2200      	movs	r2, #0
 80a1de6:	2102      	movs	r1, #2
 80a1de8:	6840      	ldr	r0, [r0, #4]
 80a1dea:	f7fe bf8b 	b.w	80a0d04 <network_disconnect>

080a1dee <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a1dee:	2300      	movs	r3, #0
 80a1df0:	461a      	mov	r2, r3
 80a1df2:	6840      	ldr	r0, [r0, #4]
 80a1df4:	f7fe bf76 	b.w	80a0ce4 <network_connect>

080a1df8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a1df8:	4b02      	ldr	r3, [pc, #8]	; (80a1e04 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a1dfa:	2204      	movs	r2, #4
 80a1dfc:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a1dfe:	4a02      	ldr	r2, [pc, #8]	; (80a1e08 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1e00:	601a      	str	r2, [r3, #0]
 80a1e02:	4770      	bx	lr
 80a1e04:	20000750 	.word	0x20000750
 80a1e08:	080a3e44 	.word	0x080a3e44

080a1e0c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a1e0c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a1e0e:	4b14      	ldr	r3, [pc, #80]	; (80a1e60 <serialEventRun+0x54>)
 80a1e10:	b133      	cbz	r3, 80a1e20 <serialEventRun+0x14>
 80a1e12:	f7ff ff39 	bl	80a1c88 <_Z16_fetch_usbserialv>
 80a1e16:	6803      	ldr	r3, [r0, #0]
 80a1e18:	691b      	ldr	r3, [r3, #16]
 80a1e1a:	4798      	blx	r3
 80a1e1c:	2800      	cmp	r0, #0
 80a1e1e:	dc16      	bgt.n	80a1e4e <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a1e20:	4b10      	ldr	r3, [pc, #64]	; (80a1e64 <serialEventRun+0x58>)
 80a1e22:	b133      	cbz	r3, 80a1e32 <serialEventRun+0x26>
 80a1e24:	f7ff fe9a 	bl	80a1b5c <_Z22__fetch_global_Serial1v>
 80a1e28:	6803      	ldr	r3, [r0, #0]
 80a1e2a:	691b      	ldr	r3, [r3, #16]
 80a1e2c:	4798      	blx	r3
 80a1e2e:	2800      	cmp	r0, #0
 80a1e30:	dc10      	bgt.n	80a1e54 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a1e32:	4b0d      	ldr	r3, [pc, #52]	; (80a1e68 <serialEventRun+0x5c>)
 80a1e34:	b10b      	cbz	r3, 80a1e3a <serialEventRun+0x2e>
 80a1e36:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1e3a:	4b0c      	ldr	r3, [pc, #48]	; (80a1e6c <serialEventRun+0x60>)
 80a1e3c:	b17b      	cbz	r3, 80a1e5e <serialEventRun+0x52>
 80a1e3e:	f7ff ff5f 	bl	80a1d00 <_Z17_fetch_usbserial1v>
 80a1e42:	6803      	ldr	r3, [r0, #0]
 80a1e44:	691b      	ldr	r3, [r3, #16]
 80a1e46:	4798      	blx	r3
 80a1e48:	2800      	cmp	r0, #0
 80a1e4a:	dc06      	bgt.n	80a1e5a <serialEventRun+0x4e>
 80a1e4c:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a1e4e:	f3af 8000 	nop.w
 80a1e52:	e7e5      	b.n	80a1e20 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a1e54:	f3af 8000 	nop.w
 80a1e58:	e7eb      	b.n	80a1e32 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a1e5a:	f3af 8000 	nop.w
 80a1e5e:	bd08      	pop	{r3, pc}
	...

080a1e70 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a1e70:	b508      	push	{r3, lr}
	serialEventRun();
 80a1e72:	f7ff ffcb 	bl	80a1e0c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1e76:	f7fe fd97 	bl	80a09a8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1e7a:	4b01      	ldr	r3, [pc, #4]	; (80a1e80 <_post_loop+0x10>)
 80a1e7c:	6018      	str	r0, [r3, #0]
 80a1e7e:	bd08      	pop	{r3, pc}
 80a1e80:	20000760 	.word	0x20000760

080a1e84 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1e84:	4802      	ldr	r0, [pc, #8]	; (80a1e90 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a1e86:	4a03      	ldr	r2, [pc, #12]	; (80a1e94 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1e88:	4903      	ldr	r1, [pc, #12]	; (80a1e98 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a1e8a:	1a12      	subs	r2, r2, r0
 80a1e8c:	f001 b934 	b.w	80a30f8 <memcpy>
 80a1e90:	40024000 	.word	0x40024000
 80a1e94:	40024004 	.word	0x40024004
 80a1e98:	080a40c0 	.word	0x080a40c0

080a1e9c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1e9c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1e9e:	2300      	movs	r3, #0
 80a1ea0:	9300      	str	r3, [sp, #0]
 80a1ea2:	461a      	mov	r2, r3
 80a1ea4:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1ea8:	f7fe fec2 	bl	80a0c30 <system_ctrl_set_result>
}
 80a1eac:	b003      	add	sp, #12
 80a1eae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a1eb4 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a1eb4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a1eb6:	8843      	ldrh	r3, [r0, #2]
 80a1eb8:	2b0a      	cmp	r3, #10
 80a1eba:	d008      	beq.n	80a1ece <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1ebc:	2b50      	cmp	r3, #80	; 0x50
 80a1ebe:	d109      	bne.n	80a1ed4 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a1ec0:	4b09      	ldr	r3, [pc, #36]	; (80a1ee8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a1ec2:	681b      	ldr	r3, [r3, #0]
 80a1ec4:	b13b      	cbz	r3, 80a1ed6 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a1ec6:	b003      	add	sp, #12
 80a1ec8:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a1ecc:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a1ece:	f7ff ffe5 	bl	80a1e9c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a1ed2:	e006      	b.n	80a1ee2 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1ed4:	2300      	movs	r3, #0
 80a1ed6:	9300      	str	r3, [sp, #0]
 80a1ed8:	461a      	mov	r2, r3
 80a1eda:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1ede:	f7fe fea7 	bl	80a0c30 <system_ctrl_set_result>
        break;
    }
}
 80a1ee2:	b003      	add	sp, #12
 80a1ee4:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1ee8:	20000758 	.word	0x20000758

080a1eec <module_user_init_hook>:

void module_user_init_hook()
{
 80a1eec:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1eee:	4c10      	ldr	r4, [pc, #64]	; (80a1f30 <module_user_init_hook+0x44>)
 80a1ef0:	4d10      	ldr	r5, [pc, #64]	; (80a1f34 <module_user_init_hook+0x48>)
 80a1ef2:	6823      	ldr	r3, [r4, #0]
 80a1ef4:	42ab      	cmp	r3, r5
 80a1ef6:	4b10      	ldr	r3, [pc, #64]	; (80a1f38 <module_user_init_hook+0x4c>)
 80a1ef8:	bf0c      	ite	eq
 80a1efa:	2201      	moveq	r2, #1
 80a1efc:	2200      	movne	r2, #0
 80a1efe:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1f00:	d002      	beq.n	80a1f08 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a1f02:	f7ff ffbf 	bl	80a1e84 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a1f06:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1f08:	f7fe fd46 	bl	80a0998 <HAL_RNG_GetRandomNumber>
 80a1f0c:	4604      	mov	r4, r0
    srand(seed);
 80a1f0e:	f001 f907 	bl	80a3120 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a1f12:	4b0a      	ldr	r3, [pc, #40]	; (80a1f3c <module_user_init_hook+0x50>)
 80a1f14:	b113      	cbz	r3, 80a1f1c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a1f16:	4620      	mov	r0, r4
 80a1f18:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a1f1c:	2100      	movs	r1, #0
 80a1f1e:	4807      	ldr	r0, [pc, #28]	; (80a1f3c <module_user_init_hook+0x50>)
 80a1f20:	f7fe fed8 	bl	80a0cd4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a1f24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a1f28:	2100      	movs	r1, #0
 80a1f2a:	4805      	ldr	r0, [pc, #20]	; (80a1f40 <module_user_init_hook+0x54>)
 80a1f2c:	f7fe be76 	b.w	80a0c1c <system_ctrl_set_app_request_handler>
 80a1f30:	40024000 	.word	0x40024000
 80a1f34:	9a271c1e 	.word	0x9a271c1e
 80a1f38:	2000075c 	.word	0x2000075c
 80a1f3c:	00000000 	.word	0x00000000
 80a1f40:	080a1eb5 	.word	0x080a1eb5

080a1f44 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a1f44:	b510      	push	{r4, lr}
 80a1f46:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a1f48:	f000 f88e 	bl	80a2068 <_ZN8particle7globals11instanceSpiEv>
 80a1f4c:	f7ff fc46 	bl	80a17dc <_ZN8SPIClass9isEnabledEv>
 80a1f50:	b128      	cbz	r0, 80a1f5e <pinAvailable+0x1a>
 80a1f52:	f1a4 030d 	sub.w	r3, r4, #13
 80a1f56:	2b02      	cmp	r3, #2
 80a1f58:	d801      	bhi.n	80a1f5e <pinAvailable+0x1a>
  {
    return 0; // 'pin' is used
 80a1f5a:	2000      	movs	r0, #0
 80a1f5c:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a1f5e:	f000 f845 	bl	80a1fec <_Z19__fetch_global_Wirev>
 80a1f62:	f7ff fac9 	bl	80a14f8 <_ZN7TwoWire9isEnabledEv>
 80a1f66:	b108      	cbz	r0, 80a1f6c <pinAvailable+0x28>
 80a1f68:	2c01      	cmp	r4, #1
 80a1f6a:	d9f6      	bls.n	80a1f5a <pinAvailable+0x16>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a1f6c:	f7ff fdf6 	bl	80a1b5c <_Z22__fetch_global_Serial1v>
 80a1f70:	f7ff fdf0 	bl	80a1b54 <_ZN11USARTSerial9isEnabledEv>
 80a1f74:	b118      	cbz	r0, 80a1f7e <pinAvailable+0x3a>
 80a1f76:	f1a4 0312 	sub.w	r3, r4, #18
 80a1f7a:	2b01      	cmp	r3, #1
 80a1f7c:	d9ed      	bls.n	80a1f5a <pinAvailable+0x16>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a1f7e:	2c17      	cmp	r4, #23
 80a1f80:	bf8c      	ite	hi
 80a1f82:	2000      	movhi	r0, #0
 80a1f84:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a1f86:	bd10      	pop	{r4, pc}

080a1f88 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a1f88:	b510      	push	{r4, lr}
 80a1f8a:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80a1f8c:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a1f8e:	bf9c      	itt	ls
 80a1f90:	340a      	addls	r4, #10
 80a1f92:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a1f94:	4620      	mov	r0, r4
 80a1f96:	f7ff ffd5 	bl	80a1f44 <pinAvailable>
 80a1f9a:	b150      	cbz	r0, 80a1fb2 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a1f9c:	2103      	movs	r1, #3
 80a1f9e:	4620      	mov	r0, r4
 80a1fa0:	f7fe fd2a 	bl	80a09f8 <HAL_Validate_Pin_Function>
 80a1fa4:	2803      	cmp	r0, #3
 80a1fa6:	d104      	bne.n	80a1fb2 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a1fa8:	4620      	mov	r0, r4
}
 80a1faa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a1fae:	f7fe bd2b 	b.w	80a0a08 <HAL_ADC_Read>
}
 80a1fb2:	2000      	movs	r0, #0
 80a1fb4:	bd10      	pop	{r4, pc}
	...

080a1fb8 <_Z17acquireWireBufferv>:
}

} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
 80a1fb8:	b570      	push	{r4, r5, r6, lr}
 80a1fba:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a1fbc:	2514      	movs	r5, #20
 80a1fbe:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1fc0:	4e09      	ldr	r6, [pc, #36]	; (80a1fe8 <_Z17acquireWireBufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a1fc2:	2100      	movs	r1, #0
 80a1fc4:	f001 f8a3 	bl	80a310e <memset>
 80a1fc8:	8025      	strh	r5, [r4, #0]
 80a1fca:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1fcc:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a1fce:	60a5      	str	r5, [r4, #8]
 80a1fd0:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1fd2:	4628      	mov	r0, r5
 80a1fd4:	f000 f887 	bl	80a20e6 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1fd8:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a1fda:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1fdc:	4628      	mov	r0, r5
 80a1fde:	f000 f882 	bl	80a20e6 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a1fe2:	60e0      	str	r0, [r4, #12]
} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
	return defaultWireConfig();
}
 80a1fe4:	4620      	mov	r0, r4
 80a1fe6:	bd70      	pop	{r4, r5, r6, pc}
 80a1fe8:	080a3e70 	.word	0x080a3e70

080a1fec <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a1fec:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a1fee:	4d0e      	ldr	r5, [pc, #56]	; (80a2028 <_Z19__fetch_global_Wirev+0x3c>)
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a1ff0:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a1ff2:	6829      	ldr	r1, [r5, #0]
 80a1ff4:	f011 0401 	ands.w	r4, r1, #1
 80a1ff8:	d113      	bne.n	80a2022 <_Z19__fetch_global_Wirev+0x36>
 80a1ffa:	4628      	mov	r0, r5
 80a1ffc:	f7fe f853 	bl	80a00a6 <__cxa_guard_acquire>
 80a2000:	b178      	cbz	r0, 80a2022 <_Z19__fetch_global_Wirev+0x36>
 80a2002:	a801      	add	r0, sp, #4
 80a2004:	f7ff ffd8 	bl	80a1fb8 <_Z17acquireWireBufferv>
 80a2008:	aa01      	add	r2, sp, #4
 80a200a:	4621      	mov	r1, r4
 80a200c:	4807      	ldr	r0, [pc, #28]	; (80a202c <_Z19__fetch_global_Wirev+0x40>)
 80a200e:	f7ff fa61 	bl	80a14d4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 80a2012:	4628      	mov	r0, r5
 80a2014:	f7fe f84c 	bl	80a00b0 <__cxa_guard_release>
 80a2018:	4a05      	ldr	r2, [pc, #20]	; (80a2030 <_Z19__fetch_global_Wirev+0x44>)
 80a201a:	4906      	ldr	r1, [pc, #24]	; (80a2034 <_Z19__fetch_global_Wirev+0x48>)
 80a201c:	4803      	ldr	r0, [pc, #12]	; (80a202c <_Z19__fetch_global_Wirev+0x40>)
 80a201e:	f000 f843 	bl	80a20a8 <__aeabi_atexit>
	return wire;
}
 80a2022:	4802      	ldr	r0, [pc, #8]	; (80a202c <_Z19__fetch_global_Wirev+0x40>)
 80a2024:	b007      	add	sp, #28
 80a2026:	bd30      	pop	{r4, r5, pc}
 80a2028:	20000764 	.word	0x20000764
 80a202c:	20000768 	.word	0x20000768
 80a2030:	20000190 	.word	0x20000190
 80a2034:	080a147d 	.word	0x080a147d

080a2038 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a2038:	b513      	push	{r0, r1, r4, lr}
 80a203a:	4c08      	ldr	r4, [pc, #32]	; (80a205c <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a203c:	2300      	movs	r3, #0
 80a203e:	461a      	mov	r2, r3
 80a2040:	4619      	mov	r1, r3
 80a2042:	9300      	str	r3, [sp, #0]
 80a2044:	4620      	mov	r0, r4
 80a2046:	f7ff fab3 	bl	80a15b0 <_ZN9IPAddressC1Ehhhh>
 80a204a:	4620      	mov	r0, r4
 80a204c:	4a04      	ldr	r2, [pc, #16]	; (80a2060 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a204e:	4905      	ldr	r1, [pc, #20]	; (80a2064 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a2050:	b002      	add	sp, #8
 80a2052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a2056:	f000 b827 	b.w	80a20a8 <__aeabi_atexit>
 80a205a:	bf00      	nop
 80a205c:	2000077c 	.word	0x2000077c
 80a2060:	20000190 	.word	0x20000190
 80a2064:	080a1501 	.word	0x080a1501

080a2068 <_ZN8particle7globals11instanceSpiEv>:
#ifndef SPARK_WIRING_NO_SPI

namespace particle {
namespace globals {

SPIClass& instanceSpi() {
 80a2068:	b538      	push	{r3, r4, r5, lr}
    static SPIClass instance(HAL_SPI_INTERFACE1);
 80a206a:	4d0b      	ldr	r5, [pc, #44]	; (80a2098 <_ZN8particle7globals11instanceSpiEv+0x30>)
 80a206c:	6829      	ldr	r1, [r5, #0]
 80a206e:	f011 0401 	ands.w	r4, r1, #1
 80a2072:	d10f      	bne.n	80a2094 <_ZN8particle7globals11instanceSpiEv+0x2c>
 80a2074:	4628      	mov	r0, r5
 80a2076:	f7fe f816 	bl	80a00a6 <__cxa_guard_acquire>
 80a207a:	b158      	cbz	r0, 80a2094 <_ZN8particle7globals11instanceSpiEv+0x2c>
 80a207c:	4621      	mov	r1, r4
 80a207e:	4807      	ldr	r0, [pc, #28]	; (80a209c <_ZN8particle7globals11instanceSpiEv+0x34>)
 80a2080:	f7ff fb98 	bl	80a17b4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2084:	4628      	mov	r0, r5
 80a2086:	f7fe f813 	bl	80a00b0 <__cxa_guard_release>
 80a208a:	4a05      	ldr	r2, [pc, #20]	; (80a20a0 <_ZN8particle7globals11instanceSpiEv+0x38>)
 80a208c:	4905      	ldr	r1, [pc, #20]	; (80a20a4 <_ZN8particle7globals11instanceSpiEv+0x3c>)
 80a208e:	4803      	ldr	r0, [pc, #12]	; (80a209c <_ZN8particle7globals11instanceSpiEv+0x34>)
 80a2090:	f000 f80a 	bl	80a20a8 <__aeabi_atexit>
    return instance;
}
 80a2094:	4801      	ldr	r0, [pc, #4]	; (80a209c <_ZN8particle7globals11instanceSpiEv+0x34>)
 80a2096:	bd38      	pop	{r3, r4, r5, pc}
 80a2098:	200007a4 	.word	0x200007a4
 80a209c:	20000794 	.word	0x20000794
 80a20a0:	20000190 	.word	0x20000190
 80a20a4:	080a1789 	.word	0x080a1789

080a20a8 <__aeabi_atexit>:
 80a20a8:	460b      	mov	r3, r1
 80a20aa:	4601      	mov	r1, r0
 80a20ac:	4618      	mov	r0, r3
 80a20ae:	f000 bf1d 	b.w	80a2eec <__cxa_atexit>

080a20b2 <_ZdlPvj>:
 80a20b2:	f7fd bff6 	b.w	80a00a2 <_ZdlPv>
	...

080a20b8 <_ZSt15get_new_handlerv>:
 80a20b8:	4b02      	ldr	r3, [pc, #8]	; (80a20c4 <_ZSt15get_new_handlerv+0xc>)
 80a20ba:	6818      	ldr	r0, [r3, #0]
 80a20bc:	f3bf 8f5f 	dmb	sy
 80a20c0:	4770      	bx	lr
 80a20c2:	bf00      	nop
 80a20c4:	200007a8 	.word	0x200007a8

080a20c8 <_ZnwjRKSt9nothrow_t>:
 80a20c8:	b510      	push	{r4, lr}
 80a20ca:	2800      	cmp	r0, #0
 80a20cc:	bf14      	ite	ne
 80a20ce:	4604      	movne	r4, r0
 80a20d0:	2401      	moveq	r4, #1
 80a20d2:	4620      	mov	r0, r4
 80a20d4:	f7fe fe56 	bl	80a0d84 <malloc>
 80a20d8:	b920      	cbnz	r0, 80a20e4 <_ZnwjRKSt9nothrow_t+0x1c>
 80a20da:	f7ff ffed 	bl	80a20b8 <_ZSt15get_new_handlerv>
 80a20de:	b108      	cbz	r0, 80a20e4 <_ZnwjRKSt9nothrow_t+0x1c>
 80a20e0:	4780      	blx	r0
 80a20e2:	e7f6      	b.n	80a20d2 <_ZnwjRKSt9nothrow_t+0xa>
 80a20e4:	bd10      	pop	{r4, pc}

080a20e6 <_ZnajRKSt9nothrow_t>:
 80a20e6:	f7ff bfef 	b.w	80a20c8 <_ZnwjRKSt9nothrow_t>

080a20ea <_ZSt25__throw_bad_function_callv>:
 80a20ea:	b508      	push	{r3, lr}
 80a20ec:	f7fe fe72 	bl	80a0dd4 <abort>

080a20f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a20f0:	4b24      	ldr	r3, [pc, #144]	; (80a2184 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a20f2:	681a      	ldr	r2, [r3, #0]
 80a20f4:	07d0      	lsls	r0, r2, #31
 80a20f6:	bf5c      	itt	pl
 80a20f8:	2201      	movpl	r2, #1
 80a20fa:	601a      	strpl	r2, [r3, #0]
 80a20fc:	4b22      	ldr	r3, [pc, #136]	; (80a2188 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a20fe:	681a      	ldr	r2, [r3, #0]
 80a2100:	07d1      	lsls	r1, r2, #31
 80a2102:	bf5c      	itt	pl
 80a2104:	2201      	movpl	r2, #1
 80a2106:	601a      	strpl	r2, [r3, #0]
 80a2108:	4b20      	ldr	r3, [pc, #128]	; (80a218c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a210a:	681a      	ldr	r2, [r3, #0]
 80a210c:	07d2      	lsls	r2, r2, #31
 80a210e:	bf5c      	itt	pl
 80a2110:	2201      	movpl	r2, #1
 80a2112:	601a      	strpl	r2, [r3, #0]
 80a2114:	4b1e      	ldr	r3, [pc, #120]	; (80a2190 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a2116:	681a      	ldr	r2, [r3, #0]
 80a2118:	07d0      	lsls	r0, r2, #31
 80a211a:	bf5c      	itt	pl
 80a211c:	2201      	movpl	r2, #1
 80a211e:	601a      	strpl	r2, [r3, #0]
 80a2120:	4b1c      	ldr	r3, [pc, #112]	; (80a2194 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a2122:	681a      	ldr	r2, [r3, #0]
 80a2124:	07d1      	lsls	r1, r2, #31
 80a2126:	bf5c      	itt	pl
 80a2128:	2201      	movpl	r2, #1
 80a212a:	601a      	strpl	r2, [r3, #0]
 80a212c:	4b1a      	ldr	r3, [pc, #104]	; (80a2198 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a212e:	681a      	ldr	r2, [r3, #0]
 80a2130:	07d2      	lsls	r2, r2, #31
 80a2132:	bf5c      	itt	pl
 80a2134:	2201      	movpl	r2, #1
 80a2136:	601a      	strpl	r2, [r3, #0]
 80a2138:	4b18      	ldr	r3, [pc, #96]	; (80a219c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a213a:	681a      	ldr	r2, [r3, #0]
 80a213c:	07d0      	lsls	r0, r2, #31
 80a213e:	bf5c      	itt	pl
 80a2140:	2201      	movpl	r2, #1
 80a2142:	601a      	strpl	r2, [r3, #0]
 80a2144:	4b16      	ldr	r3, [pc, #88]	; (80a21a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a2146:	681a      	ldr	r2, [r3, #0]
 80a2148:	07d1      	lsls	r1, r2, #31
 80a214a:	bf5c      	itt	pl
 80a214c:	2201      	movpl	r2, #1
 80a214e:	601a      	strpl	r2, [r3, #0]
 80a2150:	4b14      	ldr	r3, [pc, #80]	; (80a21a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a2152:	681a      	ldr	r2, [r3, #0]
 80a2154:	07d2      	lsls	r2, r2, #31
 80a2156:	bf5c      	itt	pl
 80a2158:	2201      	movpl	r2, #1
 80a215a:	601a      	strpl	r2, [r3, #0]
 80a215c:	4b12      	ldr	r3, [pc, #72]	; (80a21a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a215e:	681a      	ldr	r2, [r3, #0]
 80a2160:	07d0      	lsls	r0, r2, #31
 80a2162:	bf5c      	itt	pl
 80a2164:	2201      	movpl	r2, #1
 80a2166:	601a      	strpl	r2, [r3, #0]
 80a2168:	4b10      	ldr	r3, [pc, #64]	; (80a21ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a216a:	681a      	ldr	r2, [r3, #0]
 80a216c:	07d1      	lsls	r1, r2, #31
 80a216e:	bf5c      	itt	pl
 80a2170:	2201      	movpl	r2, #1
 80a2172:	601a      	strpl	r2, [r3, #0]
 80a2174:	4b0e      	ldr	r3, [pc, #56]	; (80a21b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a2176:	681a      	ldr	r2, [r3, #0]
 80a2178:	07d2      	lsls	r2, r2, #31
 80a217a:	bf5c      	itt	pl
 80a217c:	2201      	movpl	r2, #1
 80a217e:	601a      	strpl	r2, [r3, #0]
 80a2180:	4770      	bx	lr
 80a2182:	bf00      	nop
 80a2184:	200007d8 	.word	0x200007d8
 80a2188:	200007d4 	.word	0x200007d4
 80a218c:	200007d0 	.word	0x200007d0
 80a2190:	200007cc 	.word	0x200007cc
 80a2194:	200007c8 	.word	0x200007c8
 80a2198:	200007c4 	.word	0x200007c4
 80a219c:	200007c0 	.word	0x200007c0
 80a21a0:	200007bc 	.word	0x200007bc
 80a21a4:	200007b8 	.word	0x200007b8
 80a21a8:	200007b4 	.word	0x200007b4
 80a21ac:	200007b0 	.word	0x200007b0
 80a21b0:	200007ac 	.word	0x200007ac

080a21b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a21b4:	4b18      	ldr	r3, [pc, #96]	; (80a2218 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a21b6:	681a      	ldr	r2, [r3, #0]
 80a21b8:	07d1      	lsls	r1, r2, #31
 80a21ba:	bf5c      	itt	pl
 80a21bc:	2201      	movpl	r2, #1
 80a21be:	601a      	strpl	r2, [r3, #0]
 80a21c0:	4b16      	ldr	r3, [pc, #88]	; (80a221c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a21c2:	681a      	ldr	r2, [r3, #0]
 80a21c4:	07d2      	lsls	r2, r2, #31
 80a21c6:	bf5c      	itt	pl
 80a21c8:	2201      	movpl	r2, #1
 80a21ca:	601a      	strpl	r2, [r3, #0]
 80a21cc:	4b14      	ldr	r3, [pc, #80]	; (80a2220 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a21ce:	681a      	ldr	r2, [r3, #0]
 80a21d0:	07d0      	lsls	r0, r2, #31
 80a21d2:	bf5c      	itt	pl
 80a21d4:	2201      	movpl	r2, #1
 80a21d6:	601a      	strpl	r2, [r3, #0]
 80a21d8:	4b12      	ldr	r3, [pc, #72]	; (80a2224 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a21da:	681a      	ldr	r2, [r3, #0]
 80a21dc:	07d1      	lsls	r1, r2, #31
 80a21de:	bf5c      	itt	pl
 80a21e0:	2201      	movpl	r2, #1
 80a21e2:	601a      	strpl	r2, [r3, #0]
 80a21e4:	4b10      	ldr	r3, [pc, #64]	; (80a2228 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a21e6:	681a      	ldr	r2, [r3, #0]
 80a21e8:	07d2      	lsls	r2, r2, #31
 80a21ea:	bf5c      	itt	pl
 80a21ec:	2201      	movpl	r2, #1
 80a21ee:	601a      	strpl	r2, [r3, #0]
 80a21f0:	4b0e      	ldr	r3, [pc, #56]	; (80a222c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a21f2:	681a      	ldr	r2, [r3, #0]
 80a21f4:	07d0      	lsls	r0, r2, #31
 80a21f6:	bf5c      	itt	pl
 80a21f8:	2201      	movpl	r2, #1
 80a21fa:	601a      	strpl	r2, [r3, #0]
 80a21fc:	4b0c      	ldr	r3, [pc, #48]	; (80a2230 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a21fe:	681a      	ldr	r2, [r3, #0]
 80a2200:	07d1      	lsls	r1, r2, #31
 80a2202:	bf5c      	itt	pl
 80a2204:	2201      	movpl	r2, #1
 80a2206:	601a      	strpl	r2, [r3, #0]
 80a2208:	4b0a      	ldr	r3, [pc, #40]	; (80a2234 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a220a:	681a      	ldr	r2, [r3, #0]
 80a220c:	07d2      	lsls	r2, r2, #31
 80a220e:	bf5c      	itt	pl
 80a2210:	2201      	movpl	r2, #1
 80a2212:	601a      	strpl	r2, [r3, #0]
 80a2214:	4770      	bx	lr
 80a2216:	bf00      	nop
 80a2218:	200007f8 	.word	0x200007f8
 80a221c:	200007f4 	.word	0x200007f4
 80a2220:	200007f0 	.word	0x200007f0
 80a2224:	200007ec 	.word	0x200007ec
 80a2228:	200007e8 	.word	0x200007e8
 80a222c:	200007e4 	.word	0x200007e4
 80a2230:	200007e0 	.word	0x200007e0
 80a2234:	200007dc 	.word	0x200007dc

080a2238 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2238:	4b18      	ldr	r3, [pc, #96]	; (80a229c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a223a:	681a      	ldr	r2, [r3, #0]
 80a223c:	07d1      	lsls	r1, r2, #31
 80a223e:	bf5c      	itt	pl
 80a2240:	2201      	movpl	r2, #1
 80a2242:	601a      	strpl	r2, [r3, #0]
 80a2244:	4b16      	ldr	r3, [pc, #88]	; (80a22a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2246:	681a      	ldr	r2, [r3, #0]
 80a2248:	07d2      	lsls	r2, r2, #31
 80a224a:	bf5c      	itt	pl
 80a224c:	2201      	movpl	r2, #1
 80a224e:	601a      	strpl	r2, [r3, #0]
 80a2250:	4b14      	ldr	r3, [pc, #80]	; (80a22a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2252:	681a      	ldr	r2, [r3, #0]
 80a2254:	07d0      	lsls	r0, r2, #31
 80a2256:	bf5c      	itt	pl
 80a2258:	2201      	movpl	r2, #1
 80a225a:	601a      	strpl	r2, [r3, #0]
 80a225c:	4b12      	ldr	r3, [pc, #72]	; (80a22a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a225e:	681a      	ldr	r2, [r3, #0]
 80a2260:	07d1      	lsls	r1, r2, #31
 80a2262:	bf5c      	itt	pl
 80a2264:	2201      	movpl	r2, #1
 80a2266:	601a      	strpl	r2, [r3, #0]
 80a2268:	4b10      	ldr	r3, [pc, #64]	; (80a22ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a226a:	681a      	ldr	r2, [r3, #0]
 80a226c:	07d2      	lsls	r2, r2, #31
 80a226e:	bf5c      	itt	pl
 80a2270:	2201      	movpl	r2, #1
 80a2272:	601a      	strpl	r2, [r3, #0]
 80a2274:	4b0e      	ldr	r3, [pc, #56]	; (80a22b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2276:	681a      	ldr	r2, [r3, #0]
 80a2278:	07d0      	lsls	r0, r2, #31
 80a227a:	bf5c      	itt	pl
 80a227c:	2201      	movpl	r2, #1
 80a227e:	601a      	strpl	r2, [r3, #0]
 80a2280:	4b0c      	ldr	r3, [pc, #48]	; (80a22b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2282:	681a      	ldr	r2, [r3, #0]
 80a2284:	07d1      	lsls	r1, r2, #31
 80a2286:	bf5c      	itt	pl
 80a2288:	2201      	movpl	r2, #1
 80a228a:	601a      	strpl	r2, [r3, #0]
 80a228c:	4b0a      	ldr	r3, [pc, #40]	; (80a22b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a228e:	681a      	ldr	r2, [r3, #0]
 80a2290:	07d2      	lsls	r2, r2, #31
 80a2292:	bf5c      	itt	pl
 80a2294:	2201      	movpl	r2, #1
 80a2296:	601a      	strpl	r2, [r3, #0]
 80a2298:	4770      	bx	lr
 80a229a:	bf00      	nop
 80a229c:	20000818 	.word	0x20000818
 80a22a0:	20000814 	.word	0x20000814
 80a22a4:	20000810 	.word	0x20000810
 80a22a8:	2000080c 	.word	0x2000080c
 80a22ac:	20000808 	.word	0x20000808
 80a22b0:	20000804 	.word	0x20000804
 80a22b4:	20000800 	.word	0x20000800
 80a22b8:	200007fc 	.word	0x200007fc

080a22bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a22bc:	4b24      	ldr	r3, [pc, #144]	; (80a2350 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a22be:	681a      	ldr	r2, [r3, #0]
 80a22c0:	07d0      	lsls	r0, r2, #31
 80a22c2:	bf5c      	itt	pl
 80a22c4:	2201      	movpl	r2, #1
 80a22c6:	601a      	strpl	r2, [r3, #0]
 80a22c8:	4b22      	ldr	r3, [pc, #136]	; (80a2354 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a22ca:	681a      	ldr	r2, [r3, #0]
 80a22cc:	07d1      	lsls	r1, r2, #31
 80a22ce:	bf5c      	itt	pl
 80a22d0:	2201      	movpl	r2, #1
 80a22d2:	601a      	strpl	r2, [r3, #0]
 80a22d4:	4b20      	ldr	r3, [pc, #128]	; (80a2358 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a22d6:	681a      	ldr	r2, [r3, #0]
 80a22d8:	07d2      	lsls	r2, r2, #31
 80a22da:	bf5c      	itt	pl
 80a22dc:	2201      	movpl	r2, #1
 80a22de:	601a      	strpl	r2, [r3, #0]
 80a22e0:	4b1e      	ldr	r3, [pc, #120]	; (80a235c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a22e2:	681a      	ldr	r2, [r3, #0]
 80a22e4:	07d0      	lsls	r0, r2, #31
 80a22e6:	bf5c      	itt	pl
 80a22e8:	2201      	movpl	r2, #1
 80a22ea:	601a      	strpl	r2, [r3, #0]
 80a22ec:	4b1c      	ldr	r3, [pc, #112]	; (80a2360 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a22ee:	681a      	ldr	r2, [r3, #0]
 80a22f0:	07d1      	lsls	r1, r2, #31
 80a22f2:	bf5c      	itt	pl
 80a22f4:	2201      	movpl	r2, #1
 80a22f6:	601a      	strpl	r2, [r3, #0]
 80a22f8:	4b1a      	ldr	r3, [pc, #104]	; (80a2364 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a22fa:	681a      	ldr	r2, [r3, #0]
 80a22fc:	07d2      	lsls	r2, r2, #31
 80a22fe:	bf5c      	itt	pl
 80a2300:	2201      	movpl	r2, #1
 80a2302:	601a      	strpl	r2, [r3, #0]
 80a2304:	4b18      	ldr	r3, [pc, #96]	; (80a2368 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a2306:	681a      	ldr	r2, [r3, #0]
 80a2308:	07d0      	lsls	r0, r2, #31
 80a230a:	bf5c      	itt	pl
 80a230c:	2201      	movpl	r2, #1
 80a230e:	601a      	strpl	r2, [r3, #0]
 80a2310:	4b16      	ldr	r3, [pc, #88]	; (80a236c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a2312:	681a      	ldr	r2, [r3, #0]
 80a2314:	07d1      	lsls	r1, r2, #31
 80a2316:	bf5c      	itt	pl
 80a2318:	2201      	movpl	r2, #1
 80a231a:	601a      	strpl	r2, [r3, #0]
 80a231c:	4b14      	ldr	r3, [pc, #80]	; (80a2370 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a231e:	681a      	ldr	r2, [r3, #0]
 80a2320:	07d2      	lsls	r2, r2, #31
 80a2322:	bf5c      	itt	pl
 80a2324:	2201      	movpl	r2, #1
 80a2326:	601a      	strpl	r2, [r3, #0]
 80a2328:	4b12      	ldr	r3, [pc, #72]	; (80a2374 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a232a:	681a      	ldr	r2, [r3, #0]
 80a232c:	07d0      	lsls	r0, r2, #31
 80a232e:	bf5c      	itt	pl
 80a2330:	2201      	movpl	r2, #1
 80a2332:	601a      	strpl	r2, [r3, #0]
 80a2334:	4b10      	ldr	r3, [pc, #64]	; (80a2378 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a2336:	681a      	ldr	r2, [r3, #0]
 80a2338:	07d1      	lsls	r1, r2, #31
 80a233a:	bf5c      	itt	pl
 80a233c:	2201      	movpl	r2, #1
 80a233e:	601a      	strpl	r2, [r3, #0]
 80a2340:	4b0e      	ldr	r3, [pc, #56]	; (80a237c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a2342:	681a      	ldr	r2, [r3, #0]
 80a2344:	07d2      	lsls	r2, r2, #31
 80a2346:	bf5c      	itt	pl
 80a2348:	2201      	movpl	r2, #1
 80a234a:	601a      	strpl	r2, [r3, #0]
 80a234c:	4770      	bx	lr
 80a234e:	bf00      	nop
 80a2350:	20000848 	.word	0x20000848
 80a2354:	20000844 	.word	0x20000844
 80a2358:	20000840 	.word	0x20000840
 80a235c:	2000083c 	.word	0x2000083c
 80a2360:	20000838 	.word	0x20000838
 80a2364:	20000834 	.word	0x20000834
 80a2368:	20000830 	.word	0x20000830
 80a236c:	2000082c 	.word	0x2000082c
 80a2370:	20000828 	.word	0x20000828
 80a2374:	20000824 	.word	0x20000824
 80a2378:	20000820 	.word	0x20000820
 80a237c:	2000081c 	.word	0x2000081c

080a2380 <sqrt>:
 80a2380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2384:	b08b      	sub	sp, #44	; 0x2c
 80a2386:	4604      	mov	r4, r0
 80a2388:	460d      	mov	r5, r1
 80a238a:	f000 f855 	bl	80a2438 <__ieee754_sqrt>
 80a238e:	4b28      	ldr	r3, [pc, #160]	; (80a2430 <sqrt+0xb0>)
 80a2390:	4606      	mov	r6, r0
 80a2392:	f993 a000 	ldrsb.w	sl, [r3]
 80a2396:	460f      	mov	r7, r1
 80a2398:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80a239c:	d012      	beq.n	80a23c4 <sqrt+0x44>
 80a239e:	4622      	mov	r2, r4
 80a23a0:	462b      	mov	r3, r5
 80a23a2:	4620      	mov	r0, r4
 80a23a4:	4629      	mov	r1, r5
 80a23a6:	f000 fd5f 	bl	80a2e68 <__aeabi_dcmpun>
 80a23aa:	4683      	mov	fp, r0
 80a23ac:	b950      	cbnz	r0, 80a23c4 <sqrt+0x44>
 80a23ae:	f04f 0800 	mov.w	r8, #0
 80a23b2:	f04f 0900 	mov.w	r9, #0
 80a23b6:	4620      	mov	r0, r4
 80a23b8:	4629      	mov	r1, r5
 80a23ba:	4642      	mov	r2, r8
 80a23bc:	464b      	mov	r3, r9
 80a23be:	f000 fd2b 	bl	80a2e18 <__aeabi_dcmplt>
 80a23c2:	b920      	cbnz	r0, 80a23ce <sqrt+0x4e>
 80a23c4:	4630      	mov	r0, r6
 80a23c6:	4639      	mov	r1, r7
 80a23c8:	b00b      	add	sp, #44	; 0x2c
 80a23ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a23ce:	4a19      	ldr	r2, [pc, #100]	; (80a2434 <sqrt+0xb4>)
 80a23d0:	2301      	movs	r3, #1
 80a23d2:	f8cd b020 	str.w	fp, [sp, #32]
 80a23d6:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80a23da:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80a23de:	9201      	str	r2, [sp, #4]
 80a23e0:	9300      	str	r3, [sp, #0]
 80a23e2:	f1ba 0f00 	cmp.w	sl, #0
 80a23e6:	d015      	beq.n	80a2414 <sqrt+0x94>
 80a23e8:	4642      	mov	r2, r8
 80a23ea:	464b      	mov	r3, r9
 80a23ec:	4640      	mov	r0, r8
 80a23ee:	4649      	mov	r1, r9
 80a23f0:	f000 fbca 	bl	80a2b88 <__aeabi_ddiv>
 80a23f4:	f1ba 0f02 	cmp.w	sl, #2
 80a23f8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a23fc:	d10c      	bne.n	80a2418 <sqrt+0x98>
 80a23fe:	f7fe fcf9 	bl	80a0df4 <__errno>
 80a2402:	2321      	movs	r3, #33	; 0x21
 80a2404:	6003      	str	r3, [r0, #0]
 80a2406:	9b08      	ldr	r3, [sp, #32]
 80a2408:	b963      	cbnz	r3, 80a2424 <sqrt+0xa4>
 80a240a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a240e:	b00b      	add	sp, #44	; 0x2c
 80a2410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2414:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80a2418:	4668      	mov	r0, sp
 80a241a:	f000 f8d1 	bl	80a25c0 <matherr>
 80a241e:	2800      	cmp	r0, #0
 80a2420:	d1f1      	bne.n	80a2406 <sqrt+0x86>
 80a2422:	e7ec      	b.n	80a23fe <sqrt+0x7e>
 80a2424:	f7fe fce6 	bl	80a0df4 <__errno>
 80a2428:	9b08      	ldr	r3, [sp, #32]
 80a242a:	6003      	str	r3, [r0, #0]
 80a242c:	e7ed      	b.n	80a240a <sqrt+0x8a>
 80a242e:	bf00      	nop
 80a2430:	200000d8 	.word	0x200000d8
 80a2434:	080a3e74 	.word	0x080a3e74

080a2438 <__ieee754_sqrt>:
 80a2438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a243c:	4e5f      	ldr	r6, [pc, #380]	; (80a25bc <__ieee754_sqrt+0x184>)
 80a243e:	460c      	mov	r4, r1
 80a2440:	46b6      	mov	lr, r6
 80a2442:	400e      	ands	r6, r1
 80a2444:	4576      	cmp	r6, lr
 80a2446:	4605      	mov	r5, r0
 80a2448:	f000 8098 	beq.w	80a257c <__ieee754_sqrt+0x144>
 80a244c:	2900      	cmp	r1, #0
 80a244e:	460b      	mov	r3, r1
 80a2450:	4602      	mov	r2, r0
 80a2452:	dd74      	ble.n	80a253e <__ieee754_sqrt+0x106>
 80a2454:	ea5f 5e21 	movs.w	lr, r1, asr #20
 80a2458:	d07f      	beq.n	80a255a <__ieee754_sqrt+0x122>
 80a245a:	f2ae 3eff 	subw	lr, lr, #1023	; 0x3ff
 80a245e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a2462:	f01e 0f01 	tst.w	lr, #1
 80a2466:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a246a:	d163      	bne.n	80a2534 <__ieee754_sqrt+0xfc>
 80a246c:	2700      	movs	r7, #0
 80a246e:	463e      	mov	r6, r7
 80a2470:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
 80a2474:	440b      	add	r3, r1
 80a2476:	ea4f 0e6e 	mov.w	lr, lr, asr #1
 80a247a:	0052      	lsls	r2, r2, #1
 80a247c:	2016      	movs	r0, #22
 80a247e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80a2482:	1874      	adds	r4, r6, r1
 80a2484:	429c      	cmp	r4, r3
 80a2486:	ea4f 75d2 	mov.w	r5, r2, lsr #31
 80a248a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80a248e:	dc02      	bgt.n	80a2496 <__ieee754_sqrt+0x5e>
 80a2490:	1b1b      	subs	r3, r3, r4
 80a2492:	1866      	adds	r6, r4, r1
 80a2494:	440f      	add	r7, r1
 80a2496:	3801      	subs	r0, #1
 80a2498:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80a249c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80a24a0:	d1ef      	bne.n	80a2482 <__ieee754_sqrt+0x4a>
 80a24a2:	4684      	mov	ip, r0
 80a24a4:	2420      	movs	r4, #32
 80a24a6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80a24aa:	e009      	b.n	80a24c0 <__ieee754_sqrt+0x88>
 80a24ac:	d020      	beq.n	80a24f0 <__ieee754_sqrt+0xb8>
 80a24ae:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
 80a24b2:	3c01      	subs	r4, #1
 80a24b4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80a24b8:	442b      	add	r3, r5
 80a24ba:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80a24be:	d020      	beq.n	80a2502 <__ieee754_sqrt+0xca>
 80a24c0:	429e      	cmp	r6, r3
 80a24c2:	eb01 050c 	add.w	r5, r1, ip
 80a24c6:	daf1      	bge.n	80a24ac <__ieee754_sqrt+0x74>
 80a24c8:	2d00      	cmp	r5, #0
 80a24ca:	eb05 0c01 	add.w	ip, r5, r1
 80a24ce:	db09      	blt.n	80a24e4 <__ieee754_sqrt+0xac>
 80a24d0:	46b0      	mov	r8, r6
 80a24d2:	4295      	cmp	r5, r2
 80a24d4:	eba3 0306 	sub.w	r3, r3, r6
 80a24d8:	d900      	bls.n	80a24dc <__ieee754_sqrt+0xa4>
 80a24da:	3b01      	subs	r3, #1
 80a24dc:	4646      	mov	r6, r8
 80a24de:	1b52      	subs	r2, r2, r5
 80a24e0:	4408      	add	r0, r1
 80a24e2:	e7e4      	b.n	80a24ae <__ieee754_sqrt+0x76>
 80a24e4:	f1bc 0f00 	cmp.w	ip, #0
 80a24e8:	dbf2      	blt.n	80a24d0 <__ieee754_sqrt+0x98>
 80a24ea:	f106 0801 	add.w	r8, r6, #1
 80a24ee:	e7f0      	b.n	80a24d2 <__ieee754_sqrt+0x9a>
 80a24f0:	4295      	cmp	r5, r2
 80a24f2:	d817      	bhi.n	80a2524 <__ieee754_sqrt+0xec>
 80a24f4:	2d00      	cmp	r5, #0
 80a24f6:	eb05 0c01 	add.w	ip, r5, r1
 80a24fa:	db49      	blt.n	80a2590 <__ieee754_sqrt+0x158>
 80a24fc:	4698      	mov	r8, r3
 80a24fe:	2300      	movs	r3, #0
 80a2500:	e7ec      	b.n	80a24dc <__ieee754_sqrt+0xa4>
 80a2502:	4313      	orrs	r3, r2
 80a2504:	d110      	bne.n	80a2528 <__ieee754_sqrt+0xf0>
 80a2506:	0840      	lsrs	r0, r0, #1
 80a2508:	107b      	asrs	r3, r7, #1
 80a250a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80a250e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80a2512:	07fa      	lsls	r2, r7, #31
 80a2514:	eb03 570e 	add.w	r7, r3, lr, lsl #20
 80a2518:	4639      	mov	r1, r7
 80a251a:	bf48      	it	mi
 80a251c:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
 80a2520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a2524:	4633      	mov	r3, r6
 80a2526:	e7c2      	b.n	80a24ae <__ieee754_sqrt+0x76>
 80a2528:	1c41      	adds	r1, r0, #1
 80a252a:	d035      	beq.n	80a2598 <__ieee754_sqrt+0x160>
 80a252c:	f000 0301 	and.w	r3, r0, #1
 80a2530:	4418      	add	r0, r3
 80a2532:	e7e8      	b.n	80a2506 <__ieee754_sqrt+0xce>
 80a2534:	005b      	lsls	r3, r3, #1
 80a2536:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80a253a:	0052      	lsls	r2, r2, #1
 80a253c:	e796      	b.n	80a246c <__ieee754_sqrt+0x34>
 80a253e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80a2542:	4306      	orrs	r6, r0
 80a2544:	d0ec      	beq.n	80a2520 <__ieee754_sqrt+0xe8>
 80a2546:	bb79      	cbnz	r1, 80a25a8 <__ieee754_sqrt+0x170>
 80a2548:	468e      	mov	lr, r1
 80a254a:	0ad3      	lsrs	r3, r2, #11
 80a254c:	f1ae 0e15 	sub.w	lr, lr, #21
 80a2550:	0552      	lsls	r2, r2, #21
 80a2552:	2b00      	cmp	r3, #0
 80a2554:	d0f9      	beq.n	80a254a <__ieee754_sqrt+0x112>
 80a2556:	02dd      	lsls	r5, r3, #11
 80a2558:	d421      	bmi.n	80a259e <__ieee754_sqrt+0x166>
 80a255a:	2100      	movs	r1, #0
 80a255c:	e000      	b.n	80a2560 <__ieee754_sqrt+0x128>
 80a255e:	4601      	mov	r1, r0
 80a2560:	005b      	lsls	r3, r3, #1
 80a2562:	02dc      	lsls	r4, r3, #11
 80a2564:	f101 0001 	add.w	r0, r1, #1
 80a2568:	d5f9      	bpl.n	80a255e <__ieee754_sqrt+0x126>
 80a256a:	f1c0 0420 	rsb	r4, r0, #32
 80a256e:	fa22 f404 	lsr.w	r4, r2, r4
 80a2572:	4323      	orrs	r3, r4
 80a2574:	ebc1 0e0e 	rsb	lr, r1, lr
 80a2578:	4082      	lsls	r2, r0
 80a257a:	e76e      	b.n	80a245a <__ieee754_sqrt+0x22>
 80a257c:	4602      	mov	r2, r0
 80a257e:	460b      	mov	r3, r1
 80a2580:	f000 f9d8 	bl	80a2934 <__aeabi_dmul>
 80a2584:	462a      	mov	r2, r5
 80a2586:	4623      	mov	r3, r4
 80a2588:	f000 f822 	bl	80a25d0 <__adddf3>
 80a258c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a2590:	f1bc 0f00 	cmp.w	ip, #0
 80a2594:	daa9      	bge.n	80a24ea <__ieee754_sqrt+0xb2>
 80a2596:	e7b1      	b.n	80a24fc <__ieee754_sqrt+0xc4>
 80a2598:	3701      	adds	r7, #1
 80a259a:	4620      	mov	r0, r4
 80a259c:	e7b4      	b.n	80a2508 <__ieee754_sqrt+0xd0>
 80a259e:	2420      	movs	r4, #32
 80a25a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80a25a4:	2000      	movs	r0, #0
 80a25a6:	e7e2      	b.n	80a256e <__ieee754_sqrt+0x136>
 80a25a8:	4602      	mov	r2, r0
 80a25aa:	460b      	mov	r3, r1
 80a25ac:	f000 f80e 	bl	80a25cc <__aeabi_dsub>
 80a25b0:	4602      	mov	r2, r0
 80a25b2:	460b      	mov	r3, r1
 80a25b4:	f000 fae8 	bl	80a2b88 <__aeabi_ddiv>
 80a25b8:	e7b2      	b.n	80a2520 <__ieee754_sqrt+0xe8>
 80a25ba:	bf00      	nop
 80a25bc:	7ff00000 	.word	0x7ff00000

080a25c0 <matherr>:
 80a25c0:	2000      	movs	r0, #0
 80a25c2:	4770      	bx	lr

080a25c4 <__aeabi_drsub>:
 80a25c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a25c8:	e002      	b.n	80a25d0 <__adddf3>
 80a25ca:	bf00      	nop

080a25cc <__aeabi_dsub>:
 80a25cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a25d0 <__adddf3>:
 80a25d0:	b530      	push	{r4, r5, lr}
 80a25d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a25d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a25da:	ea94 0f05 	teq	r4, r5
 80a25de:	bf08      	it	eq
 80a25e0:	ea90 0f02 	teqeq	r0, r2
 80a25e4:	bf1f      	itttt	ne
 80a25e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a25ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a25ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a25f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a25f6:	f000 80e2 	beq.w	80a27be <__adddf3+0x1ee>
 80a25fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a25fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a2602:	bfb8      	it	lt
 80a2604:	426d      	neglt	r5, r5
 80a2606:	dd0c      	ble.n	80a2622 <__adddf3+0x52>
 80a2608:	442c      	add	r4, r5
 80a260a:	ea80 0202 	eor.w	r2, r0, r2
 80a260e:	ea81 0303 	eor.w	r3, r1, r3
 80a2612:	ea82 0000 	eor.w	r0, r2, r0
 80a2616:	ea83 0101 	eor.w	r1, r3, r1
 80a261a:	ea80 0202 	eor.w	r2, r0, r2
 80a261e:	ea81 0303 	eor.w	r3, r1, r3
 80a2622:	2d36      	cmp	r5, #54	; 0x36
 80a2624:	bf88      	it	hi
 80a2626:	bd30      	pophi	{r4, r5, pc}
 80a2628:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a262c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2630:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a2634:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a2638:	d002      	beq.n	80a2640 <__adddf3+0x70>
 80a263a:	4240      	negs	r0, r0
 80a263c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2640:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a2644:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2648:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a264c:	d002      	beq.n	80a2654 <__adddf3+0x84>
 80a264e:	4252      	negs	r2, r2
 80a2650:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a2654:	ea94 0f05 	teq	r4, r5
 80a2658:	f000 80a7 	beq.w	80a27aa <__adddf3+0x1da>
 80a265c:	f1a4 0401 	sub.w	r4, r4, #1
 80a2660:	f1d5 0e20 	rsbs	lr, r5, #32
 80a2664:	db0d      	blt.n	80a2682 <__adddf3+0xb2>
 80a2666:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a266a:	fa22 f205 	lsr.w	r2, r2, r5
 80a266e:	1880      	adds	r0, r0, r2
 80a2670:	f141 0100 	adc.w	r1, r1, #0
 80a2674:	fa03 f20e 	lsl.w	r2, r3, lr
 80a2678:	1880      	adds	r0, r0, r2
 80a267a:	fa43 f305 	asr.w	r3, r3, r5
 80a267e:	4159      	adcs	r1, r3
 80a2680:	e00e      	b.n	80a26a0 <__adddf3+0xd0>
 80a2682:	f1a5 0520 	sub.w	r5, r5, #32
 80a2686:	f10e 0e20 	add.w	lr, lr, #32
 80a268a:	2a01      	cmp	r2, #1
 80a268c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a2690:	bf28      	it	cs
 80a2692:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a2696:	fa43 f305 	asr.w	r3, r3, r5
 80a269a:	18c0      	adds	r0, r0, r3
 80a269c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a26a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a26a4:	d507      	bpl.n	80a26b6 <__adddf3+0xe6>
 80a26a6:	f04f 0e00 	mov.w	lr, #0
 80a26aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80a26ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a26b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80a26b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a26ba:	d31b      	bcc.n	80a26f4 <__adddf3+0x124>
 80a26bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a26c0:	d30c      	bcc.n	80a26dc <__adddf3+0x10c>
 80a26c2:	0849      	lsrs	r1, r1, #1
 80a26c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80a26c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a26cc:	f104 0401 	add.w	r4, r4, #1
 80a26d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a26d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a26d8:	f080 809a 	bcs.w	80a2810 <__adddf3+0x240>
 80a26dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a26e0:	bf08      	it	eq
 80a26e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a26e6:	f150 0000 	adcs.w	r0, r0, #0
 80a26ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a26ee:	ea41 0105 	orr.w	r1, r1, r5
 80a26f2:	bd30      	pop	{r4, r5, pc}
 80a26f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a26f8:	4140      	adcs	r0, r0
 80a26fa:	eb41 0101 	adc.w	r1, r1, r1
 80a26fe:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2702:	f1a4 0401 	sub.w	r4, r4, #1
 80a2706:	d1e9      	bne.n	80a26dc <__adddf3+0x10c>
 80a2708:	f091 0f00 	teq	r1, #0
 80a270c:	bf04      	itt	eq
 80a270e:	4601      	moveq	r1, r0
 80a2710:	2000      	moveq	r0, #0
 80a2712:	fab1 f381 	clz	r3, r1
 80a2716:	bf08      	it	eq
 80a2718:	3320      	addeq	r3, #32
 80a271a:	f1a3 030b 	sub.w	r3, r3, #11
 80a271e:	f1b3 0220 	subs.w	r2, r3, #32
 80a2722:	da0c      	bge.n	80a273e <__adddf3+0x16e>
 80a2724:	320c      	adds	r2, #12
 80a2726:	dd08      	ble.n	80a273a <__adddf3+0x16a>
 80a2728:	f102 0c14 	add.w	ip, r2, #20
 80a272c:	f1c2 020c 	rsb	r2, r2, #12
 80a2730:	fa01 f00c 	lsl.w	r0, r1, ip
 80a2734:	fa21 f102 	lsr.w	r1, r1, r2
 80a2738:	e00c      	b.n	80a2754 <__adddf3+0x184>
 80a273a:	f102 0214 	add.w	r2, r2, #20
 80a273e:	bfd8      	it	le
 80a2740:	f1c2 0c20 	rsble	ip, r2, #32
 80a2744:	fa01 f102 	lsl.w	r1, r1, r2
 80a2748:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a274c:	bfdc      	itt	le
 80a274e:	ea41 010c 	orrle.w	r1, r1, ip
 80a2752:	4090      	lslle	r0, r2
 80a2754:	1ae4      	subs	r4, r4, r3
 80a2756:	bfa2      	ittt	ge
 80a2758:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a275c:	4329      	orrge	r1, r5
 80a275e:	bd30      	popge	{r4, r5, pc}
 80a2760:	ea6f 0404 	mvn.w	r4, r4
 80a2764:	3c1f      	subs	r4, #31
 80a2766:	da1c      	bge.n	80a27a2 <__adddf3+0x1d2>
 80a2768:	340c      	adds	r4, #12
 80a276a:	dc0e      	bgt.n	80a278a <__adddf3+0x1ba>
 80a276c:	f104 0414 	add.w	r4, r4, #20
 80a2770:	f1c4 0220 	rsb	r2, r4, #32
 80a2774:	fa20 f004 	lsr.w	r0, r0, r4
 80a2778:	fa01 f302 	lsl.w	r3, r1, r2
 80a277c:	ea40 0003 	orr.w	r0, r0, r3
 80a2780:	fa21 f304 	lsr.w	r3, r1, r4
 80a2784:	ea45 0103 	orr.w	r1, r5, r3
 80a2788:	bd30      	pop	{r4, r5, pc}
 80a278a:	f1c4 040c 	rsb	r4, r4, #12
 80a278e:	f1c4 0220 	rsb	r2, r4, #32
 80a2792:	fa20 f002 	lsr.w	r0, r0, r2
 80a2796:	fa01 f304 	lsl.w	r3, r1, r4
 80a279a:	ea40 0003 	orr.w	r0, r0, r3
 80a279e:	4629      	mov	r1, r5
 80a27a0:	bd30      	pop	{r4, r5, pc}
 80a27a2:	fa21 f004 	lsr.w	r0, r1, r4
 80a27a6:	4629      	mov	r1, r5
 80a27a8:	bd30      	pop	{r4, r5, pc}
 80a27aa:	f094 0f00 	teq	r4, #0
 80a27ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a27b2:	bf06      	itte	eq
 80a27b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a27b8:	3401      	addeq	r4, #1
 80a27ba:	3d01      	subne	r5, #1
 80a27bc:	e74e      	b.n	80a265c <__adddf3+0x8c>
 80a27be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a27c2:	bf18      	it	ne
 80a27c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a27c8:	d029      	beq.n	80a281e <__adddf3+0x24e>
 80a27ca:	ea94 0f05 	teq	r4, r5
 80a27ce:	bf08      	it	eq
 80a27d0:	ea90 0f02 	teqeq	r0, r2
 80a27d4:	d005      	beq.n	80a27e2 <__adddf3+0x212>
 80a27d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80a27da:	bf04      	itt	eq
 80a27dc:	4619      	moveq	r1, r3
 80a27de:	4610      	moveq	r0, r2
 80a27e0:	bd30      	pop	{r4, r5, pc}
 80a27e2:	ea91 0f03 	teq	r1, r3
 80a27e6:	bf1e      	ittt	ne
 80a27e8:	2100      	movne	r1, #0
 80a27ea:	2000      	movne	r0, #0
 80a27ec:	bd30      	popne	{r4, r5, pc}
 80a27ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a27f2:	d105      	bne.n	80a2800 <__adddf3+0x230>
 80a27f4:	0040      	lsls	r0, r0, #1
 80a27f6:	4149      	adcs	r1, r1
 80a27f8:	bf28      	it	cs
 80a27fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a27fe:	bd30      	pop	{r4, r5, pc}
 80a2800:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a2804:	bf3c      	itt	cc
 80a2806:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a280a:	bd30      	popcc	{r4, r5, pc}
 80a280c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2810:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a2814:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2818:	f04f 0000 	mov.w	r0, #0
 80a281c:	bd30      	pop	{r4, r5, pc}
 80a281e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2822:	bf1a      	itte	ne
 80a2824:	4619      	movne	r1, r3
 80a2826:	4610      	movne	r0, r2
 80a2828:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a282c:	bf1c      	itt	ne
 80a282e:	460b      	movne	r3, r1
 80a2830:	4602      	movne	r2, r0
 80a2832:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2836:	bf06      	itte	eq
 80a2838:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a283c:	ea91 0f03 	teqeq	r1, r3
 80a2840:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a2844:	bd30      	pop	{r4, r5, pc}
 80a2846:	bf00      	nop

080a2848 <__aeabi_ui2d>:
 80a2848:	f090 0f00 	teq	r0, #0
 80a284c:	bf04      	itt	eq
 80a284e:	2100      	moveq	r1, #0
 80a2850:	4770      	bxeq	lr
 80a2852:	b530      	push	{r4, r5, lr}
 80a2854:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2858:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a285c:	f04f 0500 	mov.w	r5, #0
 80a2860:	f04f 0100 	mov.w	r1, #0
 80a2864:	e750      	b.n	80a2708 <__adddf3+0x138>
 80a2866:	bf00      	nop

080a2868 <__aeabi_i2d>:
 80a2868:	f090 0f00 	teq	r0, #0
 80a286c:	bf04      	itt	eq
 80a286e:	2100      	moveq	r1, #0
 80a2870:	4770      	bxeq	lr
 80a2872:	b530      	push	{r4, r5, lr}
 80a2874:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2878:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a287c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a2880:	bf48      	it	mi
 80a2882:	4240      	negmi	r0, r0
 80a2884:	f04f 0100 	mov.w	r1, #0
 80a2888:	e73e      	b.n	80a2708 <__adddf3+0x138>
 80a288a:	bf00      	nop

080a288c <__aeabi_f2d>:
 80a288c:	0042      	lsls	r2, r0, #1
 80a288e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a2892:	ea4f 0131 	mov.w	r1, r1, rrx
 80a2896:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a289a:	bf1f      	itttt	ne
 80a289c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a28a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a28a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a28a8:	4770      	bxne	lr
 80a28aa:	f092 0f00 	teq	r2, #0
 80a28ae:	bf14      	ite	ne
 80a28b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a28b4:	4770      	bxeq	lr
 80a28b6:	b530      	push	{r4, r5, lr}
 80a28b8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a28bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a28c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a28c4:	e720      	b.n	80a2708 <__adddf3+0x138>
 80a28c6:	bf00      	nop

080a28c8 <__aeabi_ul2d>:
 80a28c8:	ea50 0201 	orrs.w	r2, r0, r1
 80a28cc:	bf08      	it	eq
 80a28ce:	4770      	bxeq	lr
 80a28d0:	b530      	push	{r4, r5, lr}
 80a28d2:	f04f 0500 	mov.w	r5, #0
 80a28d6:	e00a      	b.n	80a28ee <__aeabi_l2d+0x16>

080a28d8 <__aeabi_l2d>:
 80a28d8:	ea50 0201 	orrs.w	r2, r0, r1
 80a28dc:	bf08      	it	eq
 80a28de:	4770      	bxeq	lr
 80a28e0:	b530      	push	{r4, r5, lr}
 80a28e2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a28e6:	d502      	bpl.n	80a28ee <__aeabi_l2d+0x16>
 80a28e8:	4240      	negs	r0, r0
 80a28ea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a28ee:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a28f2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a28f6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a28fa:	f43f aedc 	beq.w	80a26b6 <__adddf3+0xe6>
 80a28fe:	f04f 0203 	mov.w	r2, #3
 80a2902:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2906:	bf18      	it	ne
 80a2908:	3203      	addne	r2, #3
 80a290a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a290e:	bf18      	it	ne
 80a2910:	3203      	addne	r2, #3
 80a2912:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a2916:	f1c2 0320 	rsb	r3, r2, #32
 80a291a:	fa00 fc03 	lsl.w	ip, r0, r3
 80a291e:	fa20 f002 	lsr.w	r0, r0, r2
 80a2922:	fa01 fe03 	lsl.w	lr, r1, r3
 80a2926:	ea40 000e 	orr.w	r0, r0, lr
 80a292a:	fa21 f102 	lsr.w	r1, r1, r2
 80a292e:	4414      	add	r4, r2
 80a2930:	e6c1      	b.n	80a26b6 <__adddf3+0xe6>
 80a2932:	bf00      	nop

080a2934 <__aeabi_dmul>:
 80a2934:	b570      	push	{r4, r5, r6, lr}
 80a2936:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a293a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a293e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2942:	bf1d      	ittte	ne
 80a2944:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2948:	ea94 0f0c 	teqne	r4, ip
 80a294c:	ea95 0f0c 	teqne	r5, ip
 80a2950:	f000 f8de 	bleq	80a2b10 <__aeabi_dmul+0x1dc>
 80a2954:	442c      	add	r4, r5
 80a2956:	ea81 0603 	eor.w	r6, r1, r3
 80a295a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a295e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a2962:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a2966:	bf18      	it	ne
 80a2968:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a296c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2970:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a2974:	d038      	beq.n	80a29e8 <__aeabi_dmul+0xb4>
 80a2976:	fba0 ce02 	umull	ip, lr, r0, r2
 80a297a:	f04f 0500 	mov.w	r5, #0
 80a297e:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a2982:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a2986:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a298a:	f04f 0600 	mov.w	r6, #0
 80a298e:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a2992:	f09c 0f00 	teq	ip, #0
 80a2996:	bf18      	it	ne
 80a2998:	f04e 0e01 	orrne.w	lr, lr, #1
 80a299c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a29a0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a29a4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a29a8:	d204      	bcs.n	80a29b4 <__aeabi_dmul+0x80>
 80a29aa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a29ae:	416d      	adcs	r5, r5
 80a29b0:	eb46 0606 	adc.w	r6, r6, r6
 80a29b4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a29b8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a29bc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a29c0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a29c4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a29c8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a29cc:	bf88      	it	hi
 80a29ce:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a29d2:	d81e      	bhi.n	80a2a12 <__aeabi_dmul+0xde>
 80a29d4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a29d8:	bf08      	it	eq
 80a29da:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a29de:	f150 0000 	adcs.w	r0, r0, #0
 80a29e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a29e6:	bd70      	pop	{r4, r5, r6, pc}
 80a29e8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a29ec:	ea46 0101 	orr.w	r1, r6, r1
 80a29f0:	ea40 0002 	orr.w	r0, r0, r2
 80a29f4:	ea81 0103 	eor.w	r1, r1, r3
 80a29f8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a29fc:	bfc2      	ittt	gt
 80a29fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a2a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2a06:	bd70      	popgt	{r4, r5, r6, pc}
 80a2a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2a0c:	f04f 0e00 	mov.w	lr, #0
 80a2a10:	3c01      	subs	r4, #1
 80a2a12:	f300 80ab 	bgt.w	80a2b6c <__aeabi_dmul+0x238>
 80a2a16:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a2a1a:	bfde      	ittt	le
 80a2a1c:	2000      	movle	r0, #0
 80a2a1e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a2a22:	bd70      	pople	{r4, r5, r6, pc}
 80a2a24:	f1c4 0400 	rsb	r4, r4, #0
 80a2a28:	3c20      	subs	r4, #32
 80a2a2a:	da35      	bge.n	80a2a98 <__aeabi_dmul+0x164>
 80a2a2c:	340c      	adds	r4, #12
 80a2a2e:	dc1b      	bgt.n	80a2a68 <__aeabi_dmul+0x134>
 80a2a30:	f104 0414 	add.w	r4, r4, #20
 80a2a34:	f1c4 0520 	rsb	r5, r4, #32
 80a2a38:	fa00 f305 	lsl.w	r3, r0, r5
 80a2a3c:	fa20 f004 	lsr.w	r0, r0, r4
 80a2a40:	fa01 f205 	lsl.w	r2, r1, r5
 80a2a44:	ea40 0002 	orr.w	r0, r0, r2
 80a2a48:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a2a4c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2a50:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2a54:	fa21 f604 	lsr.w	r6, r1, r4
 80a2a58:	eb42 0106 	adc.w	r1, r2, r6
 80a2a5c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2a60:	bf08      	it	eq
 80a2a62:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2a66:	bd70      	pop	{r4, r5, r6, pc}
 80a2a68:	f1c4 040c 	rsb	r4, r4, #12
 80a2a6c:	f1c4 0520 	rsb	r5, r4, #32
 80a2a70:	fa00 f304 	lsl.w	r3, r0, r4
 80a2a74:	fa20 f005 	lsr.w	r0, r0, r5
 80a2a78:	fa01 f204 	lsl.w	r2, r1, r4
 80a2a7c:	ea40 0002 	orr.w	r0, r0, r2
 80a2a80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2a84:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2a88:	f141 0100 	adc.w	r1, r1, #0
 80a2a8c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2a90:	bf08      	it	eq
 80a2a92:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2a96:	bd70      	pop	{r4, r5, r6, pc}
 80a2a98:	f1c4 0520 	rsb	r5, r4, #32
 80a2a9c:	fa00 f205 	lsl.w	r2, r0, r5
 80a2aa0:	ea4e 0e02 	orr.w	lr, lr, r2
 80a2aa4:	fa20 f304 	lsr.w	r3, r0, r4
 80a2aa8:	fa01 f205 	lsl.w	r2, r1, r5
 80a2aac:	ea43 0302 	orr.w	r3, r3, r2
 80a2ab0:	fa21 f004 	lsr.w	r0, r1, r4
 80a2ab4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2ab8:	fa21 f204 	lsr.w	r2, r1, r4
 80a2abc:	ea20 0002 	bic.w	r0, r0, r2
 80a2ac0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a2ac4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2ac8:	bf08      	it	eq
 80a2aca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2ace:	bd70      	pop	{r4, r5, r6, pc}
 80a2ad0:	f094 0f00 	teq	r4, #0
 80a2ad4:	d10f      	bne.n	80a2af6 <__aeabi_dmul+0x1c2>
 80a2ad6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a2ada:	0040      	lsls	r0, r0, #1
 80a2adc:	eb41 0101 	adc.w	r1, r1, r1
 80a2ae0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2ae4:	bf08      	it	eq
 80a2ae6:	3c01      	subeq	r4, #1
 80a2ae8:	d0f7      	beq.n	80a2ada <__aeabi_dmul+0x1a6>
 80a2aea:	ea41 0106 	orr.w	r1, r1, r6
 80a2aee:	f095 0f00 	teq	r5, #0
 80a2af2:	bf18      	it	ne
 80a2af4:	4770      	bxne	lr
 80a2af6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a2afa:	0052      	lsls	r2, r2, #1
 80a2afc:	eb43 0303 	adc.w	r3, r3, r3
 80a2b00:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a2b04:	bf08      	it	eq
 80a2b06:	3d01      	subeq	r5, #1
 80a2b08:	d0f7      	beq.n	80a2afa <__aeabi_dmul+0x1c6>
 80a2b0a:	ea43 0306 	orr.w	r3, r3, r6
 80a2b0e:	4770      	bx	lr
 80a2b10:	ea94 0f0c 	teq	r4, ip
 80a2b14:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a2b18:	bf18      	it	ne
 80a2b1a:	ea95 0f0c 	teqne	r5, ip
 80a2b1e:	d00c      	beq.n	80a2b3a <__aeabi_dmul+0x206>
 80a2b20:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2b24:	bf18      	it	ne
 80a2b26:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2b2a:	d1d1      	bne.n	80a2ad0 <__aeabi_dmul+0x19c>
 80a2b2c:	ea81 0103 	eor.w	r1, r1, r3
 80a2b30:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2b34:	f04f 0000 	mov.w	r0, #0
 80a2b38:	bd70      	pop	{r4, r5, r6, pc}
 80a2b3a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2b3e:	bf06      	itte	eq
 80a2b40:	4610      	moveq	r0, r2
 80a2b42:	4619      	moveq	r1, r3
 80a2b44:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2b48:	d019      	beq.n	80a2b7e <__aeabi_dmul+0x24a>
 80a2b4a:	ea94 0f0c 	teq	r4, ip
 80a2b4e:	d102      	bne.n	80a2b56 <__aeabi_dmul+0x222>
 80a2b50:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a2b54:	d113      	bne.n	80a2b7e <__aeabi_dmul+0x24a>
 80a2b56:	ea95 0f0c 	teq	r5, ip
 80a2b5a:	d105      	bne.n	80a2b68 <__aeabi_dmul+0x234>
 80a2b5c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a2b60:	bf1c      	itt	ne
 80a2b62:	4610      	movne	r0, r2
 80a2b64:	4619      	movne	r1, r3
 80a2b66:	d10a      	bne.n	80a2b7e <__aeabi_dmul+0x24a>
 80a2b68:	ea81 0103 	eor.w	r1, r1, r3
 80a2b6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2b70:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2b74:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2b78:	f04f 0000 	mov.w	r0, #0
 80a2b7c:	bd70      	pop	{r4, r5, r6, pc}
 80a2b7e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2b82:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a2b86:	bd70      	pop	{r4, r5, r6, pc}

080a2b88 <__aeabi_ddiv>:
 80a2b88:	b570      	push	{r4, r5, r6, lr}
 80a2b8a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2b8e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a2b92:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2b96:	bf1d      	ittte	ne
 80a2b98:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2b9c:	ea94 0f0c 	teqne	r4, ip
 80a2ba0:	ea95 0f0c 	teqne	r5, ip
 80a2ba4:	f000 f8a7 	bleq	80a2cf6 <__aeabi_ddiv+0x16e>
 80a2ba8:	eba4 0405 	sub.w	r4, r4, r5
 80a2bac:	ea81 0e03 	eor.w	lr, r1, r3
 80a2bb0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2bb4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2bb8:	f000 8088 	beq.w	80a2ccc <__aeabi_ddiv+0x144>
 80a2bbc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2bc0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a2bc4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a2bc8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a2bcc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a2bd0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a2bd4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a2bd8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a2bdc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a2be0:	429d      	cmp	r5, r3
 80a2be2:	bf08      	it	eq
 80a2be4:	4296      	cmpeq	r6, r2
 80a2be6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a2bea:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a2bee:	d202      	bcs.n	80a2bf6 <__aeabi_ddiv+0x6e>
 80a2bf0:	085b      	lsrs	r3, r3, #1
 80a2bf2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2bf6:	1ab6      	subs	r6, r6, r2
 80a2bf8:	eb65 0503 	sbc.w	r5, r5, r3
 80a2bfc:	085b      	lsrs	r3, r3, #1
 80a2bfe:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2c02:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a2c06:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a2c0a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2c0e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2c12:	bf22      	ittt	cs
 80a2c14:	1ab6      	subcs	r6, r6, r2
 80a2c16:	4675      	movcs	r5, lr
 80a2c18:	ea40 000c 	orrcs.w	r0, r0, ip
 80a2c1c:	085b      	lsrs	r3, r3, #1
 80a2c1e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2c22:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2c26:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2c2a:	bf22      	ittt	cs
 80a2c2c:	1ab6      	subcs	r6, r6, r2
 80a2c2e:	4675      	movcs	r5, lr
 80a2c30:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a2c34:	085b      	lsrs	r3, r3, #1
 80a2c36:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2c3a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2c3e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2c42:	bf22      	ittt	cs
 80a2c44:	1ab6      	subcs	r6, r6, r2
 80a2c46:	4675      	movcs	r5, lr
 80a2c48:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a2c4c:	085b      	lsrs	r3, r3, #1
 80a2c4e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2c52:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2c56:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2c5a:	bf22      	ittt	cs
 80a2c5c:	1ab6      	subcs	r6, r6, r2
 80a2c5e:	4675      	movcs	r5, lr
 80a2c60:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a2c64:	ea55 0e06 	orrs.w	lr, r5, r6
 80a2c68:	d018      	beq.n	80a2c9c <__aeabi_ddiv+0x114>
 80a2c6a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a2c6e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a2c72:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a2c76:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a2c7a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a2c7e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a2c82:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a2c86:	d1c0      	bne.n	80a2c0a <__aeabi_ddiv+0x82>
 80a2c88:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2c8c:	d10b      	bne.n	80a2ca6 <__aeabi_ddiv+0x11e>
 80a2c8e:	ea41 0100 	orr.w	r1, r1, r0
 80a2c92:	f04f 0000 	mov.w	r0, #0
 80a2c96:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a2c9a:	e7b6      	b.n	80a2c0a <__aeabi_ddiv+0x82>
 80a2c9c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2ca0:	bf04      	itt	eq
 80a2ca2:	4301      	orreq	r1, r0
 80a2ca4:	2000      	moveq	r0, #0
 80a2ca6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a2caa:	bf88      	it	hi
 80a2cac:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a2cb0:	f63f aeaf 	bhi.w	80a2a12 <__aeabi_dmul+0xde>
 80a2cb4:	ebb5 0c03 	subs.w	ip, r5, r3
 80a2cb8:	bf04      	itt	eq
 80a2cba:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a2cbe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a2cc2:	f150 0000 	adcs.w	r0, r0, #0
 80a2cc6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2cca:	bd70      	pop	{r4, r5, r6, pc}
 80a2ccc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a2cd0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a2cd4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a2cd8:	bfc2      	ittt	gt
 80a2cda:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a2cde:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2ce2:	bd70      	popgt	{r4, r5, r6, pc}
 80a2ce4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2ce8:	f04f 0e00 	mov.w	lr, #0
 80a2cec:	3c01      	subs	r4, #1
 80a2cee:	e690      	b.n	80a2a12 <__aeabi_dmul+0xde>
 80a2cf0:	ea45 0e06 	orr.w	lr, r5, r6
 80a2cf4:	e68d      	b.n	80a2a12 <__aeabi_dmul+0xde>
 80a2cf6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a2cfa:	ea94 0f0c 	teq	r4, ip
 80a2cfe:	bf08      	it	eq
 80a2d00:	ea95 0f0c 	teqeq	r5, ip
 80a2d04:	f43f af3b 	beq.w	80a2b7e <__aeabi_dmul+0x24a>
 80a2d08:	ea94 0f0c 	teq	r4, ip
 80a2d0c:	d10a      	bne.n	80a2d24 <__aeabi_ddiv+0x19c>
 80a2d0e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2d12:	f47f af34 	bne.w	80a2b7e <__aeabi_dmul+0x24a>
 80a2d16:	ea95 0f0c 	teq	r5, ip
 80a2d1a:	f47f af25 	bne.w	80a2b68 <__aeabi_dmul+0x234>
 80a2d1e:	4610      	mov	r0, r2
 80a2d20:	4619      	mov	r1, r3
 80a2d22:	e72c      	b.n	80a2b7e <__aeabi_dmul+0x24a>
 80a2d24:	ea95 0f0c 	teq	r5, ip
 80a2d28:	d106      	bne.n	80a2d38 <__aeabi_ddiv+0x1b0>
 80a2d2a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2d2e:	f43f aefd 	beq.w	80a2b2c <__aeabi_dmul+0x1f8>
 80a2d32:	4610      	mov	r0, r2
 80a2d34:	4619      	mov	r1, r3
 80a2d36:	e722      	b.n	80a2b7e <__aeabi_dmul+0x24a>
 80a2d38:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2d3c:	bf18      	it	ne
 80a2d3e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2d42:	f47f aec5 	bne.w	80a2ad0 <__aeabi_dmul+0x19c>
 80a2d46:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a2d4a:	f47f af0d 	bne.w	80a2b68 <__aeabi_dmul+0x234>
 80a2d4e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a2d52:	f47f aeeb 	bne.w	80a2b2c <__aeabi_dmul+0x1f8>
 80a2d56:	e712      	b.n	80a2b7e <__aeabi_dmul+0x24a>

080a2d58 <__gedf2>:
 80a2d58:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a2d5c:	e006      	b.n	80a2d6c <__cmpdf2+0x4>
 80a2d5e:	bf00      	nop

080a2d60 <__ledf2>:
 80a2d60:	f04f 0c01 	mov.w	ip, #1
 80a2d64:	e002      	b.n	80a2d6c <__cmpdf2+0x4>
 80a2d66:	bf00      	nop

080a2d68 <__cmpdf2>:
 80a2d68:	f04f 0c01 	mov.w	ip, #1
 80a2d6c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a2d70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2d74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2d78:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2d7c:	bf18      	it	ne
 80a2d7e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a2d82:	d01b      	beq.n	80a2dbc <__cmpdf2+0x54>
 80a2d84:	b001      	add	sp, #4
 80a2d86:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a2d8a:	bf0c      	ite	eq
 80a2d8c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a2d90:	ea91 0f03 	teqne	r1, r3
 80a2d94:	bf02      	ittt	eq
 80a2d96:	ea90 0f02 	teqeq	r0, r2
 80a2d9a:	2000      	moveq	r0, #0
 80a2d9c:	4770      	bxeq	lr
 80a2d9e:	f110 0f00 	cmn.w	r0, #0
 80a2da2:	ea91 0f03 	teq	r1, r3
 80a2da6:	bf58      	it	pl
 80a2da8:	4299      	cmppl	r1, r3
 80a2daa:	bf08      	it	eq
 80a2dac:	4290      	cmpeq	r0, r2
 80a2dae:	bf2c      	ite	cs
 80a2db0:	17d8      	asrcs	r0, r3, #31
 80a2db2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a2db6:	f040 0001 	orr.w	r0, r0, #1
 80a2dba:	4770      	bx	lr
 80a2dbc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2dc0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2dc4:	d102      	bne.n	80a2dcc <__cmpdf2+0x64>
 80a2dc6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a2dca:	d107      	bne.n	80a2ddc <__cmpdf2+0x74>
 80a2dcc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2dd0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2dd4:	d1d6      	bne.n	80a2d84 <__cmpdf2+0x1c>
 80a2dd6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a2dda:	d0d3      	beq.n	80a2d84 <__cmpdf2+0x1c>
 80a2ddc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a2de0:	4770      	bx	lr
 80a2de2:	bf00      	nop

080a2de4 <__aeabi_cdrcmple>:
 80a2de4:	4684      	mov	ip, r0
 80a2de6:	4610      	mov	r0, r2
 80a2de8:	4662      	mov	r2, ip
 80a2dea:	468c      	mov	ip, r1
 80a2dec:	4619      	mov	r1, r3
 80a2dee:	4663      	mov	r3, ip
 80a2df0:	e000      	b.n	80a2df4 <__aeabi_cdcmpeq>
 80a2df2:	bf00      	nop

080a2df4 <__aeabi_cdcmpeq>:
 80a2df4:	b501      	push	{r0, lr}
 80a2df6:	f7ff ffb7 	bl	80a2d68 <__cmpdf2>
 80a2dfa:	2800      	cmp	r0, #0
 80a2dfc:	bf48      	it	mi
 80a2dfe:	f110 0f00 	cmnmi.w	r0, #0
 80a2e02:	bd01      	pop	{r0, pc}

080a2e04 <__aeabi_dcmpeq>:
 80a2e04:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2e08:	f7ff fff4 	bl	80a2df4 <__aeabi_cdcmpeq>
 80a2e0c:	bf0c      	ite	eq
 80a2e0e:	2001      	moveq	r0, #1
 80a2e10:	2000      	movne	r0, #0
 80a2e12:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2e16:	bf00      	nop

080a2e18 <__aeabi_dcmplt>:
 80a2e18:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2e1c:	f7ff ffea 	bl	80a2df4 <__aeabi_cdcmpeq>
 80a2e20:	bf34      	ite	cc
 80a2e22:	2001      	movcc	r0, #1
 80a2e24:	2000      	movcs	r0, #0
 80a2e26:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2e2a:	bf00      	nop

080a2e2c <__aeabi_dcmple>:
 80a2e2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2e30:	f7ff ffe0 	bl	80a2df4 <__aeabi_cdcmpeq>
 80a2e34:	bf94      	ite	ls
 80a2e36:	2001      	movls	r0, #1
 80a2e38:	2000      	movhi	r0, #0
 80a2e3a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2e3e:	bf00      	nop

080a2e40 <__aeabi_dcmpge>:
 80a2e40:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2e44:	f7ff ffce 	bl	80a2de4 <__aeabi_cdrcmple>
 80a2e48:	bf94      	ite	ls
 80a2e4a:	2001      	movls	r0, #1
 80a2e4c:	2000      	movhi	r0, #0
 80a2e4e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2e52:	bf00      	nop

080a2e54 <__aeabi_dcmpgt>:
 80a2e54:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2e58:	f7ff ffc4 	bl	80a2de4 <__aeabi_cdrcmple>
 80a2e5c:	bf34      	ite	cc
 80a2e5e:	2001      	movcc	r0, #1
 80a2e60:	2000      	movcs	r0, #0
 80a2e62:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2e66:	bf00      	nop

080a2e68 <__aeabi_dcmpun>:
 80a2e68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2e6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2e70:	d102      	bne.n	80a2e78 <__aeabi_dcmpun+0x10>
 80a2e72:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a2e76:	d10a      	bne.n	80a2e8e <__aeabi_dcmpun+0x26>
 80a2e78:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2e7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2e80:	d102      	bne.n	80a2e88 <__aeabi_dcmpun+0x20>
 80a2e82:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a2e86:	d102      	bne.n	80a2e8e <__aeabi_dcmpun+0x26>
 80a2e88:	f04f 0000 	mov.w	r0, #0
 80a2e8c:	4770      	bx	lr
 80a2e8e:	f04f 0001 	mov.w	r0, #1
 80a2e92:	4770      	bx	lr

080a2e94 <__aeabi_d2iz>:
 80a2e94:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a2e98:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a2e9c:	d215      	bcs.n	80a2eca <__aeabi_d2iz+0x36>
 80a2e9e:	d511      	bpl.n	80a2ec4 <__aeabi_d2iz+0x30>
 80a2ea0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a2ea4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a2ea8:	d912      	bls.n	80a2ed0 <__aeabi_d2iz+0x3c>
 80a2eaa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a2eae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a2eb2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a2eb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2eba:	fa23 f002 	lsr.w	r0, r3, r2
 80a2ebe:	bf18      	it	ne
 80a2ec0:	4240      	negne	r0, r0
 80a2ec2:	4770      	bx	lr
 80a2ec4:	f04f 0000 	mov.w	r0, #0
 80a2ec8:	4770      	bx	lr
 80a2eca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a2ece:	d105      	bne.n	80a2edc <__aeabi_d2iz+0x48>
 80a2ed0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a2ed4:	bf08      	it	eq
 80a2ed6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a2eda:	4770      	bx	lr
 80a2edc:	f04f 0000 	mov.w	r0, #0
 80a2ee0:	4770      	bx	lr
 80a2ee2:	bf00      	nop

080a2ee4 <atoi>:
 80a2ee4:	220a      	movs	r2, #10
 80a2ee6:	2100      	movs	r1, #0
 80a2ee8:	f000 ba26 	b.w	80a3338 <strtol>

080a2eec <__cxa_atexit>:
 80a2eec:	b510      	push	{r4, lr}
 80a2eee:	4c05      	ldr	r4, [pc, #20]	; (80a2f04 <__cxa_atexit+0x18>)
 80a2ef0:	4613      	mov	r3, r2
 80a2ef2:	b12c      	cbz	r4, 80a2f00 <__cxa_atexit+0x14>
 80a2ef4:	460a      	mov	r2, r1
 80a2ef6:	4601      	mov	r1, r0
 80a2ef8:	2002      	movs	r0, #2
 80a2efa:	f3af 8000 	nop.w
 80a2efe:	bd10      	pop	{r4, pc}
 80a2f00:	4620      	mov	r0, r4
 80a2f02:	bd10      	pop	{r4, pc}
 80a2f04:	00000000 	.word	0x00000000

080a2f08 <localtime>:
 80a2f08:	b538      	push	{r3, r4, r5, lr}
 80a2f0a:	4b07      	ldr	r3, [pc, #28]	; (80a2f28 <localtime+0x20>)
 80a2f0c:	4605      	mov	r5, r0
 80a2f0e:	681c      	ldr	r4, [r3, #0]
 80a2f10:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a2f12:	b91b      	cbnz	r3, 80a2f1c <localtime+0x14>
 80a2f14:	2024      	movs	r0, #36	; 0x24
 80a2f16:	f7fd ff35 	bl	80a0d84 <malloc>
 80a2f1a:	63e0      	str	r0, [r4, #60]	; 0x3c
 80a2f1c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a2f1e:	4628      	mov	r0, r5
 80a2f20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a2f24:	f000 b802 	b.w	80a2f2c <localtime_r>
 80a2f28:	20000140 	.word	0x20000140

080a2f2c <localtime_r>:
 80a2f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2f30:	460c      	mov	r4, r1
 80a2f32:	4680      	mov	r8, r0
 80a2f34:	f000 fd06 	bl	80a3944 <__gettzinfo>
 80a2f38:	4621      	mov	r1, r4
 80a2f3a:	4607      	mov	r7, r0
 80a2f3c:	4640      	mov	r0, r8
 80a2f3e:	f000 fd05 	bl	80a394c <gmtime_r>
 80a2f42:	6946      	ldr	r6, [r0, #20]
 80a2f44:	4604      	mov	r4, r0
 80a2f46:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80a2f4a:	07b3      	lsls	r3, r6, #30
 80a2f4c:	d105      	bne.n	80a2f5a <localtime_r+0x2e>
 80a2f4e:	2264      	movs	r2, #100	; 0x64
 80a2f50:	fb96 f3f2 	sdiv	r3, r6, r2
 80a2f54:	fb02 6313 	mls	r3, r2, r3, r6
 80a2f58:	b94b      	cbnz	r3, 80a2f6e <localtime_r+0x42>
 80a2f5a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80a2f5e:	fb96 f3f5 	sdiv	r3, r6, r5
 80a2f62:	fb05 6513 	mls	r5, r5, r3, r6
 80a2f66:	fab5 f385 	clz	r3, r5
 80a2f6a:	095b      	lsrs	r3, r3, #5
 80a2f6c:	e000      	b.n	80a2f70 <localtime_r+0x44>
 80a2f6e:	2301      	movs	r3, #1
 80a2f70:	4a5f      	ldr	r2, [pc, #380]	; (80a30f0 <localtime_r+0x1c4>)
 80a2f72:	2530      	movs	r5, #48	; 0x30
 80a2f74:	fb05 2503 	mla	r5, r5, r3, r2
 80a2f78:	f000 fb18 	bl	80a35ac <__tz_lock>
 80a2f7c:	f000 fb18 	bl	80a35b0 <_tzset_unlocked>
 80a2f80:	4b5c      	ldr	r3, [pc, #368]	; (80a30f4 <localtime_r+0x1c8>)
 80a2f82:	681b      	ldr	r3, [r3, #0]
 80a2f84:	b1f3      	cbz	r3, 80a2fc4 <localtime_r+0x98>
 80a2f86:	687b      	ldr	r3, [r7, #4]
 80a2f88:	429e      	cmp	r6, r3
 80a2f8a:	d105      	bne.n	80a2f98 <localtime_r+0x6c>
 80a2f8c:	6839      	ldr	r1, [r7, #0]
 80a2f8e:	f8d8 3000 	ldr.w	r3, [r8]
 80a2f92:	69fa      	ldr	r2, [r7, #28]
 80a2f94:	b941      	cbnz	r1, 80a2fa8 <localtime_r+0x7c>
 80a2f96:	e00a      	b.n	80a2fae <localtime_r+0x82>
 80a2f98:	4630      	mov	r0, r6
 80a2f9a:	f000 fa5f 	bl	80a345c <__tzcalc_limits>
 80a2f9e:	2800      	cmp	r0, #0
 80a2fa0:	d1f4      	bne.n	80a2f8c <localtime_r+0x60>
 80a2fa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a2fa6:	e00d      	b.n	80a2fc4 <localtime_r+0x98>
 80a2fa8:	4293      	cmp	r3, r2
 80a2faa:	db08      	blt.n	80a2fbe <localtime_r+0x92>
 80a2fac:	e001      	b.n	80a2fb2 <localtime_r+0x86>
 80a2fae:	4293      	cmp	r3, r2
 80a2fb0:	da07      	bge.n	80a2fc2 <localtime_r+0x96>
 80a2fb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80a2fb4:	4293      	cmp	r3, r2
 80a2fb6:	bfac      	ite	ge
 80a2fb8:	2300      	movge	r3, #0
 80a2fba:	2301      	movlt	r3, #1
 80a2fbc:	e002      	b.n	80a2fc4 <localtime_r+0x98>
 80a2fbe:	2300      	movs	r3, #0
 80a2fc0:	e000      	b.n	80a2fc4 <localtime_r+0x98>
 80a2fc2:	2301      	movs	r3, #1
 80a2fc4:	6223      	str	r3, [r4, #32]
 80a2fc6:	6a23      	ldr	r3, [r4, #32]
 80a2fc8:	203c      	movs	r0, #60	; 0x3c
 80a2fca:	2b01      	cmp	r3, #1
 80a2fcc:	bf0c      	ite	eq
 80a2fce:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 80a2fd0:	6a39      	ldrne	r1, [r7, #32]
 80a2fd2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a2fd6:	fb91 f6f3 	sdiv	r6, r1, r3
 80a2fda:	fb03 1316 	mls	r3, r3, r6, r1
 80a2fde:	fb93 f2f0 	sdiv	r2, r3, r0
 80a2fe2:	fb00 3012 	mls	r0, r0, r2, r3
 80a2fe6:	6861      	ldr	r1, [r4, #4]
 80a2fe8:	6823      	ldr	r3, [r4, #0]
 80a2fea:	1a89      	subs	r1, r1, r2
 80a2fec:	68a2      	ldr	r2, [r4, #8]
 80a2fee:	1a1b      	subs	r3, r3, r0
 80a2ff0:	1b92      	subs	r2, r2, r6
 80a2ff2:	2b3b      	cmp	r3, #59	; 0x3b
 80a2ff4:	6023      	str	r3, [r4, #0]
 80a2ff6:	6061      	str	r1, [r4, #4]
 80a2ff8:	60a2      	str	r2, [r4, #8]
 80a2ffa:	dd03      	ble.n	80a3004 <localtime_r+0xd8>
 80a2ffc:	3101      	adds	r1, #1
 80a2ffe:	6061      	str	r1, [r4, #4]
 80a3000:	3b3c      	subs	r3, #60	; 0x3c
 80a3002:	e004      	b.n	80a300e <localtime_r+0xe2>
 80a3004:	2b00      	cmp	r3, #0
 80a3006:	da03      	bge.n	80a3010 <localtime_r+0xe4>
 80a3008:	3901      	subs	r1, #1
 80a300a:	6061      	str	r1, [r4, #4]
 80a300c:	333c      	adds	r3, #60	; 0x3c
 80a300e:	6023      	str	r3, [r4, #0]
 80a3010:	6863      	ldr	r3, [r4, #4]
 80a3012:	2b3b      	cmp	r3, #59	; 0x3b
 80a3014:	dd03      	ble.n	80a301e <localtime_r+0xf2>
 80a3016:	3201      	adds	r2, #1
 80a3018:	60a2      	str	r2, [r4, #8]
 80a301a:	3b3c      	subs	r3, #60	; 0x3c
 80a301c:	e004      	b.n	80a3028 <localtime_r+0xfc>
 80a301e:	2b00      	cmp	r3, #0
 80a3020:	da03      	bge.n	80a302a <localtime_r+0xfe>
 80a3022:	3a01      	subs	r2, #1
 80a3024:	60a2      	str	r2, [r4, #8]
 80a3026:	333c      	adds	r3, #60	; 0x3c
 80a3028:	6063      	str	r3, [r4, #4]
 80a302a:	68a3      	ldr	r3, [r4, #8]
 80a302c:	2b17      	cmp	r3, #23
 80a302e:	dd22      	ble.n	80a3076 <localtime_r+0x14a>
 80a3030:	69e2      	ldr	r2, [r4, #28]
 80a3032:	3b18      	subs	r3, #24
 80a3034:	3201      	adds	r2, #1
 80a3036:	61e2      	str	r2, [r4, #28]
 80a3038:	69a2      	ldr	r2, [r4, #24]
 80a303a:	60a3      	str	r3, [r4, #8]
 80a303c:	3201      	adds	r2, #1
 80a303e:	2a06      	cmp	r2, #6
 80a3040:	bfc8      	it	gt
 80a3042:	2200      	movgt	r2, #0
 80a3044:	61a2      	str	r2, [r4, #24]
 80a3046:	68e2      	ldr	r2, [r4, #12]
 80a3048:	6923      	ldr	r3, [r4, #16]
 80a304a:	3201      	adds	r2, #1
 80a304c:	60e2      	str	r2, [r4, #12]
 80a304e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80a3052:	428a      	cmp	r2, r1
 80a3054:	dd46      	ble.n	80a30e4 <localtime_r+0x1b8>
 80a3056:	3301      	adds	r3, #1
 80a3058:	2b0c      	cmp	r3, #12
 80a305a:	bf08      	it	eq
 80a305c:	6963      	ldreq	r3, [r4, #20]
 80a305e:	eba2 0201 	sub.w	r2, r2, r1
 80a3062:	60e2      	str	r2, [r4, #12]
 80a3064:	bf05      	ittet	eq
 80a3066:	3301      	addeq	r3, #1
 80a3068:	2200      	moveq	r2, #0
 80a306a:	6123      	strne	r3, [r4, #16]
 80a306c:	6122      	streq	r2, [r4, #16]
 80a306e:	bf04      	itt	eq
 80a3070:	6163      	streq	r3, [r4, #20]
 80a3072:	61e2      	streq	r2, [r4, #28]
 80a3074:	e036      	b.n	80a30e4 <localtime_r+0x1b8>
 80a3076:	2b00      	cmp	r3, #0
 80a3078:	da34      	bge.n	80a30e4 <localtime_r+0x1b8>
 80a307a:	69e2      	ldr	r2, [r4, #28]
 80a307c:	3318      	adds	r3, #24
 80a307e:	3a01      	subs	r2, #1
 80a3080:	61e2      	str	r2, [r4, #28]
 80a3082:	69a2      	ldr	r2, [r4, #24]
 80a3084:	60a3      	str	r3, [r4, #8]
 80a3086:	3a01      	subs	r2, #1
 80a3088:	bf48      	it	mi
 80a308a:	2206      	movmi	r2, #6
 80a308c:	61a2      	str	r2, [r4, #24]
 80a308e:	68e2      	ldr	r2, [r4, #12]
 80a3090:	3a01      	subs	r2, #1
 80a3092:	60e2      	str	r2, [r4, #12]
 80a3094:	bb32      	cbnz	r2, 80a30e4 <localtime_r+0x1b8>
 80a3096:	6923      	ldr	r3, [r4, #16]
 80a3098:	3b01      	subs	r3, #1
 80a309a:	d401      	bmi.n	80a30a0 <localtime_r+0x174>
 80a309c:	6123      	str	r3, [r4, #16]
 80a309e:	e01d      	b.n	80a30dc <localtime_r+0x1b0>
 80a30a0:	230b      	movs	r3, #11
 80a30a2:	6123      	str	r3, [r4, #16]
 80a30a4:	6963      	ldr	r3, [r4, #20]
 80a30a6:	1e5a      	subs	r2, r3, #1
 80a30a8:	f012 0f03 	tst.w	r2, #3
 80a30ac:	6162      	str	r2, [r4, #20]
 80a30ae:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80a30b2:	d105      	bne.n	80a30c0 <localtime_r+0x194>
 80a30b4:	2164      	movs	r1, #100	; 0x64
 80a30b6:	fb93 f2f1 	sdiv	r2, r3, r1
 80a30ba:	fb01 3212 	mls	r2, r1, r2, r3
 80a30be:	b94a      	cbnz	r2, 80a30d4 <localtime_r+0x1a8>
 80a30c0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a30c4:	fb93 f2f1 	sdiv	r2, r3, r1
 80a30c8:	fb01 3312 	mls	r3, r1, r2, r3
 80a30cc:	fab3 f383 	clz	r3, r3
 80a30d0:	095b      	lsrs	r3, r3, #5
 80a30d2:	e000      	b.n	80a30d6 <localtime_r+0x1aa>
 80a30d4:	2301      	movs	r3, #1
 80a30d6:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80a30da:	61e3      	str	r3, [r4, #28]
 80a30dc:	6923      	ldr	r3, [r4, #16]
 80a30de:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80a30e2:	60e3      	str	r3, [r4, #12]
 80a30e4:	f000 fa63 	bl	80a35ae <__tz_unlock>
 80a30e8:	4620      	mov	r0, r4
 80a30ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a30ee:	bf00      	nop
 80a30f0:	080a3fe4 	.word	0x080a3fe4
 80a30f4:	20000868 	.word	0x20000868

080a30f8 <memcpy>:
 80a30f8:	b510      	push	{r4, lr}
 80a30fa:	1e43      	subs	r3, r0, #1
 80a30fc:	440a      	add	r2, r1
 80a30fe:	4291      	cmp	r1, r2
 80a3100:	d004      	beq.n	80a310c <memcpy+0x14>
 80a3102:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a3106:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a310a:	e7f8      	b.n	80a30fe <memcpy+0x6>
 80a310c:	bd10      	pop	{r4, pc}

080a310e <memset>:
 80a310e:	4603      	mov	r3, r0
 80a3110:	4402      	add	r2, r0
 80a3112:	4293      	cmp	r3, r2
 80a3114:	d002      	beq.n	80a311c <memset+0xe>
 80a3116:	f803 1b01 	strb.w	r1, [r3], #1
 80a311a:	e7fa      	b.n	80a3112 <memset+0x4>
 80a311c:	4770      	bx	lr
	...

080a3120 <srand>:
 80a3120:	b538      	push	{r3, r4, r5, lr}
 80a3122:	4b12      	ldr	r3, [pc, #72]	; (80a316c <srand+0x4c>)
 80a3124:	4605      	mov	r5, r0
 80a3126:	681c      	ldr	r4, [r3, #0]
 80a3128:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a312a:	b9d3      	cbnz	r3, 80a3162 <srand+0x42>
 80a312c:	2018      	movs	r0, #24
 80a312e:	f7fd fe29 	bl	80a0d84 <malloc>
 80a3132:	f243 330e 	movw	r3, #13070	; 0x330e
 80a3136:	63a0      	str	r0, [r4, #56]	; 0x38
 80a3138:	8003      	strh	r3, [r0, #0]
 80a313a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a313e:	8043      	strh	r3, [r0, #2]
 80a3140:	f241 2334 	movw	r3, #4660	; 0x1234
 80a3144:	8083      	strh	r3, [r0, #4]
 80a3146:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a314a:	80c3      	strh	r3, [r0, #6]
 80a314c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a3150:	8103      	strh	r3, [r0, #8]
 80a3152:	2305      	movs	r3, #5
 80a3154:	8143      	strh	r3, [r0, #10]
 80a3156:	230b      	movs	r3, #11
 80a3158:	8183      	strh	r3, [r0, #12]
 80a315a:	2201      	movs	r2, #1
 80a315c:	2300      	movs	r3, #0
 80a315e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a3162:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a3164:	2200      	movs	r2, #0
 80a3166:	611d      	str	r5, [r3, #16]
 80a3168:	615a      	str	r2, [r3, #20]
 80a316a:	bd38      	pop	{r3, r4, r5, pc}
 80a316c:	20000140 	.word	0x20000140

080a3170 <strcmp>:
 80a3170:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a3174:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a3178:	2a01      	cmp	r2, #1
 80a317a:	bf28      	it	cs
 80a317c:	429a      	cmpcs	r2, r3
 80a317e:	d0f7      	beq.n	80a3170 <strcmp>
 80a3180:	1ad0      	subs	r0, r2, r3
 80a3182:	4770      	bx	lr

080a3184 <strcpy>:
 80a3184:	4603      	mov	r3, r0
 80a3186:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a318a:	f803 2b01 	strb.w	r2, [r3], #1
 80a318e:	2a00      	cmp	r2, #0
 80a3190:	d1f9      	bne.n	80a3186 <strcpy+0x2>
 80a3192:	4770      	bx	lr

080a3194 <strdup>:
 80a3194:	4b02      	ldr	r3, [pc, #8]	; (80a31a0 <strdup+0xc>)
 80a3196:	4601      	mov	r1, r0
 80a3198:	6818      	ldr	r0, [r3, #0]
 80a319a:	f000 b803 	b.w	80a31a4 <_strdup_r>
 80a319e:	bf00      	nop
 80a31a0:	20000140 	.word	0x20000140

080a31a4 <_strdup_r>:
 80a31a4:	b570      	push	{r4, r5, r6, lr}
 80a31a6:	4606      	mov	r6, r0
 80a31a8:	4608      	mov	r0, r1
 80a31aa:	460c      	mov	r4, r1
 80a31ac:	f000 f80d 	bl	80a31ca <strlen>
 80a31b0:	1c45      	adds	r5, r0, #1
 80a31b2:	4629      	mov	r1, r5
 80a31b4:	4630      	mov	r0, r6
 80a31b6:	f7fd fe15 	bl	80a0de4 <_malloc_r>
 80a31ba:	4606      	mov	r6, r0
 80a31bc:	b118      	cbz	r0, 80a31c6 <_strdup_r+0x22>
 80a31be:	462a      	mov	r2, r5
 80a31c0:	4621      	mov	r1, r4
 80a31c2:	f7ff ff99 	bl	80a30f8 <memcpy>
 80a31c6:	4630      	mov	r0, r6
 80a31c8:	bd70      	pop	{r4, r5, r6, pc}

080a31ca <strlen>:
 80a31ca:	4603      	mov	r3, r0
 80a31cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a31d0:	2a00      	cmp	r2, #0
 80a31d2:	d1fb      	bne.n	80a31cc <strlen+0x2>
 80a31d4:	1a18      	subs	r0, r3, r0
 80a31d6:	3801      	subs	r0, #1
 80a31d8:	4770      	bx	lr

080a31da <strncmp>:
 80a31da:	b530      	push	{r4, r5, lr}
 80a31dc:	b182      	cbz	r2, 80a3200 <strncmp+0x26>
 80a31de:	1e45      	subs	r5, r0, #1
 80a31e0:	3901      	subs	r1, #1
 80a31e2:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80a31e6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a31ea:	42a3      	cmp	r3, r4
 80a31ec:	d106      	bne.n	80a31fc <strncmp+0x22>
 80a31ee:	43ec      	mvns	r4, r5
 80a31f0:	4414      	add	r4, r2
 80a31f2:	42e0      	cmn	r0, r4
 80a31f4:	d001      	beq.n	80a31fa <strncmp+0x20>
 80a31f6:	2b00      	cmp	r3, #0
 80a31f8:	d1f3      	bne.n	80a31e2 <strncmp+0x8>
 80a31fa:	461c      	mov	r4, r3
 80a31fc:	1b18      	subs	r0, r3, r4
 80a31fe:	bd30      	pop	{r4, r5, pc}
 80a3200:	4610      	mov	r0, r2
 80a3202:	bd30      	pop	{r4, r5, pc}

080a3204 <strncpy>:
 80a3204:	4603      	mov	r3, r0
 80a3206:	b510      	push	{r4, lr}
 80a3208:	b142      	cbz	r2, 80a321c <strncpy+0x18>
 80a320a:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a320e:	3a01      	subs	r2, #1
 80a3210:	f803 4b01 	strb.w	r4, [r3], #1
 80a3214:	2c00      	cmp	r4, #0
 80a3216:	d1f7      	bne.n	80a3208 <strncpy+0x4>
 80a3218:	441a      	add	r2, r3
 80a321a:	e000      	b.n	80a321e <strncpy+0x1a>
 80a321c:	bd10      	pop	{r4, pc}
 80a321e:	4293      	cmp	r3, r2
 80a3220:	d002      	beq.n	80a3228 <strncpy+0x24>
 80a3222:	f803 4b01 	strb.w	r4, [r3], #1
 80a3226:	e7fa      	b.n	80a321e <strncpy+0x1a>
 80a3228:	bd10      	pop	{r4, pc}
	...

080a322c <_strtol_r>:
 80a322c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a3230:	460f      	mov	r7, r1
 80a3232:	4680      	mov	r8, r0
 80a3234:	483f      	ldr	r0, [pc, #252]	; (80a3334 <_strtol_r+0x108>)
 80a3236:	f8d0 9000 	ldr.w	r9, [r0]
 80a323a:	463d      	mov	r5, r7
 80a323c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a3240:	eb09 0004 	add.w	r0, r9, r4
 80a3244:	7840      	ldrb	r0, [r0, #1]
 80a3246:	f000 0008 	and.w	r0, r0, #8
 80a324a:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80a324e:	b108      	cbz	r0, 80a3254 <_strtol_r+0x28>
 80a3250:	462f      	mov	r7, r5
 80a3252:	e7f2      	b.n	80a323a <_strtol_r+0xe>
 80a3254:	2c2d      	cmp	r4, #45	; 0x2d
 80a3256:	d103      	bne.n	80a3260 <_strtol_r+0x34>
 80a3258:	1cbd      	adds	r5, r7, #2
 80a325a:	787c      	ldrb	r4, [r7, #1]
 80a325c:	2601      	movs	r6, #1
 80a325e:	e003      	b.n	80a3268 <_strtol_r+0x3c>
 80a3260:	2c2b      	cmp	r4, #43	; 0x2b
 80a3262:	bf04      	itt	eq
 80a3264:	787c      	ldrbeq	r4, [r7, #1]
 80a3266:	1cbd      	addeq	r5, r7, #2
 80a3268:	b113      	cbz	r3, 80a3270 <_strtol_r+0x44>
 80a326a:	2b10      	cmp	r3, #16
 80a326c:	d10a      	bne.n	80a3284 <_strtol_r+0x58>
 80a326e:	e05b      	b.n	80a3328 <_strtol_r+0xfc>
 80a3270:	2c30      	cmp	r4, #48	; 0x30
 80a3272:	d157      	bne.n	80a3324 <_strtol_r+0xf8>
 80a3274:	7828      	ldrb	r0, [r5, #0]
 80a3276:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a327a:	2858      	cmp	r0, #88	; 0x58
 80a327c:	d14d      	bne.n	80a331a <_strtol_r+0xee>
 80a327e:	786c      	ldrb	r4, [r5, #1]
 80a3280:	2310      	movs	r3, #16
 80a3282:	3502      	adds	r5, #2
 80a3284:	2e00      	cmp	r6, #0
 80a3286:	bf14      	ite	ne
 80a3288:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80a328c:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80a3290:	fbbc faf3 	udiv	sl, ip, r3
 80a3294:	2700      	movs	r7, #0
 80a3296:	4638      	mov	r0, r7
 80a3298:	fb03 cc1a 	mls	ip, r3, sl, ip
 80a329c:	eb09 0e04 	add.w	lr, r9, r4
 80a32a0:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a32a4:	f01e 0f04 	tst.w	lr, #4
 80a32a8:	d001      	beq.n	80a32ae <_strtol_r+0x82>
 80a32aa:	3c30      	subs	r4, #48	; 0x30
 80a32ac:	e00b      	b.n	80a32c6 <_strtol_r+0x9a>
 80a32ae:	f01e 0e03 	ands.w	lr, lr, #3
 80a32b2:	d01b      	beq.n	80a32ec <_strtol_r+0xc0>
 80a32b4:	f1be 0f01 	cmp.w	lr, #1
 80a32b8:	bf0c      	ite	eq
 80a32ba:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a32be:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a32c2:	ebce 0404 	rsb	r4, lr, r4
 80a32c6:	42a3      	cmp	r3, r4
 80a32c8:	dd10      	ble.n	80a32ec <_strtol_r+0xc0>
 80a32ca:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 80a32ce:	d00a      	beq.n	80a32e6 <_strtol_r+0xba>
 80a32d0:	4550      	cmp	r0, sl
 80a32d2:	d806      	bhi.n	80a32e2 <_strtol_r+0xb6>
 80a32d4:	d101      	bne.n	80a32da <_strtol_r+0xae>
 80a32d6:	4564      	cmp	r4, ip
 80a32d8:	dc03      	bgt.n	80a32e2 <_strtol_r+0xb6>
 80a32da:	fb03 4000 	mla	r0, r3, r0, r4
 80a32de:	2701      	movs	r7, #1
 80a32e0:	e001      	b.n	80a32e6 <_strtol_r+0xba>
 80a32e2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80a32e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a32ea:	e7d7      	b.n	80a329c <_strtol_r+0x70>
 80a32ec:	1c7b      	adds	r3, r7, #1
 80a32ee:	d10c      	bne.n	80a330a <_strtol_r+0xde>
 80a32f0:	2e00      	cmp	r6, #0
 80a32f2:	f04f 0322 	mov.w	r3, #34	; 0x22
 80a32f6:	bf14      	ite	ne
 80a32f8:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80a32fc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a3300:	f8c8 3000 	str.w	r3, [r8]
 80a3304:	b92a      	cbnz	r2, 80a3312 <_strtol_r+0xe6>
 80a3306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a330a:	b106      	cbz	r6, 80a330e <_strtol_r+0xe2>
 80a330c:	4240      	negs	r0, r0
 80a330e:	b172      	cbz	r2, 80a332e <_strtol_r+0x102>
 80a3310:	b107      	cbz	r7, 80a3314 <_strtol_r+0xe8>
 80a3312:	1e69      	subs	r1, r5, #1
 80a3314:	6011      	str	r1, [r2, #0]
 80a3316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a331a:	2430      	movs	r4, #48	; 0x30
 80a331c:	2b00      	cmp	r3, #0
 80a331e:	d1b1      	bne.n	80a3284 <_strtol_r+0x58>
 80a3320:	2308      	movs	r3, #8
 80a3322:	e7af      	b.n	80a3284 <_strtol_r+0x58>
 80a3324:	230a      	movs	r3, #10
 80a3326:	e7ad      	b.n	80a3284 <_strtol_r+0x58>
 80a3328:	2c30      	cmp	r4, #48	; 0x30
 80a332a:	d0a3      	beq.n	80a3274 <_strtol_r+0x48>
 80a332c:	e7aa      	b.n	80a3284 <_strtol_r+0x58>
 80a332e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a3332:	bf00      	nop
 80a3334:	200000dc 	.word	0x200000dc

080a3338 <strtol>:
 80a3338:	4613      	mov	r3, r2
 80a333a:	460a      	mov	r2, r1
 80a333c:	4601      	mov	r1, r0
 80a333e:	4802      	ldr	r0, [pc, #8]	; (80a3348 <strtol+0x10>)
 80a3340:	6800      	ldr	r0, [r0, #0]
 80a3342:	f7ff bf73 	b.w	80a322c <_strtol_r>
 80a3346:	bf00      	nop
 80a3348:	20000140 	.word	0x20000140

080a334c <_strtoul_r>:
 80a334c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a3350:	460e      	mov	r6, r1
 80a3352:	4680      	mov	r8, r0
 80a3354:	483b      	ldr	r0, [pc, #236]	; (80a3444 <_strtoul_r+0xf8>)
 80a3356:	f8d0 9000 	ldr.w	r9, [r0]
 80a335a:	4635      	mov	r5, r6
 80a335c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a3360:	eb09 0004 	add.w	r0, r9, r4
 80a3364:	7840      	ldrb	r0, [r0, #1]
 80a3366:	f000 0008 	and.w	r0, r0, #8
 80a336a:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 80a336e:	b108      	cbz	r0, 80a3374 <_strtoul_r+0x28>
 80a3370:	462e      	mov	r6, r5
 80a3372:	e7f2      	b.n	80a335a <_strtoul_r+0xe>
 80a3374:	2c2d      	cmp	r4, #45	; 0x2d
 80a3376:	d103      	bne.n	80a3380 <_strtoul_r+0x34>
 80a3378:	1cb5      	adds	r5, r6, #2
 80a337a:	7874      	ldrb	r4, [r6, #1]
 80a337c:	2701      	movs	r7, #1
 80a337e:	e003      	b.n	80a3388 <_strtoul_r+0x3c>
 80a3380:	2c2b      	cmp	r4, #43	; 0x2b
 80a3382:	bf04      	itt	eq
 80a3384:	7874      	ldrbeq	r4, [r6, #1]
 80a3386:	1cb5      	addeq	r5, r6, #2
 80a3388:	b113      	cbz	r3, 80a3390 <_strtoul_r+0x44>
 80a338a:	2b10      	cmp	r3, #16
 80a338c:	d10a      	bne.n	80a33a4 <_strtoul_r+0x58>
 80a338e:	e053      	b.n	80a3438 <_strtoul_r+0xec>
 80a3390:	2c30      	cmp	r4, #48	; 0x30
 80a3392:	d14f      	bne.n	80a3434 <_strtoul_r+0xe8>
 80a3394:	7828      	ldrb	r0, [r5, #0]
 80a3396:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a339a:	2858      	cmp	r0, #88	; 0x58
 80a339c:	d145      	bne.n	80a342a <_strtoul_r+0xde>
 80a339e:	786c      	ldrb	r4, [r5, #1]
 80a33a0:	2310      	movs	r3, #16
 80a33a2:	3502      	adds	r5, #2
 80a33a4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a33a8:	fbbc fcf3 	udiv	ip, ip, r3
 80a33ac:	fb03 fa0c 	mul.w	sl, r3, ip
 80a33b0:	2600      	movs	r6, #0
 80a33b2:	ea6f 0a0a 	mvn.w	sl, sl
 80a33b6:	4630      	mov	r0, r6
 80a33b8:	eb09 0e04 	add.w	lr, r9, r4
 80a33bc:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a33c0:	f01e 0f04 	tst.w	lr, #4
 80a33c4:	d001      	beq.n	80a33ca <_strtoul_r+0x7e>
 80a33c6:	3c30      	subs	r4, #48	; 0x30
 80a33c8:	e00b      	b.n	80a33e2 <_strtoul_r+0x96>
 80a33ca:	f01e 0e03 	ands.w	lr, lr, #3
 80a33ce:	d01a      	beq.n	80a3406 <_strtoul_r+0xba>
 80a33d0:	f1be 0f01 	cmp.w	lr, #1
 80a33d4:	bf0c      	ite	eq
 80a33d6:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a33da:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a33de:	ebce 0404 	rsb	r4, lr, r4
 80a33e2:	42a3      	cmp	r3, r4
 80a33e4:	dd0f      	ble.n	80a3406 <_strtoul_r+0xba>
 80a33e6:	2e00      	cmp	r6, #0
 80a33e8:	db08      	blt.n	80a33fc <_strtoul_r+0xb0>
 80a33ea:	4560      	cmp	r0, ip
 80a33ec:	d806      	bhi.n	80a33fc <_strtoul_r+0xb0>
 80a33ee:	d101      	bne.n	80a33f4 <_strtoul_r+0xa8>
 80a33f0:	4554      	cmp	r4, sl
 80a33f2:	dc03      	bgt.n	80a33fc <_strtoul_r+0xb0>
 80a33f4:	fb03 4000 	mla	r0, r3, r0, r4
 80a33f8:	2601      	movs	r6, #1
 80a33fa:	e001      	b.n	80a3400 <_strtoul_r+0xb4>
 80a33fc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80a3400:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a3404:	e7d8      	b.n	80a33b8 <_strtoul_r+0x6c>
 80a3406:	2e00      	cmp	r6, #0
 80a3408:	da07      	bge.n	80a341a <_strtoul_r+0xce>
 80a340a:	2322      	movs	r3, #34	; 0x22
 80a340c:	f8c8 3000 	str.w	r3, [r8]
 80a3410:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a3414:	b92a      	cbnz	r2, 80a3422 <_strtoul_r+0xd6>
 80a3416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a341a:	b107      	cbz	r7, 80a341e <_strtoul_r+0xd2>
 80a341c:	4240      	negs	r0, r0
 80a341e:	b172      	cbz	r2, 80a343e <_strtoul_r+0xf2>
 80a3420:	b106      	cbz	r6, 80a3424 <_strtoul_r+0xd8>
 80a3422:	1e69      	subs	r1, r5, #1
 80a3424:	6011      	str	r1, [r2, #0]
 80a3426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a342a:	2430      	movs	r4, #48	; 0x30
 80a342c:	2b00      	cmp	r3, #0
 80a342e:	d1b9      	bne.n	80a33a4 <_strtoul_r+0x58>
 80a3430:	2308      	movs	r3, #8
 80a3432:	e7b7      	b.n	80a33a4 <_strtoul_r+0x58>
 80a3434:	230a      	movs	r3, #10
 80a3436:	e7b5      	b.n	80a33a4 <_strtoul_r+0x58>
 80a3438:	2c30      	cmp	r4, #48	; 0x30
 80a343a:	d0ab      	beq.n	80a3394 <_strtoul_r+0x48>
 80a343c:	e7b2      	b.n	80a33a4 <_strtoul_r+0x58>
 80a343e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a3442:	bf00      	nop
 80a3444:	200000dc 	.word	0x200000dc

080a3448 <strtoul>:
 80a3448:	4613      	mov	r3, r2
 80a344a:	460a      	mov	r2, r1
 80a344c:	4601      	mov	r1, r0
 80a344e:	4802      	ldr	r0, [pc, #8]	; (80a3458 <strtoul+0x10>)
 80a3450:	6800      	ldr	r0, [r0, #0]
 80a3452:	f7ff bf7b 	b.w	80a334c <_strtoul_r>
 80a3456:	bf00      	nop
 80a3458:	20000140 	.word	0x20000140

080a345c <__tzcalc_limits>:
 80a345c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3460:	4604      	mov	r4, r0
 80a3462:	f000 fa6f 	bl	80a3944 <__gettzinfo>
 80a3466:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80a346a:	429c      	cmp	r4, r3
 80a346c:	f340 8096 	ble.w	80a359c <__tzcalc_limits+0x140>
 80a3470:	f240 156d 	movw	r5, #365	; 0x16d
 80a3474:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80a3478:	18e3      	adds	r3, r4, r3
 80a347a:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 80a347e:	109b      	asrs	r3, r3, #2
 80a3480:	fb05 3502 	mla	r5, r5, r2, r3
 80a3484:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 80a3488:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80a348c:	fb92 f3f3 	sdiv	r3, r2, r3
 80a3490:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80a3494:	442b      	add	r3, r5
 80a3496:	18a5      	adds	r5, r4, r2
 80a3498:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a349c:	fb94 f7f2 	sdiv	r7, r4, r2
 80a34a0:	fb95 f5f2 	sdiv	r5, r5, r2
 80a34a4:	fb02 4717 	mls	r7, r2, r7, r4
 80a34a8:	441d      	add	r5, r3
 80a34aa:	2364      	movs	r3, #100	; 0x64
 80a34ac:	fb94 f6f3 	sdiv	r6, r4, r3
 80a34b0:	fab7 fe87 	clz	lr, r7
 80a34b4:	4601      	mov	r1, r0
 80a34b6:	fb03 4616 	mls	r6, r3, r6, r4
 80a34ba:	f100 0338 	add.w	r3, r0, #56	; 0x38
 80a34be:	9301      	str	r3, [sp, #4]
 80a34c0:	f004 0303 	and.w	r3, r4, #3
 80a34c4:	6044      	str	r4, [r0, #4]
 80a34c6:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80a34ca:	9300      	str	r3, [sp, #0]
 80a34cc:	f04f 0c07 	mov.w	ip, #7
 80a34d0:	7a0b      	ldrb	r3, [r1, #8]
 80a34d2:	2b4a      	cmp	r3, #74	; 0x4a
 80a34d4:	d10e      	bne.n	80a34f4 <__tzcalc_limits+0x98>
 80a34d6:	694b      	ldr	r3, [r1, #20]
 80a34d8:	9a00      	ldr	r2, [sp, #0]
 80a34da:	18ec      	adds	r4, r5, r3
 80a34dc:	b902      	cbnz	r2, 80a34e0 <__tzcalc_limits+0x84>
 80a34de:	b906      	cbnz	r6, 80a34e2 <__tzcalc_limits+0x86>
 80a34e0:	b927      	cbnz	r7, 80a34ec <__tzcalc_limits+0x90>
 80a34e2:	2b3b      	cmp	r3, #59	; 0x3b
 80a34e4:	bfd4      	ite	le
 80a34e6:	2300      	movle	r3, #0
 80a34e8:	2301      	movgt	r3, #1
 80a34ea:	e000      	b.n	80a34ee <__tzcalc_limits+0x92>
 80a34ec:	2300      	movs	r3, #0
 80a34ee:	4423      	add	r3, r4
 80a34f0:	3b01      	subs	r3, #1
 80a34f2:	e03f      	b.n	80a3574 <__tzcalc_limits+0x118>
 80a34f4:	2b44      	cmp	r3, #68	; 0x44
 80a34f6:	d102      	bne.n	80a34fe <__tzcalc_limits+0xa2>
 80a34f8:	694b      	ldr	r3, [r1, #20]
 80a34fa:	442b      	add	r3, r5
 80a34fc:	e03a      	b.n	80a3574 <__tzcalc_limits+0x118>
 80a34fe:	9b00      	ldr	r3, [sp, #0]
 80a3500:	b92b      	cbnz	r3, 80a350e <__tzcalc_limits+0xb2>
 80a3502:	2e00      	cmp	r6, #0
 80a3504:	bf0c      	ite	eq
 80a3506:	46f0      	moveq	r8, lr
 80a3508:	f04f 0801 	movne.w	r8, #1
 80a350c:	e000      	b.n	80a3510 <__tzcalc_limits+0xb4>
 80a350e:	46f0      	mov	r8, lr
 80a3510:	46a9      	mov	r9, r5
 80a3512:	4b24      	ldr	r3, [pc, #144]	; (80a35a4 <__tzcalc_limits+0x148>)
 80a3514:	2230      	movs	r2, #48	; 0x30
 80a3516:	fb02 3808 	mla	r8, r2, r8, r3
 80a351a:	68cc      	ldr	r4, [r1, #12]
 80a351c:	f1a8 0a04 	sub.w	sl, r8, #4
 80a3520:	2301      	movs	r3, #1
 80a3522:	42a3      	cmp	r3, r4
 80a3524:	da04      	bge.n	80a3530 <__tzcalc_limits+0xd4>
 80a3526:	f85a bf04 	ldr.w	fp, [sl, #4]!
 80a352a:	3301      	adds	r3, #1
 80a352c:	44d9      	add	r9, fp
 80a352e:	e7f8      	b.n	80a3522 <__tzcalc_limits+0xc6>
 80a3530:	f109 0304 	add.w	r3, r9, #4
 80a3534:	fb93 fbfc 	sdiv	fp, r3, ip
 80a3538:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 80a353c:	ebca 0a03 	rsb	sl, sl, r3
 80a3540:	694b      	ldr	r3, [r1, #20]
 80a3542:	2c01      	cmp	r4, #1
 80a3544:	bfb8      	it	lt
 80a3546:	2401      	movlt	r4, #1
 80a3548:	ebb3 0a0a 	subs.w	sl, r3, sl
 80a354c:	690b      	ldr	r3, [r1, #16]
 80a354e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80a3552:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80a3556:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80a355a:	bf48      	it	mi
 80a355c:	f10a 0a07 	addmi.w	sl, sl, #7
 80a3560:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a3564:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 80a3568:	4453      	add	r3, sl
 80a356a:	42a3      	cmp	r3, r4
 80a356c:	db01      	blt.n	80a3572 <__tzcalc_limits+0x116>
 80a356e:	3b07      	subs	r3, #7
 80a3570:	e7fb      	b.n	80a356a <__tzcalc_limits+0x10e>
 80a3572:	444b      	add	r3, r9
 80a3574:	698c      	ldr	r4, [r1, #24]
 80a3576:	4a0c      	ldr	r2, [pc, #48]	; (80a35a8 <__tzcalc_limits+0x14c>)
 80a3578:	fb02 4303 	mla	r3, r2, r3, r4
 80a357c:	6a0c      	ldr	r4, [r1, #32]
 80a357e:	4423      	add	r3, r4
 80a3580:	f841 3f1c 	str.w	r3, [r1, #28]!
 80a3584:	9b01      	ldr	r3, [sp, #4]
 80a3586:	4299      	cmp	r1, r3
 80a3588:	d1a2      	bne.n	80a34d0 <__tzcalc_limits+0x74>
 80a358a:	69c3      	ldr	r3, [r0, #28]
 80a358c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80a358e:	4293      	cmp	r3, r2
 80a3590:	bfac      	ite	ge
 80a3592:	2300      	movge	r3, #0
 80a3594:	2301      	movlt	r3, #1
 80a3596:	6003      	str	r3, [r0, #0]
 80a3598:	2001      	movs	r0, #1
 80a359a:	e000      	b.n	80a359e <__tzcalc_limits+0x142>
 80a359c:	2000      	movs	r0, #0
 80a359e:	b003      	add	sp, #12
 80a35a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a35a4:	080a3fe4 	.word	0x080a3fe4
 80a35a8:	00015180 	.word	0x00015180

080a35ac <__tz_lock>:
 80a35ac:	4770      	bx	lr

080a35ae <__tz_unlock>:
 80a35ae:	4770      	bx	lr

080a35b0 <_tzset_unlocked>:
 80a35b0:	4b01      	ldr	r3, [pc, #4]	; (80a35b8 <_tzset_unlocked+0x8>)
 80a35b2:	6818      	ldr	r0, [r3, #0]
 80a35b4:	f000 b802 	b.w	80a35bc <_tzset_unlocked_r>
 80a35b8:	20000140 	.word	0x20000140

080a35bc <_tzset_unlocked_r>:
 80a35bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a35c0:	b08d      	sub	sp, #52	; 0x34
 80a35c2:	4607      	mov	r7, r0
 80a35c4:	f000 f9be 	bl	80a3944 <__gettzinfo>
 80a35c8:	49b0      	ldr	r1, [pc, #704]	; (80a388c <_tzset_unlocked_r+0x2d0>)
 80a35ca:	4604      	mov	r4, r0
 80a35cc:	4638      	mov	r0, r7
 80a35ce:	f000 f9b1 	bl	80a3934 <_getenv_r>
 80a35d2:	4eaf      	ldr	r6, [pc, #700]	; (80a3890 <_tzset_unlocked_r+0x2d4>)
 80a35d4:	4605      	mov	r5, r0
 80a35d6:	b960      	cbnz	r0, 80a35f2 <_tzset_unlocked_r+0x36>
 80a35d8:	4bae      	ldr	r3, [pc, #696]	; (80a3894 <_tzset_unlocked_r+0x2d8>)
 80a35da:	4aaf      	ldr	r2, [pc, #700]	; (80a3898 <_tzset_unlocked_r+0x2dc>)
 80a35dc:	6018      	str	r0, [r3, #0]
 80a35de:	4baf      	ldr	r3, [pc, #700]	; (80a389c <_tzset_unlocked_r+0x2e0>)
 80a35e0:	6018      	str	r0, [r3, #0]
 80a35e2:	4baf      	ldr	r3, [pc, #700]	; (80a38a0 <_tzset_unlocked_r+0x2e4>)
 80a35e4:	6830      	ldr	r0, [r6, #0]
 80a35e6:	601a      	str	r2, [r3, #0]
 80a35e8:	605a      	str	r2, [r3, #4]
 80a35ea:	f7fd fbd3 	bl	80a0d94 <free>
 80a35ee:	6035      	str	r5, [r6, #0]
 80a35f0:	e148      	b.n	80a3884 <_tzset_unlocked_r+0x2c8>
 80a35f2:	6831      	ldr	r1, [r6, #0]
 80a35f4:	b979      	cbnz	r1, 80a3616 <_tzset_unlocked_r+0x5a>
 80a35f6:	6830      	ldr	r0, [r6, #0]
 80a35f8:	f7fd fbcc 	bl	80a0d94 <free>
 80a35fc:	4628      	mov	r0, r5
 80a35fe:	f7ff fde4 	bl	80a31ca <strlen>
 80a3602:	1c41      	adds	r1, r0, #1
 80a3604:	4638      	mov	r0, r7
 80a3606:	f7fd fbed 	bl	80a0de4 <_malloc_r>
 80a360a:	6030      	str	r0, [r6, #0]
 80a360c:	b148      	cbz	r0, 80a3622 <_tzset_unlocked_r+0x66>
 80a360e:	4629      	mov	r1, r5
 80a3610:	f7ff fdb8 	bl	80a3184 <strcpy>
 80a3614:	e005      	b.n	80a3622 <_tzset_unlocked_r+0x66>
 80a3616:	f7ff fdab 	bl	80a3170 <strcmp>
 80a361a:	2800      	cmp	r0, #0
 80a361c:	f000 8132 	beq.w	80a3884 <_tzset_unlocked_r+0x2c8>
 80a3620:	e7e9      	b.n	80a35f6 <_tzset_unlocked_r+0x3a>
 80a3622:	782b      	ldrb	r3, [r5, #0]
 80a3624:	ae0a      	add	r6, sp, #40	; 0x28
 80a3626:	2b3a      	cmp	r3, #58	; 0x3a
 80a3628:	bf08      	it	eq
 80a362a:	3501      	addeq	r5, #1
 80a362c:	4633      	mov	r3, r6
 80a362e:	4a9d      	ldr	r2, [pc, #628]	; (80a38a4 <_tzset_unlocked_r+0x2e8>)
 80a3630:	499d      	ldr	r1, [pc, #628]	; (80a38a8 <_tzset_unlocked_r+0x2ec>)
 80a3632:	4628      	mov	r0, r5
 80a3634:	f7fd fbbe 	bl	80a0db4 <siscanf>
 80a3638:	2800      	cmp	r0, #0
 80a363a:	f340 8123 	ble.w	80a3884 <_tzset_unlocked_r+0x2c8>
 80a363e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a3640:	18ef      	adds	r7, r5, r3
 80a3642:	5ceb      	ldrb	r3, [r5, r3]
 80a3644:	2b2d      	cmp	r3, #45	; 0x2d
 80a3646:	d103      	bne.n	80a3650 <_tzset_unlocked_r+0x94>
 80a3648:	3701      	adds	r7, #1
 80a364a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80a364e:	e003      	b.n	80a3658 <_tzset_unlocked_r+0x9c>
 80a3650:	2b2b      	cmp	r3, #43	; 0x2b
 80a3652:	bf08      	it	eq
 80a3654:	3701      	addeq	r7, #1
 80a3656:	2501      	movs	r5, #1
 80a3658:	f10d 0a20 	add.w	sl, sp, #32
 80a365c:	f10d 0b1e 	add.w	fp, sp, #30
 80a3660:	f04f 0800 	mov.w	r8, #0
 80a3664:	9603      	str	r6, [sp, #12]
 80a3666:	f8cd a008 	str.w	sl, [sp, #8]
 80a366a:	9601      	str	r6, [sp, #4]
 80a366c:	f8cd b000 	str.w	fp, [sp]
 80a3670:	4633      	mov	r3, r6
 80a3672:	aa07      	add	r2, sp, #28
 80a3674:	498d      	ldr	r1, [pc, #564]	; (80a38ac <_tzset_unlocked_r+0x2f0>)
 80a3676:	4638      	mov	r0, r7
 80a3678:	f8ad 801e 	strh.w	r8, [sp, #30]
 80a367c:	f8ad 8020 	strh.w	r8, [sp, #32]
 80a3680:	f7fd fb98 	bl	80a0db4 <siscanf>
 80a3684:	4540      	cmp	r0, r8
 80a3686:	f340 80fd 	ble.w	80a3884 <_tzset_unlocked_r+0x2c8>
 80a368a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a368e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a3692:	213c      	movs	r1, #60	; 0x3c
 80a3694:	fb01 3302 	mla	r3, r1, r2, r3
 80a3698:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a369c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a36a0:	fb01 3302 	mla	r3, r1, r2, r3
 80a36a4:	435d      	muls	r5, r3
 80a36a6:	4b7f      	ldr	r3, [pc, #508]	; (80a38a4 <_tzset_unlocked_r+0x2e8>)
 80a36a8:	6225      	str	r5, [r4, #32]
 80a36aa:	4d7d      	ldr	r5, [pc, #500]	; (80a38a0 <_tzset_unlocked_r+0x2e4>)
 80a36ac:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80a38b8 <_tzset_unlocked_r+0x2fc>
 80a36b0:	602b      	str	r3, [r5, #0]
 80a36b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a36b4:	464a      	mov	r2, r9
 80a36b6:	441f      	add	r7, r3
 80a36b8:	497b      	ldr	r1, [pc, #492]	; (80a38a8 <_tzset_unlocked_r+0x2ec>)
 80a36ba:	4633      	mov	r3, r6
 80a36bc:	4638      	mov	r0, r7
 80a36be:	f7fd fb79 	bl	80a0db4 <siscanf>
 80a36c2:	4540      	cmp	r0, r8
 80a36c4:	dc08      	bgt.n	80a36d8 <_tzset_unlocked_r+0x11c>
 80a36c6:	682b      	ldr	r3, [r5, #0]
 80a36c8:	6a22      	ldr	r2, [r4, #32]
 80a36ca:	606b      	str	r3, [r5, #4]
 80a36cc:	4b71      	ldr	r3, [pc, #452]	; (80a3894 <_tzset_unlocked_r+0x2d8>)
 80a36ce:	601a      	str	r2, [r3, #0]
 80a36d0:	4b72      	ldr	r3, [pc, #456]	; (80a389c <_tzset_unlocked_r+0x2e0>)
 80a36d2:	f8c3 8000 	str.w	r8, [r3]
 80a36d6:	e0d5      	b.n	80a3884 <_tzset_unlocked_r+0x2c8>
 80a36d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a36da:	f8c5 9004 	str.w	r9, [r5, #4]
 80a36de:	18fd      	adds	r5, r7, r3
 80a36e0:	5cfb      	ldrb	r3, [r7, r3]
 80a36e2:	2b2d      	cmp	r3, #45	; 0x2d
 80a36e4:	d103      	bne.n	80a36ee <_tzset_unlocked_r+0x132>
 80a36e6:	3501      	adds	r5, #1
 80a36e8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80a36ec:	e003      	b.n	80a36f6 <_tzset_unlocked_r+0x13a>
 80a36ee:	2b2b      	cmp	r3, #43	; 0x2b
 80a36f0:	bf08      	it	eq
 80a36f2:	3501      	addeq	r5, #1
 80a36f4:	2701      	movs	r7, #1
 80a36f6:	2300      	movs	r3, #0
 80a36f8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a36fc:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a3700:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a3704:	930a      	str	r3, [sp, #40]	; 0x28
 80a3706:	9603      	str	r6, [sp, #12]
 80a3708:	f8cd a008 	str.w	sl, [sp, #8]
 80a370c:	9601      	str	r6, [sp, #4]
 80a370e:	f8cd b000 	str.w	fp, [sp]
 80a3712:	4633      	mov	r3, r6
 80a3714:	aa07      	add	r2, sp, #28
 80a3716:	4965      	ldr	r1, [pc, #404]	; (80a38ac <_tzset_unlocked_r+0x2f0>)
 80a3718:	4628      	mov	r0, r5
 80a371a:	f7fd fb4b 	bl	80a0db4 <siscanf>
 80a371e:	2800      	cmp	r0, #0
 80a3720:	dc04      	bgt.n	80a372c <_tzset_unlocked_r+0x170>
 80a3722:	6a23      	ldr	r3, [r4, #32]
 80a3724:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80a3728:	63e3      	str	r3, [r4, #60]	; 0x3c
 80a372a:	e00e      	b.n	80a374a <_tzset_unlocked_r+0x18e>
 80a372c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a3730:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a3734:	213c      	movs	r1, #60	; 0x3c
 80a3736:	fb01 3302 	mla	r3, r1, r2, r3
 80a373a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a373e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a3742:	fb01 3302 	mla	r3, r1, r2, r3
 80a3746:	435f      	muls	r7, r3
 80a3748:	63e7      	str	r7, [r4, #60]	; 0x3c
 80a374a:	4627      	mov	r7, r4
 80a374c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a374e:	f04f 0900 	mov.w	r9, #0
 80a3752:	441d      	add	r5, r3
 80a3754:	782b      	ldrb	r3, [r5, #0]
 80a3756:	2b2c      	cmp	r3, #44	; 0x2c
 80a3758:	bf08      	it	eq
 80a375a:	3501      	addeq	r5, #1
 80a375c:	f895 8000 	ldrb.w	r8, [r5]
 80a3760:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80a3764:	d126      	bne.n	80a37b4 <_tzset_unlocked_r+0x1f8>
 80a3766:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80a376a:	9302      	str	r3, [sp, #8]
 80a376c:	ab09      	add	r3, sp, #36	; 0x24
 80a376e:	9300      	str	r3, [sp, #0]
 80a3770:	9603      	str	r6, [sp, #12]
 80a3772:	9601      	str	r6, [sp, #4]
 80a3774:	4633      	mov	r3, r6
 80a3776:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80a377a:	494d      	ldr	r1, [pc, #308]	; (80a38b0 <_tzset_unlocked_r+0x2f4>)
 80a377c:	4628      	mov	r0, r5
 80a377e:	f7fd fb19 	bl	80a0db4 <siscanf>
 80a3782:	2803      	cmp	r0, #3
 80a3784:	d17e      	bne.n	80a3884 <_tzset_unlocked_r+0x2c8>
 80a3786:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80a378a:	1e4b      	subs	r3, r1, #1
 80a378c:	2b0b      	cmp	r3, #11
 80a378e:	d879      	bhi.n	80a3884 <_tzset_unlocked_r+0x2c8>
 80a3790:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80a3794:	1e53      	subs	r3, r2, #1
 80a3796:	2b04      	cmp	r3, #4
 80a3798:	d874      	bhi.n	80a3884 <_tzset_unlocked_r+0x2c8>
 80a379a:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80a379e:	2b06      	cmp	r3, #6
 80a37a0:	d870      	bhi.n	80a3884 <_tzset_unlocked_r+0x2c8>
 80a37a2:	f887 8008 	strb.w	r8, [r7, #8]
 80a37a6:	60f9      	str	r1, [r7, #12]
 80a37a8:	613a      	str	r2, [r7, #16]
 80a37aa:	617b      	str	r3, [r7, #20]
 80a37ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a37ae:	eb05 0803 	add.w	r8, r5, r3
 80a37b2:	e02a      	b.n	80a380a <_tzset_unlocked_r+0x24e>
 80a37b4:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80a37b8:	bf06      	itte	eq
 80a37ba:	4643      	moveq	r3, r8
 80a37bc:	3501      	addeq	r5, #1
 80a37be:	2344      	movne	r3, #68	; 0x44
 80a37c0:	220a      	movs	r2, #10
 80a37c2:	a90b      	add	r1, sp, #44	; 0x2c
 80a37c4:	4628      	mov	r0, r5
 80a37c6:	9305      	str	r3, [sp, #20]
 80a37c8:	f7ff fe3e 	bl	80a3448 <strtoul>
 80a37cc:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80a37d0:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80a37d4:	4545      	cmp	r5, r8
 80a37d6:	9b05      	ldr	r3, [sp, #20]
 80a37d8:	d114      	bne.n	80a3804 <_tzset_unlocked_r+0x248>
 80a37da:	234d      	movs	r3, #77	; 0x4d
 80a37dc:	f1b9 0f00 	cmp.w	r9, #0
 80a37e0:	d107      	bne.n	80a37f2 <_tzset_unlocked_r+0x236>
 80a37e2:	7223      	strb	r3, [r4, #8]
 80a37e4:	2303      	movs	r3, #3
 80a37e6:	60e3      	str	r3, [r4, #12]
 80a37e8:	2302      	movs	r3, #2
 80a37ea:	6123      	str	r3, [r4, #16]
 80a37ec:	f8c4 9014 	str.w	r9, [r4, #20]
 80a37f0:	e00b      	b.n	80a380a <_tzset_unlocked_r+0x24e>
 80a37f2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80a37f6:	230b      	movs	r3, #11
 80a37f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80a37fa:	2301      	movs	r3, #1
 80a37fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80a37fe:	2300      	movs	r3, #0
 80a3800:	6323      	str	r3, [r4, #48]	; 0x30
 80a3802:	e002      	b.n	80a380a <_tzset_unlocked_r+0x24e>
 80a3804:	b280      	uxth	r0, r0
 80a3806:	723b      	strb	r3, [r7, #8]
 80a3808:	6178      	str	r0, [r7, #20]
 80a380a:	2302      	movs	r3, #2
 80a380c:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a3810:	2300      	movs	r3, #0
 80a3812:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a3816:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a381a:	930a      	str	r3, [sp, #40]	; 0x28
 80a381c:	f898 3000 	ldrb.w	r3, [r8]
 80a3820:	2b2f      	cmp	r3, #47	; 0x2f
 80a3822:	d10b      	bne.n	80a383c <_tzset_unlocked_r+0x280>
 80a3824:	9603      	str	r6, [sp, #12]
 80a3826:	f8cd a008 	str.w	sl, [sp, #8]
 80a382a:	9601      	str	r6, [sp, #4]
 80a382c:	f8cd b000 	str.w	fp, [sp]
 80a3830:	4633      	mov	r3, r6
 80a3832:	aa07      	add	r2, sp, #28
 80a3834:	491f      	ldr	r1, [pc, #124]	; (80a38b4 <_tzset_unlocked_r+0x2f8>)
 80a3836:	4640      	mov	r0, r8
 80a3838:	f7fd fabc 	bl	80a0db4 <siscanf>
 80a383c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a3840:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a3844:	213c      	movs	r1, #60	; 0x3c
 80a3846:	fb01 3302 	mla	r3, r1, r2, r3
 80a384a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a384e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a3852:	fb01 3302 	mla	r3, r1, r2, r3
 80a3856:	61bb      	str	r3, [r7, #24]
 80a3858:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80a385a:	f109 0901 	add.w	r9, r9, #1
 80a385e:	f1b9 0f02 	cmp.w	r9, #2
 80a3862:	4445      	add	r5, r8
 80a3864:	f107 071c 	add.w	r7, r7, #28
 80a3868:	f47f af74 	bne.w	80a3754 <_tzset_unlocked_r+0x198>
 80a386c:	6860      	ldr	r0, [r4, #4]
 80a386e:	f7ff fdf5 	bl	80a345c <__tzcalc_limits>
 80a3872:	6a22      	ldr	r2, [r4, #32]
 80a3874:	4b07      	ldr	r3, [pc, #28]	; (80a3894 <_tzset_unlocked_r+0x2d8>)
 80a3876:	601a      	str	r2, [r3, #0]
 80a3878:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a387a:	1a9b      	subs	r3, r3, r2
 80a387c:	4a07      	ldr	r2, [pc, #28]	; (80a389c <_tzset_unlocked_r+0x2e0>)
 80a387e:	bf18      	it	ne
 80a3880:	2301      	movne	r3, #1
 80a3882:	6013      	str	r3, [r2, #0]
 80a3884:	b00d      	add	sp, #52	; 0x34
 80a3886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a388a:	bf00      	nop
 80a388c:	080a4044 	.word	0x080a4044
 80a3890:	20000864 	.word	0x20000864
 80a3894:	2000086c 	.word	0x2000086c
 80a3898:	080a4047 	.word	0x080a4047
 80a389c:	20000868 	.word	0x20000868
 80a38a0:	20000144 	.word	0x20000144
 80a38a4:	20000857 	.word	0x20000857
 80a38a8:	080a404b 	.word	0x080a404b
 80a38ac:	080a406e 	.word	0x080a406e
 80a38b0:	080a405a 	.word	0x080a405a
 80a38b4:	080a406d 	.word	0x080a406d
 80a38b8:	2000084c 	.word	0x2000084c

080a38bc <_findenv_r>:
 80a38bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a38c0:	4607      	mov	r7, r0
 80a38c2:	468b      	mov	fp, r1
 80a38c4:	4690      	mov	r8, r2
 80a38c6:	f000 f8d7 	bl	80a3a78 <__env_lock>
 80a38ca:	4b19      	ldr	r3, [pc, #100]	; (80a3930 <_findenv_r+0x74>)
 80a38cc:	681d      	ldr	r5, [r3, #0]
 80a38ce:	469a      	mov	sl, r3
 80a38d0:	b13d      	cbz	r5, 80a38e2 <_findenv_r+0x26>
 80a38d2:	465c      	mov	r4, fp
 80a38d4:	4623      	mov	r3, r4
 80a38d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a38da:	b142      	cbz	r2, 80a38ee <_findenv_r+0x32>
 80a38dc:	2a3d      	cmp	r2, #61	; 0x3d
 80a38de:	461c      	mov	r4, r3
 80a38e0:	d1f8      	bne.n	80a38d4 <_findenv_r+0x18>
 80a38e2:	4638      	mov	r0, r7
 80a38e4:	f000 f8c9 	bl	80a3a7a <__env_unlock>
 80a38e8:	2000      	movs	r0, #0
 80a38ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a38ee:	ebcb 0404 	rsb	r4, fp, r4
 80a38f2:	46a9      	mov	r9, r5
 80a38f4:	f859 0b04 	ldr.w	r0, [r9], #4
 80a38f8:	2800      	cmp	r0, #0
 80a38fa:	d0f2      	beq.n	80a38e2 <_findenv_r+0x26>
 80a38fc:	4622      	mov	r2, r4
 80a38fe:	4659      	mov	r1, fp
 80a3900:	f7ff fc6b 	bl	80a31da <strncmp>
 80a3904:	b988      	cbnz	r0, 80a392a <_findenv_r+0x6e>
 80a3906:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80a390a:	191e      	adds	r6, r3, r4
 80a390c:	5d1b      	ldrb	r3, [r3, r4]
 80a390e:	2b3d      	cmp	r3, #61	; 0x3d
 80a3910:	d10b      	bne.n	80a392a <_findenv_r+0x6e>
 80a3912:	f8da 3000 	ldr.w	r3, [sl]
 80a3916:	4638      	mov	r0, r7
 80a3918:	1aed      	subs	r5, r5, r3
 80a391a:	10ad      	asrs	r5, r5, #2
 80a391c:	f8c8 5000 	str.w	r5, [r8]
 80a3920:	f000 f8ab 	bl	80a3a7a <__env_unlock>
 80a3924:	1c70      	adds	r0, r6, #1
 80a3926:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a392a:	464d      	mov	r5, r9
 80a392c:	e7e1      	b.n	80a38f2 <_findenv_r+0x36>
 80a392e:	bf00      	nop
 80a3930:	2000018c 	.word	0x2000018c

080a3934 <_getenv_r>:
 80a3934:	b507      	push	{r0, r1, r2, lr}
 80a3936:	aa01      	add	r2, sp, #4
 80a3938:	f7ff ffc0 	bl	80a38bc <_findenv_r>
 80a393c:	b003      	add	sp, #12
 80a393e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a3944 <__gettzinfo>:
 80a3944:	4800      	ldr	r0, [pc, #0]	; (80a3948 <__gettzinfo+0x4>)
 80a3946:	4770      	bx	lr
 80a3948:	2000014c 	.word	0x2000014c

080a394c <gmtime_r>:
 80a394c:	6802      	ldr	r2, [r0, #0]
 80a394e:	4b46      	ldr	r3, [pc, #280]	; (80a3a68 <gmtime_r+0x11c>)
 80a3950:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3952:	fb92 f4f3 	sdiv	r4, r2, r3
 80a3956:	fb03 2214 	mls	r2, r3, r4, r2
 80a395a:	2a00      	cmp	r2, #0
 80a395c:	bfbc      	itt	lt
 80a395e:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80a3962:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80a3966:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80a396a:	fb92 f3f0 	sdiv	r3, r2, r0
 80a396e:	fb00 2213 	mls	r2, r0, r3, r2
 80a3972:	f04f 003c 	mov.w	r0, #60	; 0x3c
 80a3976:	608b      	str	r3, [r1, #8]
 80a3978:	fb92 f3f0 	sdiv	r3, r2, r0
 80a397c:	fb00 2213 	mls	r2, r0, r3, r2
 80a3980:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 80a3984:	bfac      	ite	ge
 80a3986:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 80a398a:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 80a398e:	604b      	str	r3, [r1, #4]
 80a3990:	600a      	str	r2, [r1, #0]
 80a3992:	2307      	movs	r3, #7
 80a3994:	1ce2      	adds	r2, r4, #3
 80a3996:	fb92 f3f3 	sdiv	r3, r2, r3
 80a399a:	4d34      	ldr	r5, [pc, #208]	; (80a3a6c <gmtime_r+0x120>)
 80a399c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a39a0:	fb94 f5f5 	sdiv	r5, r4, r5
 80a39a4:	1ad3      	subs	r3, r2, r3
 80a39a6:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80a39aa:	f240 57b4 	movw	r7, #1460	; 0x5b4
 80a39ae:	618b      	str	r3, [r1, #24]
 80a39b0:	4b2f      	ldr	r3, [pc, #188]	; (80a3a70 <gmtime_r+0x124>)
 80a39b2:	4830      	ldr	r0, [pc, #192]	; (80a3a74 <gmtime_r+0x128>)
 80a39b4:	fb03 4405 	mla	r4, r3, r5, r4
 80a39b8:	fbb4 f2f2 	udiv	r2, r4, r2
 80a39bc:	fbb4 f3f7 	udiv	r3, r4, r7
 80a39c0:	fbb4 f0f0 	udiv	r0, r4, r0
 80a39c4:	4422      	add	r2, r4
 80a39c6:	1ad2      	subs	r2, r2, r3
 80a39c8:	f648 6694 	movw	r6, #36500	; 0x8e94
 80a39cc:	1a13      	subs	r3, r2, r0
 80a39ce:	f240 126d 	movw	r2, #365	; 0x16d
 80a39d2:	fbb3 f6f6 	udiv	r6, r3, r6
 80a39d6:	fbb3 f0f2 	udiv	r0, r3, r2
 80a39da:	fbb3 f3f7 	udiv	r3, r3, r7
 80a39de:	4434      	add	r4, r6
 80a39e0:	1ae3      	subs	r3, r4, r3
 80a39e2:	fb02 3310 	mls	r3, r2, r0, r3
 80a39e6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80a39ea:	2499      	movs	r4, #153	; 0x99
 80a39ec:	3202      	adds	r2, #2
 80a39ee:	fbb2 f2f4 	udiv	r2, r2, r4
 80a39f2:	4354      	muls	r4, r2
 80a39f4:	1ca6      	adds	r6, r4, #2
 80a39f6:	2405      	movs	r4, #5
 80a39f8:	fbb6 f4f4 	udiv	r4, r6, r4
 80a39fc:	2a0a      	cmp	r2, #10
 80a39fe:	bf34      	ite	cc
 80a3a00:	2602      	movcc	r6, #2
 80a3a02:	f06f 0609 	mvncs.w	r6, #9
 80a3a06:	4416      	add	r6, r2
 80a3a08:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a3a0c:	fb02 0505 	mla	r5, r2, r5, r0
 80a3a10:	1c5f      	adds	r7, r3, #1
 80a3a12:	2e01      	cmp	r6, #1
 80a3a14:	bf98      	it	ls
 80a3a16:	3501      	addls	r5, #1
 80a3a18:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80a3a1c:	eba7 0704 	sub.w	r7, r7, r4
 80a3a20:	d302      	bcc.n	80a3a28 <gmtime_r+0xdc>
 80a3a22:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 80a3a26:	e014      	b.n	80a3a52 <gmtime_r+0x106>
 80a3a28:	0782      	lsls	r2, r0, #30
 80a3a2a:	d105      	bne.n	80a3a38 <gmtime_r+0xec>
 80a3a2c:	2464      	movs	r4, #100	; 0x64
 80a3a2e:	fbb0 f2f4 	udiv	r2, r0, r4
 80a3a32:	fb04 0212 	mls	r2, r4, r2, r0
 80a3a36:	b94a      	cbnz	r2, 80a3a4c <gmtime_r+0x100>
 80a3a38:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a3a3c:	fbb0 f4f2 	udiv	r4, r0, r2
 80a3a40:	fb02 0014 	mls	r0, r2, r4, r0
 80a3a44:	fab0 f280 	clz	r2, r0
 80a3a48:	0952      	lsrs	r2, r2, #5
 80a3a4a:	e000      	b.n	80a3a4e <gmtime_r+0x102>
 80a3a4c:	2201      	movs	r2, #1
 80a3a4e:	333b      	adds	r3, #59	; 0x3b
 80a3a50:	441a      	add	r2, r3
 80a3a52:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 80a3a56:	2300      	movs	r3, #0
 80a3a58:	61ca      	str	r2, [r1, #28]
 80a3a5a:	614d      	str	r5, [r1, #20]
 80a3a5c:	610e      	str	r6, [r1, #16]
 80a3a5e:	60cf      	str	r7, [r1, #12]
 80a3a60:	620b      	str	r3, [r1, #32]
 80a3a62:	4608      	mov	r0, r1
 80a3a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a3a66:	bf00      	nop
 80a3a68:	00015180 	.word	0x00015180
 80a3a6c:	00023ab1 	.word	0x00023ab1
 80a3a70:	fffdc54f 	.word	0xfffdc54f
 80a3a74:	00023ab0 	.word	0x00023ab0

080a3a78 <__env_lock>:
 80a3a78:	4770      	bx	lr

080a3a7a <__env_unlock>:
 80a3a7a:	4770      	bx	lr

080a3a7c <dynalib_user>:
 80a3a7c:	0021 080a 0061 080a 008d 080a 0091 080a     !...a...........
 80a3a8c:	0000 0000 7453 7261 7574 2070 7553 6363     ....Startup Succ
 80a3a9c:	7365 6673 6c75 0000 0000 0000 0000 0000     essful..........
	...
 80a3ad0:	227b 7563 7272 6e65 2274 253a 2e33 6631     {"current":%3.1f
 80a3ae0:	202c 7222 7761 635f 7275 6572 746e 3a22     , "raw_current":
 80a3af0:	6625 007d 7563 7272 6e65 2d74 6577 6862     %f}.current-webh
 80a3b00:	6f6f 006b 6f4e 4420 7461 0061 6255 6469     ook.No Data.Ubid
 80a3b10:	746f 2073 6f48 6b6f 5200 7365 6f70 736e     ots Hook.Respons
 80a3b20:	2065 6552 6563 7669 6465 5300 6174 6574     e Received.State
 80a3b30:	5300 7465 5620 7265 6f62 6573 4d20 646f     .Set Verbose Mod
 80a3b40:	0065 0030 6c43 6165 6572 2064 6556 6272     e.0.Cleared Verb
 80a3b50:	736f 2065 6f4d 6564 4600 6f72 206d 7325     ose Mode.From %s
 80a3b60:	7420 206f 7325 5300 6174 6574 5420 6172      to %s.State Tra
 80a3b70:	736e 7469 6f69 006e 7073 7261 2f6b 6564     nsition.spark/de
 80a3b80:	6976 6563 732f 7365 6973 6e6f 652f 646e     vice/session/end
 80a3b90:	4500 7272 726f 5320 6174 6574 2d20 5220     .Error State - R
 80a3ba0:	7365 7465 4300 6d6f 616d 646e 6120 6363     eset.Command acc
 80a3bb0:	7065 6574 2064 202d 6573 736e 6e69 2067     epted - sensing 
 80a3bc0:	6f6e 0077 7546 636e 6974 6e6f 4300 6d6f     now.Function.Com
 80a3bd0:	616d 646e 6120 6363 7065 6574 2064 202d     mand accepted - 
 80a3be0:	6572 6f70 7472 6e69 2067 6f6e 0077 6576     reporting now.ve
 80a3bf0:	6272 736f 4d65 646f 0065 6547 2d74 6552     rboseMode.Get-Re
 80a3c00:	6461 6e69 0067 6553 646e 522d 7065 726f     ading.Send-Repor
 80a3c10:	0074 6146 6c69 6465 7420 206f 6f63 6e6e     t.Failed to conn
 80a3c20:	6365 0074 7453 7261 7574 0070 2e31 3130     ect.Startup.1.01
 80a3c30:	0000 0000                                   ....

080a3c34 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a3c3c:	0e33 080a 0e39 080a 0e8f 080a 0e47 080a     3...9.......G...
 80a3c4c:	0e35 080a                                   5...

080a3c50 <_ZTV7TwoWire>:
	...
 80a3c58:	147d 080a 14c7 080a 149f 080a 147f 080a     }...............
 80a3c68:	14a7 080a 14af 080a 14b7 080a 14bf 080a     ................

080a3c78 <_ZTV9IPAddress>:
	...
 80a3c80:	1511 080a 1501 080a 1503 080a 6162 6475     ............baud
 80a3c90:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a3ca0:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a3cb0:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a3cc0:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a3cd0:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a3ce0:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a3cf0:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a3d00:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a3d10:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 80a3d20:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 80a3d30:	3d20 0020 0a0d 6600 6c00 006e 6e66 6300      = ....f.ln.fn.c
 80a3d40:	646f 0065 6564 6174 6c69 6e00 6e6f 0065     ode.detail.none.
 80a3d50:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
 80a3d60:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.

080a3d70 <_ZTVN5spark12NetworkClassE>:
	...
 80a3d78:	15d9 080a 15e3 080a 15ed 080a 15f7 080a     ................
 80a3d88:	1601 080a 160d 080a 1619 080a 1625 080a     ............%...
 80a3d98:	162d 080a 1637 080a 1641 080a               -...7...A...

080a3da4 <_ZTV8SPIClass>:
	...
 80a3dac:	1789 080a 17a1 080a 2b25 3330 3a64 3025     ........%+03d:%0
 80a3dbc:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
 80a3dcc:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

080a3ddc <_ZTV11USARTSerial>:
	...
 80a3de4:	1aa5 080a 1af5 080a 1b03 080a 16a5 080a     ................
 80a3df4:	1ab9 080a 1adb 080a 1ac7 080a 1aef 080a     ................
 80a3e04:	1aa7 080a 1aab 080a                         ........

080a3e0c <_ZTV9USBSerial>:
	...
 80a3e14:	1bad 080a 1bfd 080a 1c0b 080a 16a5 080a     ................
 80a3e24:	1be9 080a 1baf 080a 1bc5 080a 1bf7 080a     ................
 80a3e34:	1bdb 080a 1ba9 080a                         ........

080a3e3c <_ZTVN5spark9WiFiClassE>:
	...
 80a3e44:	1def 080a 1de5 080a 1ddb 080a 1d4d 080a     ............M...
 80a3e54:	1dcf 080a 1dc3 080a 1db7 080a 1daf 080a     ................
 80a3e64:	1da5 080a 1d9b 080a 1d57 080a               ........W...

080a3e70 <_ZSt7nothrow>:
 80a3e70:	0000 0000 7173 7472 0000 0000               ....sqrt....

080a3e7c <_ctype_>:
 80a3e7c:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80a3e8c:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80a3e9c:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80a3eac:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80a3ebc:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80a3ecc:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80a3edc:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80a3eec:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80a3efc:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080a3f80 <__sf_fake_stdin>:
	...

080a3fa0 <__sf_fake_stdout>:
	...

080a3fc0 <__sf_fake_stderr>:
	...
 80a3fe0:	0043 0000                                   C...

080a3fe4 <__month_lengths>:
 80a3fe4:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80a3ff4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a4004:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a4014:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80a4024:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a4034:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a4044:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
 80a4054:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
 80a4064:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
 80a4074:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

080a4080 <link_const_variable_data_end>:
 80a4080:	080a0829 	.word	0x080a0829
 80a4084:	080a0955 	.word	0x080a0955
 80a4088:	080a15c9 	.word	0x080a15c9
 80a408c:	080a1691 	.word	0x080a1691
 80a4090:	080a176d 	.word	0x080a176d
 80a4094:	080a1951 	.word	0x080a1951
 80a4098:	080a1a91 	.word	0x080a1a91
 80a409c:	080a1df9 	.word	0x080a1df9
 80a40a0:	080a2039 	.word	0x080a2039
 80a40a4:	080a20f1 	.word	0x080a20f1
 80a40a8:	080a21b5 	.word	0x080a21b5
 80a40ac:	080a2239 	.word	0x080a2239
 80a40b0:	080a22bd 	.word	0x080a22bd

080a40b4 <link_constructors_end>:
	...
