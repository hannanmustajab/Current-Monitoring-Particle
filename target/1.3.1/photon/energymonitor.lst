
/Users/abdulhannanmustajab/Desktop/Projects/IoT/Particle/energyMonitor/energymonitor/target/1.3.1/photon/energymonitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003f60  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a3f80  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000190  20000000  080a3f84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000006c0  20000190  20000190  00030190  2**3
                  ALLOC
  6 .module_info_suffix 00000028  080a4114  080a4114  00024114  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a413c  080a413c  0002413c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000b0c82  00000000  00000000  00024140  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000fd6e  00000000  00000000  000d4dc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001350d  00000000  00000000  000e4b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001fe8  00000000  00000000  000f803d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000032f0  00000000  00000000  000fa025  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00024bd4  00000000  00000000  000fd315  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00024a86  00000000  00000000  00121ee9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a6525  00000000  00000000  0014696f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000be0c  00000000  00000000  001ece94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f002 ffbf 	bl	80a2fb4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f002 ffc4 	bl	80a2fca <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a3f84 	.word	0x080a3f84
 80a0050:	20000190 	.word	0x20000190
 80a0054:	20000190 	.word	0x20000190
 80a0058:	20000850 	.word	0x20000850
 80a005c:	20000850 	.word	0x20000850

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f001 feff 	bl	80a1e64 <module_user_init_hook>
 80a0066:	4b07      	ldr	r3, [pc, #28]	; (80a0084 <module_user_init+0x24>)
 80a0068:	4c07      	ldr	r4, [pc, #28]	; (80a0088 <module_user_init+0x28>)
 80a006a:	461e      	mov	r6, r3
 80a006c:	1ae4      	subs	r4, r4, r3
 80a006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0070:	2500      	movs	r5, #0
 80a0072:	42a5      	cmp	r5, r4
 80a0074:	d004      	beq.n	80a0080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f8      	b.n	80a0072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0080:	bd70      	pop	{r4, r5, r6, pc}
 80a0082:	bf00      	nop
 80a0084:	080a3f40 	.word	0x080a3f40
 80a0088:	080a3f78 	.word	0x080a3f78

080a008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a008c:	f000 bb1c 	b.w	80a06c8 <setup>

080a0090 <module_user_loop>:
}

void module_user_loop() {
 80a0090:	b508      	push	{r3, lr}
    loop();
 80a0092:	f000 f99d 	bl	80a03d0 <loop>
    _post_loop();
}
 80a0096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a009a:	f001 bea5 	b.w	80a1de8 <_post_loop>

080a009e <_Znwj>:
 80a009e:	f000 be45 	b.w	80a0d2c <malloc>

080a00a2 <_ZdlPv>:
 80a00a2:	f000 be4b 	b.w	80a0d3c <free>

080a00a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a6:	7800      	ldrb	r0, [r0, #0]
 80a00a8:	fab0 f080 	clz	r0, r0
 80a00ac:	0940      	lsrs	r0, r0, #5
 80a00ae:	4770      	bx	lr

080a00b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b0:	2301      	movs	r3, #1
 80a00b2:	7003      	strb	r3, [r0, #0]
 80a00b4:	4770      	bx	lr

080a00b6 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a00b6:	2a01      	cmp	r2, #1
 80a00b8:	d002      	beq.n	80a00c0 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xa>
 80a00ba:	2a02      	cmp	r2, #2
 80a00bc:	d002      	beq.n	80a00c4 <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>
 80a00be:	e004      	b.n	80a00ca <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a00c0:	6001      	str	r1, [r0, #0]
	      break;
 80a00c2:	e002      	b.n	80a00ca <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80a00c4:	680b      	ldr	r3, [r1, #0]
 80a00c6:	b100      	cbz	r0, 80a00ca <_ZNSt14_Function_base13_Base_managerIPFb6StringEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
 80a00c8:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a00ca:	2000      	movs	r0, #0
 80a00cc:	4770      	bx	lr

080a00ce <_ZNSt17_Function_handlerIFi6StringEPFbS0_EE9_M_invokeERKSt9_Any_dataOS0_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

    public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a00ce:	b51f      	push	{r0, r1, r2, r3, r4, lr}
      {
	return (*_Base::_M_get_pointer(__functor))(
 80a00d0:	6804      	ldr	r4, [r0, #0]
 80a00d2:	4668      	mov	r0, sp
 80a00d4:	f001 fb59 	bl	80a178a <_ZN6StringC1EOS_>
 80a00d8:	4668      	mov	r0, sp
 80a00da:	47a0      	blx	r4
 80a00dc:	4604      	mov	r4, r0
 80a00de:	4668      	mov	r0, sp
 80a00e0:	f001 fb63 	bl	80a17aa <_ZN6StringD1Ev>
	    std::forward<_ArgTypes>(__args)...);
      }
 80a00e4:	4620      	mov	r0, r4
 80a00e6:	b004      	add	sp, #16
 80a00e8:	bd10      	pop	{r4, pc}

080a00ea <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.39.constprop.51>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
 80a00ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a00ec:	4605      	mov	r5, r0
 80a00ee:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80a00f2:	4323      	orrs	r3, r4
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a00f4:	f88d 3000 	strb.w	r3, [sp]
 80a00f8:	233c      	movs	r3, #60	; 0x3c
 80a00fa:	f001 f811 	bl	80a1120 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }
 80a00fe:	4628      	mov	r0, r5
 80a0100:	b003      	add	sp, #12
 80a0102:	bd30      	pop	{r4, r5, pc}

080a0104 <_Z16takeMeasurementsv>:
    Particle.publish("Ubidots Hook", data, PRIVATE);                              // Publish the response code
  }

}

bool takeMeasurements(){
 80a0104:	b508      	push	{r3, lr}
  double current_irms = emon1.calcIrms(1480);                                               // Calculate Irms only
 80a0106:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
 80a010a:	4802      	ldr	r0, [pc, #8]	; (80a0114 <_Z16takeMeasurementsv+0x10>)
 80a010c:	f000 fb9c 	bl	80a0848 <_ZN13EnergyMonitor8calcIrmsEj>
  return 1;
}
 80a0110:	2001      	movs	r0, #1
 80a0112:	bd08      	pop	{r3, pc}
 80a0114:	200001b8 	.word	0x200001b8

080a0118 <_Z17connectToParticlev>:
// They are intended to allow for customization and control during installations
// and to allow for management.


// These functions control the connection and disconnection from Particle
bool connectToParticle() {
 80a0118:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 80a011c:	f000 fd76 	bl	80a0c0c <spark_cloud_flag_connect>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a0120:	f240 36e7 	movw	r6, #999	; 0x3e7
 80a0124:	f44f 7496 	mov.w	r4, #300	; 0x12c
 80a0128:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 80a012a:	2000      	movs	r0, #0
 80a012c:	f000 fc28 	bl	80a0980 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a0130:	4680      	mov	r8, r0
 80a0132:	f04f 0900 	mov.w	r9, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 80a0136:	2000      	movs	r0, #0
 80a0138:	f000 fc22 	bl	80a0980 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a013c:	ebb0 0008 	subs.w	r0, r0, r8
 80a0140:	eb61 0109 	sbc.w	r1, r1, r9
 80a0144:	428f      	cmp	r7, r1
 80a0146:	bf08      	it	eq
 80a0148:	4286      	cmpeq	r6, r0
 80a014a:	d305      	bcc.n	80a0158 <_Z17connectToParticlev+0x40>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a014c:	f000 fd66 	bl	80a0c1c <spark_cloud_flag_connected>
 80a0150:	b910      	cbnz	r0, 80a0158 <_Z17connectToParticlev+0x40>
            spark_process();
 80a0152:	f000 fd53 	bl	80a0bfc <spark_process>
 80a0156:	e7ee      	b.n	80a0136 <_Z17connectToParticlev+0x1e>
 80a0158:	f000 fd60 	bl	80a0c1c <spark_cloud_flag_connected>
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
 80a015c:	b118      	cbz	r0, 80a0166 <_Z17connectToParticlev+0x4e>
    Particle.process();
  }
  if (Particle.connected()) return 1;                               // Were able to connect successfully
  else return 0;                                                    // Failed to connect
}
 80a015e:	e8bd 43d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, lr}
 80a0162:	f000 bd5b 	b.w	80a0c1c <spark_cloud_flag_connected>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0166:	f000 fbf3 	bl	80a0950 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a016a:	4b03      	ldr	r3, [pc, #12]	; (80a0178 <_Z17connectToParticlev+0x60>)
 80a016c:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 80a016e:	f000 fd45 	bl	80a0bfc <spark_process>

// These functions control the connection and disconnection from Particle
bool connectToParticle() {
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
 80a0172:	3c01      	subs	r4, #1
 80a0174:	d0f3      	beq.n	80a015e <_Z17connectToParticlev+0x46>
 80a0176:	e7d8      	b.n	80a012a <_Z17connectToParticlev+0x12>
 80a0178:	20000734 	.word	0x20000734

080a017c <_Z20meterParticlePublishv>:
  }
  Serial.println(stateTransitionString);
}

bool meterParticlePublish(void)
{
 80a017c:	b508      	push	{r3, lr}
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a017e:	f000 fbe7 	bl	80a0950 <HAL_Timer_Get_Milli_Seconds>
  if(millis() - lastPublish >= publishFrequency) return 1;
 80a0182:	4b04      	ldr	r3, [pc, #16]	; (80a0194 <_Z20meterParticlePublishv+0x18>)
 80a0184:	681b      	ldr	r3, [r3, #0]
 80a0186:	1ac0      	subs	r0, r0, r3
  else return 0;
}
 80a0188:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80a018c:	bf34      	ite	cc
 80a018e:	2000      	movcc	r0, #0
 80a0190:	2001      	movcs	r0, #1
 80a0192:	bd08      	pop	{r3, pc}
 80a0194:	200001ac 	.word	0x200001ac

080a0198 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.24>:
        }
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
 80a0198:	b508      	push	{r3, lr}

bool sendNow(String Command)                                                      // This command lets you force a reporting cycle
{
  if (Command == "1") {
    state = REPORTING_STATE;                                                      // Set the state to reporting
    waitUntil(meterParticlePublish);  
 80a019a:	f7ff ffef 	bl	80a017c <_Z20meterParticlePublishv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a019e:	b118      	cbz	r0, 80a01a8 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.24+0x10>
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }
 80a01a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80a01a4:	f7ff bfea 	b.w	80a017c <_Z20meterParticlePublishv>

    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
            spark_process();
 80a01a8:	f000 fd28 	bl	80a0bfc <spark_process>
 80a01ac:	e7f5      	b.n	80a019a <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.24+0x2>

080a01ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a01ae:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a01b0:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a01b2:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a01b4:	b17c      	cbz	r4, 80a01d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a01b6:	6863      	ldr	r3, [r4, #4]
 80a01b8:	3b01      	subs	r3, #1
 80a01ba:	6063      	str	r3, [r4, #4]
 80a01bc:	b95b      	cbnz	r3, 80a01d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a01be:	6823      	ldr	r3, [r4, #0]
 80a01c0:	4620      	mov	r0, r4
 80a01c2:	689b      	ldr	r3, [r3, #8]
 80a01c4:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a01c6:	68a3      	ldr	r3, [r4, #8]
 80a01c8:	3b01      	subs	r3, #1
 80a01ca:	60a3      	str	r3, [r4, #8]
 80a01cc:	b91b      	cbnz	r3, 80a01d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a01ce:	6823      	ldr	r3, [r4, #0]
 80a01d0:	4620      	mov	r0, r4
 80a01d2:	68db      	ldr	r3, [r3, #12]
 80a01d4:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a01d6:	4628      	mov	r0, r5
 80a01d8:	bd38      	pop	{r3, r4, r5, pc}
	...

080a01dc <_Z9sendEventv>:
}



void sendEvent()
{
 80a01dc:	b500      	push	{lr}
  char data[32];
  snprintf(data, sizeof(data), "{\"current\":%4.1f}",emon1.calcIrms(1480));
 80a01de:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
}



void sendEvent()
{
 80a01e2:	b08d      	sub	sp, #52	; 0x34
  char data[32];
  snprintf(data, sizeof(data), "{\"current\":%4.1f}",emon1.calcIrms(1480));
 80a01e4:	4812      	ldr	r0, [pc, #72]	; (80a0230 <_Z9sendEventv+0x54>)
 80a01e6:	f000 fb2f 	bl	80a0848 <_ZN13EnergyMonitor8calcIrmsEj>
 80a01ea:	4a12      	ldr	r2, [pc, #72]	; (80a0234 <_Z9sendEventv+0x58>)
 80a01ec:	e9cd 0100 	strd	r0, r1, [sp]
 80a01f0:	2120      	movs	r1, #32
 80a01f2:	a804      	add	r0, sp, #16
 80a01f4:	f000 fdba 	bl	80a0d6c <snprintf>
 80a01f8:	4b0f      	ldr	r3, [pc, #60]	; (80a0238 <_Z9sendEventv+0x5c>)
  Particle.publish("current-webhook", data, PRIVATE);
 80a01fa:	2200      	movs	r2, #0
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 80a01fc:	781b      	ldrb	r3, [r3, #0]
 80a01fe:	490f      	ldr	r1, [pc, #60]	; (80a023c <_Z9sendEventv+0x60>)
 80a0200:	f88d 2000 	strb.w	r2, [sp]
 80a0204:	a802      	add	r0, sp, #8
 80a0206:	aa04      	add	r2, sp, #16
 80a0208:	f7ff ff6f 	bl	80a00ea <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.39.constprop.51>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a020c:	a803      	add	r0, sp, #12
 80a020e:	f7ff ffce 	bl	80a01ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  currentHourlyPeriod = Time.hour();                                                        // Change the time period
 80a0212:	f001 fbe5 	bl	80a19e0 <_ZN9TimeClass4hourEv>
 80a0216:	4b0a      	ldr	r3, [pc, #40]	; (80a0240 <_Z9sendEventv+0x64>)
  dataInFlight = true;                                                                      // set the data inflight flag
 80a0218:	2201      	movs	r2, #1
void sendEvent()
{
  char data[32];
  snprintf(data, sizeof(data), "{\"current\":%4.1f}",emon1.calcIrms(1480));
  Particle.publish("current-webhook", data, PRIVATE);
  currentHourlyPeriod = Time.hour();                                                        // Change the time period
 80a021a:	7018      	strb	r0, [r3, #0]
  dataInFlight = true;                                                                      // set the data inflight flag
 80a021c:	4b09      	ldr	r3, [pc, #36]	; (80a0244 <_Z9sendEventv+0x68>)
 80a021e:	701a      	strb	r2, [r3, #0]
 80a0220:	f000 fb96 	bl	80a0950 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
 80a0224:	4b08      	ldr	r3, [pc, #32]	; (80a0248 <_Z9sendEventv+0x6c>)
 80a0226:	6018      	str	r0, [r3, #0]
}
 80a0228:	b00d      	add	sp, #52	; 0x34
 80a022a:	f85d fb04 	ldr.w	pc, [sp], #4
 80a022e:	bf00      	nop
 80a0230:	200001b8 	.word	0x200001b8
 80a0234:	080a398c 	.word	0x080a398c
 80a0238:	200001a8 	.word	0x200001a8
 80a023c:	080a399e 	.word	0x080a399e
 80a0240:	20000194 	.word	0x20000194
 80a0244:	200000d1 	.word	0x200000d1
 80a0248:	200001b0 	.word	0x200001b0

080a024c <_Z14UbidotsHandlerPKcS0_>:

void UbidotsHandler(const char *event, const char *data)                                    // Looks at the response from Ubidots - Will reset Photon if no successful response
{                                                                                           // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
 80a024c:	b530      	push	{r4, r5, lr}
    // Response Template: "{{hourly.0.status_code}}"
  if (!data) {                                                                    // First check to see if there is any data
 80a024e:	460c      	mov	r4, r1
  dataInFlight = true;                                                                      // set the data inflight flag
  webhookTimeStamp = millis();
}

void UbidotsHandler(const char *event, const char *data)                                    // Looks at the response from Ubidots - Will reset Photon if no successful response
{                                                                                           // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
 80a0250:	b085      	sub	sp, #20
 80a0252:	4d1d      	ldr	r5, [pc, #116]	; (80a02c8 <_Z14UbidotsHandlerPKcS0_+0x7c>)
    // Response Template: "{{hourly.0.status_code}}"
  if (!data) {                                                                    // First check to see if there is any data
 80a0254:	b951      	cbnz	r1, 80a026c <_Z14UbidotsHandlerPKcS0_+0x20>
    if (verboseMode) {
 80a0256:	782b      	ldrb	r3, [r5, #0]
 80a0258:	2b00      	cmp	r3, #0
 80a025a:	d032      	beq.n	80a02c2 <_Z14UbidotsHandlerPKcS0_+0x76>
      waitUntil(meterParticlePublish);
 80a025c:	f7ff ff9c 	bl	80a0198 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.24>
 80a0260:	4b1a      	ldr	r3, [pc, #104]	; (80a02cc <_Z14UbidotsHandlerPKcS0_+0x80>)
      Particle.publish("Ubidots Hook", "No Data", PRIVATE);
 80a0262:	4a1b      	ldr	r2, [pc, #108]	; (80a02d0 <_Z14UbidotsHandlerPKcS0_+0x84>)
 80a0264:	781b      	ldrb	r3, [r3, #0]
 80a0266:	f88d 4000 	strb.w	r4, [sp]
 80a026a:	e023      	b.n	80a02b4 <_Z14UbidotsHandlerPKcS0_+0x68>
    }
    return;
  }
  int responseCode = atoi(data);                                                  // Response is only a single number thanks to Template
 80a026c:	4608      	mov	r0, r1
 80a026e:	f002 fd97 	bl	80a2da0 <atoi>
  
  if ((responseCode == 200) || (responseCode == 201))
 80a0272:	38c8      	subs	r0, #200	; 0xc8
 80a0274:	2801      	cmp	r0, #1
  {
    if (verboseMode) {
 80a0276:	782b      	ldrb	r3, [r5, #0]
    }
    return;
  }
  int responseCode = atoi(data);                                                  // Response is only a single number thanks to Template
  
  if ((responseCode == 200) || (responseCode == 201))
 80a0278:	d813      	bhi.n	80a02a2 <_Z14UbidotsHandlerPKcS0_+0x56>
  {
    if (verboseMode) {
 80a027a:	b173      	cbz	r3, 80a029a <_Z14UbidotsHandlerPKcS0_+0x4e>
      waitUntil(meterParticlePublish);
 80a027c:	f7ff ff8c 	bl	80a0198 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.24>
 80a0280:	4b12      	ldr	r3, [pc, #72]	; (80a02cc <_Z14UbidotsHandlerPKcS0_+0x80>)
      Particle.publish("State", "Response Received", PRIVATE);
 80a0282:	2200      	movs	r2, #0
 80a0284:	781b      	ldrb	r3, [r3, #0]
 80a0286:	a802      	add	r0, sp, #8
 80a0288:	f88d 2000 	strb.w	r2, [sp]
 80a028c:	4911      	ldr	r1, [pc, #68]	; (80a02d4 <_Z14UbidotsHandlerPKcS0_+0x88>)
 80a028e:	4a12      	ldr	r2, [pc, #72]	; (80a02d8 <_Z14UbidotsHandlerPKcS0_+0x8c>)
 80a0290:	f7ff ff2b 	bl	80a00ea <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.39.constprop.51>
 80a0294:	a803      	add	r0, sp, #12
 80a0296:	f7ff ff8a 	bl	80a01ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
    dataInFlight = false;    
 80a029a:	4b10      	ldr	r3, [pc, #64]	; (80a02dc <_Z14UbidotsHandlerPKcS0_+0x90>)
 80a029c:	2200      	movs	r2, #0
 80a029e:	701a      	strb	r2, [r3, #0]
 80a02a0:	e00f      	b.n	80a02c2 <_Z14UbidotsHandlerPKcS0_+0x76>
  }
  else if (verboseMode) {
 80a02a2:	b173      	cbz	r3, 80a02c2 <_Z14UbidotsHandlerPKcS0_+0x76>
    waitUntil(meterParticlePublish);      
 80a02a4:	f7ff ff78 	bl	80a0198 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.24>
 80a02a8:	4b08      	ldr	r3, [pc, #32]	; (80a02cc <_Z14UbidotsHandlerPKcS0_+0x80>)
    Particle.publish("Ubidots Hook", data, PRIVATE);                              // Publish the response code
 80a02aa:	2200      	movs	r2, #0
 80a02ac:	781b      	ldrb	r3, [r3, #0]
 80a02ae:	f88d 2000 	strb.w	r2, [sp]
 80a02b2:	4622      	mov	r2, r4
 80a02b4:	a802      	add	r0, sp, #8
 80a02b6:	490a      	ldr	r1, [pc, #40]	; (80a02e0 <_Z14UbidotsHandlerPKcS0_+0x94>)
 80a02b8:	f7ff ff17 	bl	80a00ea <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.39.constprop.51>
 80a02bc:	a803      	add	r0, sp, #12
 80a02be:	f7ff ff76 	bl	80a01ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }

}
 80a02c2:	b005      	add	sp, #20
 80a02c4:	bd30      	pop	{r4, r5, pc}
 80a02c6:	bf00      	nop
 80a02c8:	200000d0 	.word	0x200000d0
 80a02cc:	200001a8 	.word	0x200001a8
 80a02d0:	080a39ae 	.word	0x080a39ae
 80a02d4:	080a39d5 	.word	0x080a39d5
 80a02d8:	080a39c3 	.word	0x080a39c3
 80a02dc:	200000d1 	.word	0x200000d1
 80a02e0:	080a39b6 	.word	0x080a39b6

080a02e4 <_Z14setVerboseMode6String>:
  if (Particle.connected()) return 1;                               // Were able to connect successfully
  else return 0;                                                    // Failed to connect
}

int setVerboseMode(String command) // Function to force sending data in current hour
{
 80a02e4:	b530      	push	{r4, r5, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80a02e6:	4913      	ldr	r1, [pc, #76]	; (80a0334 <_Z14setVerboseMode6String+0x50>)
 80a02e8:	b085      	sub	sp, #20
 80a02ea:	4605      	mov	r5, r0
 80a02ec:	f001 fad1 	bl	80a1892 <_ZNK6String6equalsEPKc>
  if (command == "1")
 80a02f0:	4604      	mov	r4, r0
 80a02f2:	b148      	cbz	r0, 80a0308 <_Z14setVerboseMode6String+0x24>
  {
    verboseMode = true;
 80a02f4:	4b10      	ldr	r3, [pc, #64]	; (80a0338 <_Z14setVerboseMode6String+0x54>)
 80a02f6:	2401      	movs	r4, #1
 80a02f8:	701c      	strb	r4, [r3, #0]
 80a02fa:	4b10      	ldr	r3, [pc, #64]	; (80a033c <_Z14setVerboseMode6String+0x58>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
 80a02fc:	2200      	movs	r2, #0
 80a02fe:	781b      	ldrb	r3, [r3, #0]
 80a0300:	f88d 2000 	strb.w	r2, [sp]
 80a0304:	4a0e      	ldr	r2, [pc, #56]	; (80a0340 <_Z14setVerboseMode6String+0x5c>)
 80a0306:	e00b      	b.n	80a0320 <_Z14setVerboseMode6String+0x3c>
 80a0308:	490e      	ldr	r1, [pc, #56]	; (80a0344 <_Z14setVerboseMode6String+0x60>)
 80a030a:	4628      	mov	r0, r5
 80a030c:	f001 fac1 	bl	80a1892 <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
 80a0310:	b170      	cbz	r0, 80a0330 <_Z14setVerboseMode6String+0x4c>
  {
    verboseMode = false;
 80a0312:	4b09      	ldr	r3, [pc, #36]	; (80a0338 <_Z14setVerboseMode6String+0x54>)
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
 80a0314:	4a0c      	ldr	r2, [pc, #48]	; (80a0348 <_Z14setVerboseMode6String+0x64>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
    return 1;
  }
  else if (command == "0")
  {
    verboseMode = false;
 80a0316:	701c      	strb	r4, [r3, #0]
 80a0318:	4b08      	ldr	r3, [pc, #32]	; (80a033c <_Z14setVerboseMode6String+0x58>)
 80a031a:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
 80a031c:	f88d 4000 	strb.w	r4, [sp]
 80a0320:	490a      	ldr	r1, [pc, #40]	; (80a034c <_Z14setVerboseMode6String+0x68>)
 80a0322:	a802      	add	r0, sp, #8
 80a0324:	f7ff fee1 	bl	80a00ea <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.39.constprop.51>
 80a0328:	a803      	add	r0, sp, #12
 80a032a:	f7ff ff40 	bl	80a01ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a032e:	2001      	movs	r0, #1
    return 1;
  }
  else return 0;
}
 80a0330:	b005      	add	sp, #20
 80a0332:	bd30      	pop	{r4, r5, pc}
 80a0334:	080a3af3 	.word	0x080a3af3
 80a0338:	200000d0 	.word	0x200000d0
 80a033c:	200001a8 	.word	0x200001a8
 80a0340:	080a39db 	.word	0x080a39db
 80a0344:	080a39ec 	.word	0x080a39ec
 80a0348:	080a39ee 	.word	0x080a39ee
 80a034c:	080a39fe 	.word	0x080a39fe

080a0350 <_Z22publishStateTransitionv>:


void publishStateTransition(void)
{
 80a0350:	b530      	push	{r4, r5, lr}
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
 80a0352:	4d18      	ldr	r5, [pc, #96]	; (80a03b4 <_Z22publishStateTransitionv+0x64>)
 80a0354:	4918      	ldr	r1, [pc, #96]	; (80a03b8 <_Z22publishStateTransitionv+0x68>)
 80a0356:	782a      	ldrb	r2, [r5, #0]
 80a0358:	231a      	movs	r3, #26
 80a035a:	fb03 1202 	mla	r2, r3, r2, r1
 80a035e:	4c17      	ldr	r4, [pc, #92]	; (80a03bc <_Z22publishStateTransitionv+0x6c>)
  else return 0;
}


void publishStateTransition(void)
{
 80a0360:	b08f      	sub	sp, #60	; 0x3c
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
 80a0362:	7820      	ldrb	r0, [r4, #0]
 80a0364:	9200      	str	r2, [sp, #0]
 80a0366:	fb03 1300 	mla	r3, r3, r0, r1
 80a036a:	4a15      	ldr	r2, [pc, #84]	; (80a03c0 <_Z22publishStateTransitionv+0x70>)
 80a036c:	2128      	movs	r1, #40	; 0x28
 80a036e:	a804      	add	r0, sp, #16
 80a0370:	f000 fcfc 	bl	80a0d6c <snprintf>
  oldState = state;
 80a0374:	782b      	ldrb	r3, [r5, #0]
 80a0376:	7023      	strb	r3, [r4, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a0378:	f000 fc50 	bl	80a0c1c <spark_cloud_flag_connected>
  if(Particle.connected()) {
 80a037c:	b190      	cbz	r0, 80a03a4 <_Z22publishStateTransitionv+0x54>
    waitUntil(meterParticlePublish);
 80a037e:	f7ff ff0b 	bl	80a0198 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.24>
 80a0382:	4b10      	ldr	r3, [pc, #64]	; (80a03c4 <_Z22publishStateTransitionv+0x74>)
    Particle.publish("State Transition",stateTransitionString, PRIVATE);
 80a0384:	2200      	movs	r2, #0
 80a0386:	781b      	ldrb	r3, [r3, #0]
 80a0388:	490f      	ldr	r1, [pc, #60]	; (80a03c8 <_Z22publishStateTransitionv+0x78>)
 80a038a:	f88d 2000 	strb.w	r2, [sp]
 80a038e:	a802      	add	r0, sp, #8
 80a0390:	aa04      	add	r2, sp, #16
 80a0392:	f7ff feaa 	bl	80a00ea <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.39.constprop.51>
 80a0396:	a803      	add	r0, sp, #12
 80a0398:	f7ff ff09 	bl	80a01ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a039c:	f000 fad8 	bl	80a0950 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
 80a03a0:	4b0a      	ldr	r3, [pc, #40]	; (80a03cc <_Z22publishStateTransitionv+0x7c>)
 80a03a2:	6018      	str	r0, [r3, #0]
  }
  Serial.println(stateTransitionString);
 80a03a4:	f001 fc2c 	bl	80a1c00 <_Z16_fetch_usbserialv>
 80a03a8:	a904      	add	r1, sp, #16
 80a03aa:	f001 f984 	bl	80a16b6 <_ZN5Print7printlnEPKc>
}
 80a03ae:	b00f      	add	sp, #60	; 0x3c
 80a03b0:	bd30      	pop	{r4, r5, pc}
 80a03b2:	bf00      	nop
 80a03b4:	200001a0 	.word	0x200001a0
 80a03b8:	20000000 	.word	0x20000000
 80a03bc:	200001a9 	.word	0x200001a9
 80a03c0:	080a3a03 	.word	0x080a3a03
 80a03c4:	200001a8 	.word	0x200001a8
 80a03c8:	080a3a11 	.word	0x080a3a11
 80a03cc:	200001ac 	.word	0x200001ac

080a03d0 <loop>:

  if(verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);                                 // Let Particle know how the startup process went
  lastPublish = millis();
}

void loop() {
 80a03d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    
  switch(state) {
 80a03d2:	4c64      	ldr	r4, [pc, #400]	; (80a0564 <loop+0x194>)
 80a03d4:	7823      	ldrb	r3, [r4, #0]
 80a03d6:	3b01      	subs	r3, #1
 80a03d8:	2b04      	cmp	r3, #4
 80a03da:	f200 80c0 	bhi.w	80a055e <loop+0x18e>
 80a03de:	e8df f003 	tbb	[pc, r3]
 80a03e2:	0395      	.short	0x0395
 80a03e4:	4519      	.short	0x4519
 80a03e6:	66          	.byte	0x66
 80a03e7:	00          	.byte	0x00
  
  case IDLE_STATE:                                                                          // Stay here if the device is turned off. 
    {
      
      if (verboseMode && oldState != state) publishStateTransition();                    // If verboseMode is on and state is changed, Then publish the state transition.
 80a03e8:	4b5f      	ldr	r3, [pc, #380]	; (80a0568 <loop+0x198>)
 80a03ea:	781b      	ldrb	r3, [r3, #0]
 80a03ec:	b12b      	cbz	r3, 80a03fa <loop+0x2a>
 80a03ee:	4b5f      	ldr	r3, [pc, #380]	; (80a056c <loop+0x19c>)
 80a03f0:	781b      	ldrb	r3, [r3, #0]
 80a03f2:	2b02      	cmp	r3, #2
 80a03f4:	d001      	beq.n	80a03fa <loop+0x2a>
 80a03f6:	f7ff ffab 	bl	80a0350 <_Z22publishStateTransitionv>

      static int TimePassed = 0;
  
      if ((Time.second() - TimePassed >= 30)) {     // Sample time or the top of the hour
 80a03fa:	f001 fafb 	bl	80a19f4 <_ZN9TimeClass6secondEv>
 80a03fe:	4d5c      	ldr	r5, [pc, #368]	; (80a0570 <loop+0x1a0>)
 80a0400:	682b      	ldr	r3, [r5, #0]
 80a0402:	1ac0      	subs	r0, r0, r3
 80a0404:	281d      	cmp	r0, #29
 80a0406:	f340 80aa 	ble.w	80a055e <loop+0x18e>
          state = MEASURING_STATE;
 80a040a:	2303      	movs	r3, #3
 80a040c:	7023      	strb	r3, [r4, #0]
          TimePassed = Time.second();
 80a040e:	f001 faf1 	bl	80a19f4 <_ZN9TimeClass6secondEv>
 80a0412:	e079      	b.n	80a0508 <loop+0x138>
      break;
      
    } 

  case MEASURING_STATE:                                                                     // Take measurements prior to sending
    if (verboseMode && state != oldState) publishStateTransition();
 80a0414:	4b54      	ldr	r3, [pc, #336]	; (80a0568 <loop+0x198>)
 80a0416:	781a      	ldrb	r2, [r3, #0]
 80a0418:	461d      	mov	r5, r3
 80a041a:	b12a      	cbz	r2, 80a0428 <loop+0x58>
 80a041c:	4b53      	ldr	r3, [pc, #332]	; (80a056c <loop+0x19c>)
 80a041e:	781b      	ldrb	r3, [r3, #0]
 80a0420:	2b03      	cmp	r3, #3
 80a0422:	d001      	beq.n	80a0428 <loop+0x58>
 80a0424:	f7ff ff94 	bl	80a0350 <_Z22publishStateTransitionv>
    
    if (!takeMeasurements())
 80a0428:	f7ff fe6c 	bl	80a0104 <_Z16takeMeasurementsv>
 80a042c:	4606      	mov	r6, r0
 80a042e:	b9d8      	cbnz	r0, 80a0468 <loop+0x98>
    {
      state = ERROR_STATE;
 80a0430:	2301      	movs	r3, #1
 80a0432:	7023      	strb	r3, [r4, #0]
 80a0434:	f000 fa8c 	bl	80a0950 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
 80a0438:	4b4e      	ldr	r3, [pc, #312]	; (80a0574 <loop+0x1a4>)
 80a043a:	6018      	str	r0, [r3, #0]
      if (verboseMode) {
 80a043c:	782b      	ldrb	r3, [r5, #0]
 80a043e:	2b00      	cmp	r3, #0
 80a0440:	f000 808d 	beq.w	80a055e <loop+0x18e>
        waitUntil(meterParticlePublish);
 80a0444:	f7ff fea8 	bl	80a0198 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.24>
 80a0448:	4b4b      	ldr	r3, [pc, #300]	; (80a0578 <loop+0x1a8>)
        Particle.publish("State","Error taking Measurements",PRIVATE);
 80a044a:	4a4c      	ldr	r2, [pc, #304]	; (80a057c <loop+0x1ac>)
 80a044c:	781b      	ldrb	r3, [r3, #0]
 80a044e:	494c      	ldr	r1, [pc, #304]	; (80a0580 <loop+0x1b0>)
 80a0450:	a802      	add	r0, sp, #8
 80a0452:	f88d 6000 	strb.w	r6, [sp]
 80a0456:	f7ff fe48 	bl	80a00ea <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.39.constprop.51>
 80a045a:	a803      	add	r0, sp, #12
 80a045c:	f7ff fea7 	bl	80a01ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0460:	f000 fa76 	bl	80a0950 <HAL_Timer_Get_Milli_Seconds>
        lastPublish = millis();
 80a0464:	4b47      	ldr	r3, [pc, #284]	; (80a0584 <loop+0x1b4>)
 80a0466:	e020      	b.n	80a04aa <loop+0xda>
      }
    }
    else state = REPORTING_STATE;
 80a0468:	2304      	movs	r3, #4
 80a046a:	e02d      	b.n	80a04c8 <loop+0xf8>
    break;

  case REPORTING_STATE:
    if (verboseMode && state != oldState) publishStateTransition();                         // Reporting - hourly or on command
 80a046c:	4b3e      	ldr	r3, [pc, #248]	; (80a0568 <loop+0x198>)
 80a046e:	781b      	ldrb	r3, [r3, #0]
 80a0470:	b12b      	cbz	r3, 80a047e <loop+0xae>
 80a0472:	4b3e      	ldr	r3, [pc, #248]	; (80a056c <loop+0x19c>)
 80a0474:	781b      	ldrb	r3, [r3, #0]
 80a0476:	2b04      	cmp	r3, #4
 80a0478:	d001      	beq.n	80a047e <loop+0xae>
 80a047a:	f7ff ff69 	bl	80a0350 <_Z22publishStateTransitionv>
 80a047e:	f000 fbcd 	bl	80a0c1c <spark_cloud_flag_connected>
   
    if (Particle.connected()) {
 80a0482:	b168      	cbz	r0, 80a04a0 <loop+0xd0>
      if (Time.hour() == 12) Particle.syncTime();                                           // Set the clock each day at noon
 80a0484:	f001 faac 	bl	80a19e0 <_ZN9TimeClass4hourEv>
 80a0488:	280c      	cmp	r0, #12
 80a048a:	d105      	bne.n	80a0498 <loop+0xc8>
 80a048c:	f000 fbc6 	bl	80a0c1c <spark_cloud_flag_connected>
        CLOUD_FN(spark_unsubscribe(NULL), (void)0);
    }

    bool syncTime(void)
    {
        if (!connected()) {
 80a0490:	b110      	cbz	r0, 80a0498 <loop+0xc8>
            return false;
        }
        return CLOUD_FN(spark_sync_time(NULL), false);
 80a0492:	2000      	movs	r0, #0
 80a0494:	f000 fbe2 	bl	80a0c5c <spark_sync_time>
      sendEvent();                                                                          // Send data to Ubidots
 80a0498:	f7ff fea0 	bl	80a01dc <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                                              // Wait for Response
 80a049c:	2305      	movs	r3, #5
 80a049e:	e013      	b.n	80a04c8 <loop+0xf8>
    }
    else {
      state = ERROR_STATE;
 80a04a0:	2301      	movs	r3, #1
 80a04a2:	7023      	strb	r3, [r4, #0]
 80a04a4:	f000 fa54 	bl	80a0950 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
 80a04a8:	4b32      	ldr	r3, [pc, #200]	; (80a0574 <loop+0x1a4>)
 80a04aa:	6018      	str	r0, [r3, #0]
 80a04ac:	e057      	b.n	80a055e <loop+0x18e>
    }
    break;

  case RESP_WAIT_STATE:
    if (verboseMode && state != oldState) publishStateTransition();
 80a04ae:	4b2e      	ldr	r3, [pc, #184]	; (80a0568 <loop+0x198>)
 80a04b0:	781b      	ldrb	r3, [r3, #0]
 80a04b2:	b12b      	cbz	r3, 80a04c0 <loop+0xf0>
 80a04b4:	4b2d      	ldr	r3, [pc, #180]	; (80a056c <loop+0x19c>)
 80a04b6:	781b      	ldrb	r3, [r3, #0]
 80a04b8:	2b05      	cmp	r3, #5
 80a04ba:	d001      	beq.n	80a04c0 <loop+0xf0>
 80a04bc:	f7ff ff48 	bl	80a0350 <_Z22publishStateTransitionv>
    if (!dataInFlight)                                                // Response received back to IDLE state
 80a04c0:	4b31      	ldr	r3, [pc, #196]	; (80a0588 <loop+0x1b8>)
 80a04c2:	781b      	ldrb	r3, [r3, #0]
 80a04c4:	b913      	cbnz	r3, 80a04cc <loop+0xfc>
    {
     state = IDLE_STATE;
 80a04c6:	2302      	movs	r3, #2
 80a04c8:	7023      	strb	r3, [r4, #0]
 80a04ca:	e048      	b.n	80a055e <loop+0x18e>
 80a04cc:	f000 fa40 	bl	80a0950 <HAL_Timer_Get_Milli_Seconds>
    }
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
 80a04d0:	4b2e      	ldr	r3, [pc, #184]	; (80a058c <loop+0x1bc>)
 80a04d2:	681b      	ldr	r3, [r3, #0]
 80a04d4:	1ac0      	subs	r0, r0, r3
 80a04d6:	f64a 73c8 	movw	r3, #45000	; 0xafc8
 80a04da:	4298      	cmp	r0, r3
 80a04dc:	d93f      	bls.n	80a055e <loop+0x18e>
 80a04de:	f000 fa37 	bl	80a0950 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
 80a04e2:	4d24      	ldr	r5, [pc, #144]	; (80a0574 <loop+0x1a4>)
 80a04e4:	4b24      	ldr	r3, [pc, #144]	; (80a0578 <loop+0x1a8>)
      Particle.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
 80a04e6:	2200      	movs	r2, #0
 80a04e8:	781b      	ldrb	r3, [r3, #0]
    if (!dataInFlight)                                                // Response received back to IDLE state
    {
     state = IDLE_STATE;
    }
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
      resetTimeStamp = millis();
 80a04ea:	6028      	str	r0, [r5, #0]
      Particle.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
 80a04ec:	4928      	ldr	r1, [pc, #160]	; (80a0590 <loop+0x1c0>)
 80a04ee:	f88d 2000 	strb.w	r2, [sp]
 80a04f2:	a802      	add	r0, sp, #8
 80a04f4:	4a27      	ldr	r2, [pc, #156]	; (80a0594 <loop+0x1c4>)
 80a04f6:	f7ff fdf8 	bl	80a00ea <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.39.constprop.51>
 80a04fa:	a803      	add	r0, sp, #12
 80a04fc:	f7ff fe57 	bl	80a01ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      state = ERROR_STATE;                                            // Response timed out
 80a0500:	2301      	movs	r3, #1
 80a0502:	7023      	strb	r3, [r4, #0]
 80a0504:	f000 fa24 	bl	80a0950 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
 80a0508:	6028      	str	r0, [r5, #0]
 80a050a:	e028      	b.n	80a055e <loop+0x18e>
    }
    break;

  
  case ERROR_STATE:                                                                         // To be enhanced - where we deal with errors
    if (verboseMode && state != oldState) publishStateTransition();
 80a050c:	4b16      	ldr	r3, [pc, #88]	; (80a0568 <loop+0x198>)
 80a050e:	781b      	ldrb	r3, [r3, #0]
 80a0510:	b12b      	cbz	r3, 80a051e <loop+0x14e>
 80a0512:	4b16      	ldr	r3, [pc, #88]	; (80a056c <loop+0x19c>)
 80a0514:	781b      	ldrb	r3, [r3, #0]
 80a0516:	2b01      	cmp	r3, #1
 80a0518:	d001      	beq.n	80a051e <loop+0x14e>
 80a051a:	f7ff ff19 	bl	80a0350 <_Z22publishStateTransitionv>
 80a051e:	f000 fa17 	bl	80a0950 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait)
 80a0522:	4b14      	ldr	r3, [pc, #80]	; (80a0574 <loop+0x1a4>)
 80a0524:	681b      	ldr	r3, [r3, #0]
 80a0526:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 80a052a:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 80a052e:	4298      	cmp	r0, r3
 80a0530:	d915      	bls.n	80a055e <loop+0x18e>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a0532:	f000 fb73 	bl	80a0c1c <spark_cloud_flag_connected>
    {
      if (Particle.connected()) Particle.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
 80a0536:	b160      	cbz	r0, 80a0552 <loop+0x182>
 80a0538:	4b0f      	ldr	r3, [pc, #60]	; (80a0578 <loop+0x1a8>)
 80a053a:	2200      	movs	r2, #0
 80a053c:	781b      	ldrb	r3, [r3, #0]
 80a053e:	a802      	add	r0, sp, #8
 80a0540:	f88d 2000 	strb.w	r2, [sp]
 80a0544:	490e      	ldr	r1, [pc, #56]	; (80a0580 <loop+0x1b0>)
 80a0546:	4a14      	ldr	r2, [pc, #80]	; (80a0598 <loop+0x1c8>)
 80a0548:	f7ff fdcf 	bl	80a00ea <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.39.constprop.51>
 80a054c:	a803      	add	r0, sp, #12
 80a054e:	f7ff fe2e 	bl	80a01ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      delay(2000);
 80a0552:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80a0556:	f000 fc29 	bl	80a0dac <delay>
      System.reset();
 80a055a:	f001 f9c9 	bl	80a18f0 <_ZN11SystemClass5resetEv>
    }
    break;
  }
}
 80a055e:	b004      	add	sp, #16
 80a0560:	bd70      	pop	{r4, r5, r6, pc}
 80a0562:	bf00      	nop
 80a0564:	200001a0 	.word	0x200001a0
 80a0568:	200000d0 	.word	0x200000d0
 80a056c:	200001a9 	.word	0x200001a9
 80a0570:	200001a4 	.word	0x200001a4
 80a0574:	2000019c 	.word	0x2000019c
 80a0578:	200001a8 	.word	0x200001a8
 80a057c:	080a3a22 	.word	0x080a3a22
 80a0580:	080a39d5 	.word	0x080a39d5
 80a0584:	200001ac 	.word	0x200001ac
 80a0588:	200000d1 	.word	0x200000d1
 80a058c:	200001b0 	.word	0x200001b0
 80a0590:	080a3a3c 	.word	0x080a3a3c
 80a0594:	080a3b66 	.word	0x080a3b66
 80a0598:	080a3a55 	.word	0x080a3a55

080a059c <_Z8senseNow6String>:
  if(millis() - lastPublish >= publishFrequency) return 1;
  else return 0;
}

bool senseNow(String Command)                                                      // This command lets you force a reporting cycle
{
 80a059c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a059e:	4911      	ldr	r1, [pc, #68]	; (80a05e4 <_Z8senseNow6String+0x48>)
 80a05a0:	4604      	mov	r4, r0
 80a05a2:	f001 f976 	bl	80a1892 <_ZNK6String6equalsEPKc>
  if (Command == "1") {
 80a05a6:	b198      	cbz	r0, 80a05d0 <_Z8senseNow6String+0x34>
    state = MEASURING_STATE;                                                      // Set the state to reporting
 80a05a8:	4b0f      	ldr	r3, [pc, #60]	; (80a05e8 <_Z8senseNow6String+0x4c>)
 80a05aa:	2203      	movs	r2, #3
 80a05ac:	701a      	strb	r2, [r3, #0]
    waitUntil(meterParticlePublish);  
 80a05ae:	f7ff fdf3 	bl	80a0198 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.24>
 80a05b2:	4b0e      	ldr	r3, [pc, #56]	; (80a05ec <_Z8senseNow6String+0x50>)
    Particle.publish("Function", "Command accepted - sensing now",PRIVATE);       // Acknowledge receipt
 80a05b4:	2200      	movs	r2, #0
 80a05b6:	781b      	ldrb	r3, [r3, #0]
 80a05b8:	490d      	ldr	r1, [pc, #52]	; (80a05f0 <_Z8senseNow6String+0x54>)
 80a05ba:	f88d 2000 	strb.w	r2, [sp]
 80a05be:	a802      	add	r0, sp, #8
 80a05c0:	4a0c      	ldr	r2, [pc, #48]	; (80a05f4 <_Z8senseNow6String+0x58>)
 80a05c2:	f7ff fd92 	bl	80a00ea <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.39.constprop.51>
 80a05c6:	a803      	add	r0, sp, #12
 80a05c8:	f7ff fdf1 	bl	80a01ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a05cc:	2001      	movs	r0, #1
 80a05ce:	e006      	b.n	80a05de <_Z8senseNow6String+0x42>
 80a05d0:	4909      	ldr	r1, [pc, #36]	; (80a05f8 <_Z8senseNow6String+0x5c>)
 80a05d2:	4620      	mov	r0, r4
 80a05d4:	f001 f95d 	bl	80a1892 <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (Command == "0") {                                                      // No action required
 80a05d8:	3000      	adds	r0, #0
 80a05da:	bf18      	it	ne
 80a05dc:	2001      	movne	r0, #1
    return 1;

  }
  return 0;
}
 80a05de:	b004      	add	sp, #16
 80a05e0:	bd10      	pop	{r4, pc}
 80a05e2:	bf00      	nop
 80a05e4:	080a3af3 	.word	0x080a3af3
 80a05e8:	200001a0 	.word	0x200001a0
 80a05ec:	200001a8 	.word	0x200001a8
 80a05f0:	080a3a88 	.word	0x080a3a88
 80a05f4:	080a3a69 	.word	0x080a3a69
 80a05f8:	080a39ec 	.word	0x080a39ec

080a05fc <_Z7sendNow6String>:

bool sendNow(String Command)                                                      // This command lets you force a reporting cycle
{
 80a05fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a05fe:	4911      	ldr	r1, [pc, #68]	; (80a0644 <_Z7sendNow6String+0x48>)
 80a0600:	4604      	mov	r4, r0
 80a0602:	f001 f946 	bl	80a1892 <_ZNK6String6equalsEPKc>
  if (Command == "1") {
 80a0606:	b198      	cbz	r0, 80a0630 <_Z7sendNow6String+0x34>
    state = REPORTING_STATE;                                                      // Set the state to reporting
 80a0608:	4b0f      	ldr	r3, [pc, #60]	; (80a0648 <_Z7sendNow6String+0x4c>)
 80a060a:	2204      	movs	r2, #4
 80a060c:	701a      	strb	r2, [r3, #0]
    waitUntil(meterParticlePublish);  
 80a060e:	f7ff fdc3 	bl	80a0198 <_ZN11SystemClass13waitConditionIZ14UbidotsHandlerPKcS2_EUlvE0_EEbT_.isra.24>
 80a0612:	4b0e      	ldr	r3, [pc, #56]	; (80a064c <_Z7sendNow6String+0x50>)
    Particle.publish("Function", "Command accepted - reporting now",PRIVATE);     // Acknowledge receipt
 80a0614:	2200      	movs	r2, #0
 80a0616:	781b      	ldrb	r3, [r3, #0]
 80a0618:	490d      	ldr	r1, [pc, #52]	; (80a0650 <_Z7sendNow6String+0x54>)
 80a061a:	f88d 2000 	strb.w	r2, [sp]
 80a061e:	a802      	add	r0, sp, #8
 80a0620:	4a0c      	ldr	r2, [pc, #48]	; (80a0654 <_Z7sendNow6String+0x58>)
 80a0622:	f7ff fd62 	bl	80a00ea <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.39.constprop.51>
 80a0626:	a803      	add	r0, sp, #12
 80a0628:	f7ff fdc1 	bl	80a01ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a062c:	2001      	movs	r0, #1
 80a062e:	e006      	b.n	80a063e <_Z7sendNow6String+0x42>
 80a0630:	4909      	ldr	r1, [pc, #36]	; (80a0658 <_Z7sendNow6String+0x5c>)
 80a0632:	4620      	mov	r0, r4
 80a0634:	f001 f92d 	bl	80a1892 <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (Command == "0") {                                                      // No action required
 80a0638:	3000      	adds	r0, #0
 80a063a:	bf18      	it	ne
 80a063c:	2001      	movne	r0, #1
    return 1;
  }
  return 0;
 80a063e:	b004      	add	sp, #16
 80a0640:	bd10      	pop	{r4, pc}
 80a0642:	bf00      	nop
 80a0644:	080a3af3 	.word	0x080a3af3
 80a0648:	200001a0 	.word	0x200001a0
 80a064c:	200001a8 	.word	0x200001a8
 80a0650:	080a3a88 	.word	0x080a3a88
 80a0654:	080a3a91 	.word	0x080a3a91
 80a0658:	080a39ec 	.word	0x080a39ec

080a065c <_ZN10CloudClass8functionIA12_cIPFb6StringEEEEbRKT_DpT0_>:
        static_assert(sizeof(T)==0, "\n\nIn Particle.variable(\"name\", myVar, STRING); myVar must be declared as char myVar[] not String myVar\n\n");
        return false;
    }

    template <typename T, class ... Types>
    static inline bool function(const T &name, Types ... args)
 80a065c:	b530      	push	{r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a065e:	2300      	movs	r3, #0
 80a0660:	b085      	sub	sp, #20
 80a0662:	4605      	mov	r5, r0
 80a0664:	9302      	str	r3, [sp, #8]
      function(_Functor __f)
      : _Function_base()
      {
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
 80a0666:	b121      	cbz	r1, 80a0672 <_ZN10CloudClass8functionIA12_cIPFb6StringEEEEbRKT_DpT0_+0x16>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0668:	4b14      	ldr	r3, [pc, #80]	; (80a06bc <_ZN10CloudClass8functionIA12_cIPFb6StringEEEEbRKT_DpT0_+0x60>)
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 80a066a:	9100      	str	r1, [sp, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a066c:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a066e:	4b14      	ldr	r3, [pc, #80]	; (80a06c0 <_ZN10CloudClass8functionIA12_cIPFb6StringEEEEbRKT_DpT0_+0x64>)
 80a0670:	9302      	str	r3, [sp, #8]
    {
#ifdef SPARK_NO_CLOUD
        return false;
#else
        bool success = false;
        if (func) // if the call-wrapper has wrapped a callable object
 80a0672:	9b02      	ldr	r3, [sp, #8]
 80a0674:	b183      	cbz	r3, 80a0698 <_ZN10CloudClass8functionIA12_cIPFb6StringEEEEbRKT_DpT0_+0x3c>
        {
            auto wrapper = new user_std_function_int_str_t(func);
 80a0676:	2010      	movs	r0, #16
 80a0678:	f7ff fd11 	bl	80a009e <_Znwj>
 80a067c:	4604      	mov	r4, r0
 80a067e:	b158      	cbz	r0, 80a0698 <_ZN10CloudClass8functionIA12_cIPFb6StringEEEEbRKT_DpT0_+0x3c>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0680:	2300      	movs	r3, #0
 80a0682:	6083      	str	r3, [r0, #8]
 80a0684:	9b02      	ldr	r3, [sp, #8]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a0686:	b17b      	cbz	r3, 80a06a8 <_ZN10CloudClass8functionIA12_cIPFb6StringEEEEbRKT_DpT0_+0x4c>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a0688:	2202      	movs	r2, #2
 80a068a:	4669      	mov	r1, sp
 80a068c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a068e:	9b03      	ldr	r3, [sp, #12]
 80a0690:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a0692:	9b02      	ldr	r3, [sp, #8]
 80a0694:	60a3      	str	r3, [r4, #8]
 80a0696:	e007      	b.n	80a06a8 <_ZN10CloudClass8functionIA12_cIPFb6StringEEEEbRKT_DpT0_+0x4c>
    static bool _function(const char *funcKey, user_std_function_int_str_t func, void* reserved=NULL)
    {
#ifdef SPARK_NO_CLOUD
        return false;
#else
        bool success = false;
 80a0698:	2400      	movs	r4, #0

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a069a:	9b02      	ldr	r3, [sp, #8]
 80a069c:	b15b      	cbz	r3, 80a06b6 <_ZN10CloudClass8functionIA12_cIPFb6StringEEEEbRKT_DpT0_+0x5a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a069e:	2203      	movs	r2, #3
 80a06a0:	4669      	mov	r1, sp
 80a06a2:	4668      	mov	r0, sp
 80a06a4:	4798      	blx	r3
    static inline bool function(const T &name, Types ... args)
    {
        static_assert(!is_string_literal<T>::value || sizeof(name) <= USER_FUNC_KEY_LENGTH + 1,
            "\n\nIn Particle.function, name must be " __XSTRING(USER_FUNC_KEY_LENGTH) " characters or less\n\n");

        return _function(name, args...);
 80a06a6:	e006      	b.n	80a06b6 <_ZN10CloudClass8functionIA12_cIPFb6StringEEEEbRKT_DpT0_+0x5a>
        bool success = false;
        if (func) // if the call-wrapper has wrapped a callable object
        {
            auto wrapper = new user_std_function_int_str_t(func);
            if (wrapper) {
                success = register_function(call_std_user_function, wrapper, funcKey);
 80a06a8:	4621      	mov	r1, r4
 80a06aa:	462a      	mov	r2, r5
 80a06ac:	4805      	ldr	r0, [pc, #20]	; (80a06c4 <_ZN10CloudClass8functionIA12_cIPFb6StringEEEEbRKT_DpT0_+0x68>)
 80a06ae:	f000 fc0f 	bl	80a0ed0 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a06b2:	4604      	mov	r4, r0
 80a06b4:	e7f1      	b.n	80a069a <_ZN10CloudClass8functionIA12_cIPFb6StringEEEEbRKT_DpT0_+0x3e>
    {
        static_assert(!is_string_literal<T>::value || sizeof(name) <= USER_FUNC_KEY_LENGTH + 1,
            "\n\nIn Particle.function, name must be " __XSTRING(USER_FUNC_KEY_LENGTH) " characters or less\n\n");

        return _function(name, args...);
    }
 80a06b6:	4620      	mov	r0, r4
 80a06b8:	b005      	add	sp, #20
 80a06ba:	bd30      	pop	{r4, r5, pc}
 80a06bc:	080a00cf 	.word	0x080a00cf
 80a06c0:	080a00b7 	.word	0x080a00b7
 80a06c4:	080a0ea9 	.word	0x080a0ea9

080a06c8 <setup>:
const char* releaseNumber = SOFTWARERELEASENUMBER;                                          // Displays the release on the menu
byte controlRegister;                                                                       // Stores the control register values
bool verboseMode=1;     

// setup() runs once, when the device is first turned on.
void setup() {
 80a06c8:	b570      	push	{r4, r5, r6, lr}
 80a06ca:	b0b8      	sub	sp, #224	; 0xe0
  Serial.begin(9600);
 80a06cc:	f001 fa98 	bl	80a1c00 <_Z16_fetch_usbserialv>
 80a06d0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a06d4:	f001 fa7a 	bl	80a1bcc <_ZN9USBSerial5beginEl>

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 80a06d8:	4a35      	ldr	r2, [pc, #212]	; (80a07b0 <setup+0xe8>)
 80a06da:	4936      	ldr	r1, [pc, #216]	; (80a07b4 <setup+0xec>)
 80a06dc:	4836      	ldr	r0, [pc, #216]	; (80a07b8 <setup+0xf0>)
 80a06de:	f000 fbf7 	bl	80a0ed0 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  Particle.function("verboseMode",setVerboseMode);                                          // Added Particle Function For VerboseMode.
  Particle.function("Get-Reading", senseNow);                                               // This function will force it to get a reading and set the refresh rate to 15mins.
 80a06e2:	4936      	ldr	r1, [pc, #216]	; (80a07bc <setup+0xf4>)
 80a06e4:	4836      	ldr	r0, [pc, #216]	; (80a07c0 <setup+0xf8>)
 80a06e6:	f7ff ffb9 	bl	80a065c <_ZN10CloudClass8functionIA12_cIPFb6StringEEEEbRKT_DpT0_>
  Particle.function("Send-Report", sendNow);                                                // This function will force it to get a reading and set the refresh rate to 15mins.
 80a06ea:	4936      	ldr	r1, [pc, #216]	; (80a07c4 <setup+0xfc>)
 80a06ec:	4836      	ldr	r0, [pc, #216]	; (80a07c8 <setup+0x100>)
 80a06ee:	f7ff ffb5 	bl	80a065c <_ZN10CloudClass8functionIA12_cIPFb6StringEEEEbRKT_DpT0_>
  
  char StartupMessage[64] = "Startup Successful";                                                       // Messages from Initialization
 80a06f2:	aa08      	add	r2, sp, #32
 80a06f4:	4615      	mov	r5, r2
 80a06f6:	4b35      	ldr	r3, [pc, #212]	; (80a07cc <setup+0x104>)
 80a06f8:	f103 0610 	add.w	r6, r3, #16
 80a06fc:	4614      	mov	r4, r2
 80a06fe:	6818      	ldr	r0, [r3, #0]
 80a0700:	6859      	ldr	r1, [r3, #4]
 80a0702:	3308      	adds	r3, #8
 80a0704:	c403      	stmia	r4!, {r0, r1}
 80a0706:	42b3      	cmp	r3, r6
 80a0708:	4622      	mov	r2, r4
 80a070a:	d1f7      	bne.n	80a06fc <setup+0x34>
 80a070c:	8819      	ldrh	r1, [r3, #0]
 80a070e:	789b      	ldrb	r3, [r3, #2]
 80a0710:	8021      	strh	r1, [r4, #0]
 80a0712:	70a3      	strb	r3, [r4, #2]
 80a0714:	222d      	movs	r2, #45	; 0x2d
 80a0716:	2100      	movs	r1, #0
 80a0718:	f10d 0033 	add.w	r0, sp, #51	; 0x33
  state = IDLE_STATE;
 80a071c:	4c2c      	ldr	r4, [pc, #176]	; (80a07d0 <setup+0x108>)
  Serial.begin(9600);
  Particle.function("verboseMode",setVerboseMode);                                          // Added Particle Function For VerboseMode.
  Particle.function("Get-Reading", senseNow);                                               // This function will force it to get a reading and set the refresh rate to 15mins.
  Particle.function("Send-Report", sendNow);                                                // This function will force it to get a reading and set the refresh rate to 15mins.
  
  char StartupMessage[64] = "Startup Successful";                                                       // Messages from Initialization
 80a071e:	f002 fc54 	bl	80a2fca <memset>
  state = IDLE_STATE;
 80a0722:	2302      	movs	r3, #2
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
 80a0724:	a804      	add	r0, sp, #16
 80a0726:	7023      	strb	r3, [r4, #0]
 80a0728:	f000 fa80 	bl	80a0c2c <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
 80a072c:	2300      	movs	r3, #0
 80a072e:	227d      	movs	r2, #125	; 0x7d
 80a0730:	a918      	add	r1, sp, #96	; 0x60
 80a0732:	a804      	add	r0, sp, #16
 80a0734:	f001 f8bf 	bl	80a18b6 <_ZNK6String8getBytesEPhjj>
     */
    int publishVitals(system_tick_t period_s = particle::NOW);

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
 80a0738:	2300      	movs	r3, #0
 80a073a:	9301      	str	r3, [sp, #4]
 80a073c:	9300      	str	r3, [sp, #0]
 80a073e:	461a      	mov	r2, r3
 80a0740:	4924      	ldr	r1, [pc, #144]	; (80a07d4 <setup+0x10c>)
 80a0742:	a818      	add	r0, sp, #96	; 0x60
 80a0744:	f000 fa82 	bl	80a0c4c <spark_subscribe>
  char responseTopic[125];
  String deviceID = System.deviceID();                                                      // Multiple Electrons share the same hook - keeps things straight
  deviceID.toCharArray(responseTopic,125);
  Particle.subscribe(responseTopic, UbidotsHandler, MY_DEVICES);                            // Subscribe to the integration response event
  
  if(!connectToParticle()) {
 80a0748:	f7ff fce6 	bl	80a0118 <_Z17connectToParticlev>
 80a074c:	b948      	cbnz	r0, 80a0762 <setup+0x9a>
    state = ERROR_STATE;                                                                               // We failed to connect can reset here or go to the ERROR state for remediation
 80a074e:	2301      	movs	r3, #1
 80a0750:	7023      	strb	r3, [r4, #0]
 80a0752:	f000 f8fd 	bl	80a0950 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
 80a0756:	4b20      	ldr	r3, [pc, #128]	; (80a07d8 <setup+0x110>)
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
 80a0758:	4920      	ldr	r1, [pc, #128]	; (80a07dc <setup+0x114>)
  deviceID.toCharArray(responseTopic,125);
  Particle.subscribe(responseTopic, UbidotsHandler, MY_DEVICES);                            // Subscribe to the integration response event
  
  if(!connectToParticle()) {
    state = ERROR_STATE;                                                                               // We failed to connect can reset here or go to the ERROR state for remediation
    resetTimeStamp = millis();
 80a075a:	6018      	str	r0, [r3, #0]
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
 80a075c:	4628      	mov	r0, r5
 80a075e:	f002 fc6f 	bl	80a3040 <strcpy>
  }

  emon1.current(A2, 37.111);             // Current: input pin, calibration.
 80a0762:	a311      	add	r3, pc, #68	; (adr r3, 80a07a8 <setup+0xe0>)
 80a0764:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0768:	210c      	movs	r1, #12
 80a076a:	481d      	ldr	r0, [pc, #116]	; (80a07e0 <setup+0x118>)
 80a076c:	f000 f860 	bl	80a0830 <_ZN13EnergyMonitor7currentEjd>

  if(verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);                                 // Let Particle know how the startup process went
 80a0770:	4b1c      	ldr	r3, [pc, #112]	; (80a07e4 <setup+0x11c>)
 80a0772:	781b      	ldrb	r3, [r3, #0]
 80a0774:	b163      	cbz	r3, 80a0790 <setup+0xc8>
 80a0776:	4b1c      	ldr	r3, [pc, #112]	; (80a07e8 <setup+0x120>)
 80a0778:	2200      	movs	r2, #0
 80a077a:	781b      	ldrb	r3, [r3, #0]
 80a077c:	a802      	add	r0, sp, #8
 80a077e:	f88d 2000 	strb.w	r2, [sp]
 80a0782:	491a      	ldr	r1, [pc, #104]	; (80a07ec <setup+0x124>)
 80a0784:	462a      	mov	r2, r5
 80a0786:	f7ff fcb0 	bl	80a00ea <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.39.constprop.51>
 80a078a:	a803      	add	r0, sp, #12
 80a078c:	f7ff fd0f 	bl	80a01ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0790:	f000 f8de 	bl	80a0950 <HAL_Timer_Get_Milli_Seconds>
  lastPublish = millis();
 80a0794:	4b16      	ldr	r3, [pc, #88]	; (80a07f0 <setup+0x128>)
 80a0796:	6018      	str	r0, [r3, #0]
  
  char StartupMessage[64] = "Startup Successful";                                                       // Messages from Initialization
  state = IDLE_STATE;

  char responseTopic[125];
  String deviceID = System.deviceID();                                                      // Multiple Electrons share the same hook - keeps things straight
 80a0798:	a804      	add	r0, sp, #16
 80a079a:	f001 f806 	bl	80a17aa <_ZN6StringD1Ev>

  emon1.current(A2, 37.111);             // Current: input pin, calibration.

  if(verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);                                 // Let Particle know how the startup process went
  lastPublish = millis();
}
 80a079e:	b038      	add	sp, #224	; 0xe0
 80a07a0:	bd70      	pop	{r4, r5, r6, pc}
 80a07a2:	bf00      	nop
 80a07a4:	f3af 8000 	nop.w
 80a07a8:	3f7ced91 	.word	0x3f7ced91
 80a07ac:	40428e35 	.word	0x40428e35
 80a07b0:	080a3ab2 	.word	0x080a3ab2
 80a07b4:	080a02e5 	.word	0x080a02e5
 80a07b8:	080a0e7d 	.word	0x080a0e7d
 80a07bc:	080a059d 	.word	0x080a059d
 80a07c0:	080a3abe 	.word	0x080a3abe
 80a07c4:	080a05fd 	.word	0x080a05fd
 80a07c8:	080a3aca 	.word	0x080a3aca
 80a07cc:	080a394c 	.word	0x080a394c
 80a07d0:	200001a0 	.word	0x200001a0
 80a07d4:	080a024d 	.word	0x080a024d
 80a07d8:	2000019c 	.word	0x2000019c
 80a07dc:	080a3ad6 	.word	0x080a3ad6
 80a07e0:	200001b8 	.word	0x200001b8
 80a07e4:	200000d0 	.word	0x200000d0
 80a07e8:	200001a8 	.word	0x200001a8
 80a07ec:	080a3ae8 	.word	0x080a3ae8
 80a07f0:	200001ac 	.word	0x200001ac

080a07f4 <_GLOBAL__sub_I_SystemMode>:
  }
  else if (Command == "0") {                                                      // No action required
    return 1;
  }
  return 0;
 80a07f4:	b538      	push	{r3, r4, r5, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a07f6:	4b0c      	ldr	r3, [pc, #48]	; (80a0828 <_GLOBAL__sub_I_SystemMode+0x34>)
 80a07f8:	2401      	movs	r4, #1
 80a07fa:	701c      	strb	r4, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a07fc:	f000 f8c8 	bl	80a0990 <HAL_Pin_Map>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0800:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a0804:	4b09      	ldr	r3, [pc, #36]	; (80a082c <_GLOBAL__sub_I_SystemMode+0x38>)
 80a0806:	2500      	movs	r5, #0
 80a0808:	701d      	strb	r5, [r3, #0]
 80a080a:	805d      	strh	r5, [r3, #2]
 80a080c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a080e:	2002      	movs	r0, #2
 80a0810:	f000 f9a8 	bl	80a0b64 <set_system_mode>
#define SOFTWARERELEASENUMBER "1.01"                                                        // Keep track of release numbers

// Prototypes and System Mode calls

SYSTEM_MODE(SEMI_AUTOMATIC);                                                               // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);                                                                    // Means my code will not be held up by Particle processes.
 80a0814:	4629      	mov	r1, r5
 80a0816:	4620      	mov	r0, r4
 80a0818:	f000 f9b4 	bl	80a0b84 <system_thread_set_state>
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
 80a081c:	4621      	mov	r1, r4
  }
  else if (Command == "0") {                                                      // No action required
    return 1;
  }
  return 0;
 80a081e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a0822:	2004      	movs	r0, #4
 80a0824:	f000 b87c 	b.w	80a0920 <HAL_Feature_Set>
 80a0828:	200001a8 	.word	0x200001a8
 80a082c:	20000196 	.word	0x20000196

080a0830 <_ZN13EnergyMonitor7currentEjd>:
}

void EnergyMonitor::current(unsigned int _inPinI, double _ICAL)
{
   inPinI = _inPinI;
   ICAL = _ICAL;
 80a0830:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
   offsetI = ADC_COUNTS>>1;
 80a0834:	4b02      	ldr	r3, [pc, #8]	; (80a0840 <_ZN13EnergyMonitor7currentEjd+0x10>)
 80a0836:	2200      	movs	r2, #0
   offsetV = ADC_COUNTS>>1;
}

void EnergyMonitor::current(unsigned int _inPinI, double _ICAL)
{
   inPinI = _inPinI;
 80a0838:	62c1      	str	r1, [r0, #44]	; 0x2c
   ICAL = _ICAL;
   offsetI = ADC_COUNTS>>1;
 80a083a:	e9c0 231c 	strd	r2, r3, [r0, #112]	; 0x70
 80a083e:	4770      	bx	lr
 80a0840:	40a00000 	.word	0x40a00000
 80a0844:	00000000 	.word	0x00000000

080a0848 <_ZN13EnergyMonitor8calcIrmsEj>:
//--------------------------------------------------------------------------------------       
}

//--------------------------------------------------------------------------------------
double EnergyMonitor::calcIrms(unsigned int Number_of_Samples)
{
 80a0848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a084c:	4604      	mov	r4, r0
 80a084e:	468a      	mov	sl, r1
  
  int SupplyVoltage=3300;

  for (unsigned int n = 0; n < Number_of_Samples; n++)
 80a0850:	2500      	movs	r5, #0
 80a0852:	4555      	cmp	r5, sl
 80a0854:	d02f      	beq.n	80a08b6 <_ZN13EnergyMonitor8calcIrmsEj+0x6e>
  {
    sampleI = analogRead(inPinI);
 80a0856:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 80a0858:	f001 fb54 	bl	80a1f04 <analogRead>
 80a085c:	64e0      	str	r0, [r4, #76]	; 0x4c

    // Digital low pass filter extracts the 2.5 V or 1.65 V dc offset, 
  //  then subtract this - signal is now centered on 0 counts.
    offsetI = (offsetI + (sampleI-offsetI)/1024);
 80a085e:	f001 ff89 	bl	80a2774 <__aeabi_i2d>
 80a0862:	e9d4 671c 	ldrd	r6, r7, [r4, #112]	; 0x70
 80a0866:	4632      	mov	r2, r6
 80a0868:	463b      	mov	r3, r7
 80a086a:	4680      	mov	r8, r0
 80a086c:	4689      	mov	r9, r1
 80a086e:	f001 fe33 	bl	80a24d8 <__aeabi_dsub>
 80a0872:	2200      	movs	r2, #0
 80a0874:	4b24      	ldr	r3, [pc, #144]	; (80a0908 <_ZN13EnergyMonitor8calcIrmsEj+0xc0>)
 80a0876:	f001 ffe3 	bl	80a2840 <__aeabi_dmul>
 80a087a:	4632      	mov	r2, r6
 80a087c:	463b      	mov	r3, r7
 80a087e:	f001 fe2d 	bl	80a24dc <__adddf3>
 80a0882:	4602      	mov	r2, r0
 80a0884:	460b      	mov	r3, r1
  filteredI = sampleI - offsetI;
 80a0886:	4640      	mov	r0, r8
  {
    sampleI = analogRead(inPinI);

    // Digital low pass filter extracts the 2.5 V or 1.65 V dc offset, 
  //  then subtract this - signal is now centered on 0 counts.
    offsetI = (offsetI + (sampleI-offsetI)/1024);
 80a0888:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70
  filteredI = sampleI - offsetI;
 80a088c:	4649      	mov	r1, r9
 80a088e:	f001 fe23 	bl	80a24d8 <__aeabi_dsub>
 80a0892:	4602      	mov	r2, r0
 80a0894:	460b      	mov	r3, r1
 80a0896:	e9c4 2318 	strd	r2, r3, [r4, #96]	; 0x60

    // Root-mean-square method current
    // 1) square current values
    sqI = filteredI * filteredI;
 80a089a:	f001 ffd1 	bl	80a2840 <__aeabi_dmul>
 80a089e:	4602      	mov	r2, r0
 80a08a0:	460b      	mov	r3, r1
    // 2) sum 
    sumI += sqI;
 80a08a2:	e9d4 0126 	ldrd	r0, r1, [r4, #152]	; 0x98
    offsetI = (offsetI + (sampleI-offsetI)/1024);
  filteredI = sampleI - offsetI;

    // Root-mean-square method current
    // 1) square current values
    sqI = filteredI * filteredI;
 80a08a6:	e9c4 2324 	strd	r2, r3, [r4, #144]	; 0x90
    // 2) sum 
    sumI += sqI;
 80a08aa:	f001 fe17 	bl	80a24dc <__adddf3>
double EnergyMonitor::calcIrms(unsigned int Number_of_Samples)
{
  
  int SupplyVoltage=3300;

  for (unsigned int n = 0; n < Number_of_Samples; n++)
 80a08ae:	3501      	adds	r5, #1

    // Root-mean-square method current
    // 1) square current values
    sqI = filteredI * filteredI;
    // 2) sum 
    sumI += sqI;
 80a08b0:	e9c4 0126 	strd	r0, r1, [r4, #152]	; 0x98
double EnergyMonitor::calcIrms(unsigned int Number_of_Samples)
{
  
  int SupplyVoltage=3300;

  for (unsigned int n = 0; n < Number_of_Samples; n++)
 80a08b4:	e7cd      	b.n	80a0852 <_ZN13EnergyMonitor8calcIrmsEj+0xa>
    sqI = filteredI * filteredI;
    // 2) sum 
    sumI += sqI;
  }

  double I_RATIO = ICAL *((SupplyVoltage/1000.0) / (ADC_COUNTS));
 80a08b6:	a312      	add	r3, pc, #72	; (adr r3, 80a0900 <_ZN13EnergyMonitor8calcIrmsEj+0xb8>)
 80a08b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a08bc:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
 80a08c0:	f001 ffbe 	bl	80a2840 <__aeabi_dmul>
 80a08c4:	4606      	mov	r6, r0
  Irms = I_RATIO * sqrt(sumI / Number_of_Samples); 
 80a08c6:	4628      	mov	r0, r5
    sqI = filteredI * filteredI;
    // 2) sum 
    sumI += sqI;
  }

  double I_RATIO = ICAL *((SupplyVoltage/1000.0) / (ADC_COUNTS));
 80a08c8:	460f      	mov	r7, r1
  Irms = I_RATIO * sqrt(sumI / Number_of_Samples); 
 80a08ca:	f001 ff43 	bl	80a2754 <__aeabi_ui2d>
 80a08ce:	4602      	mov	r2, r0
 80a08d0:	460b      	mov	r3, r1
 80a08d2:	e9d4 0126 	ldrd	r0, r1, [r4, #152]	; 0x98
 80a08d6:	f002 f8dd 	bl	80a2a94 <__aeabi_ddiv>
 80a08da:	f001 fcd7 	bl	80a228c <sqrt>
 80a08de:	4602      	mov	r2, r0
 80a08e0:	460b      	mov	r3, r1
 80a08e2:	4630      	mov	r0, r6
 80a08e4:	4639      	mov	r1, r7
 80a08e6:	f001 ffab 	bl	80a2840 <__aeabi_dmul>

  //Reset accumulators
  sumI = 0;
 80a08ea:	2200      	movs	r2, #0
 80a08ec:	2300      	movs	r3, #0
    // 2) sum 
    sumI += sqI;
  }

  double I_RATIO = ICAL *((SupplyVoltage/1000.0) / (ADC_COUNTS));
  Irms = I_RATIO * sqrt(sumI / Number_of_Samples); 
 80a08ee:	e9c4 0108 	strd	r0, r1, [r4, #32]

  //Reset accumulators
  sumI = 0;
 80a08f2:	e9c4 2326 	strd	r2, r3, [r4, #152]	; 0x98
//--------------------------------------------------------------------------------------             
 
  return Irms;
}
 80a08f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a08fa:	bf00      	nop
 80a08fc:	f3af 8000 	nop.w
 80a0900:	66666666 	.word	0x66666666
 80a0904:	3f4a6666 	.word	0x3f4a6666
 80a0908:	3f500000 	.word	0x3f500000

080a090c <_GLOBAL__sub_I__ZN13EnergyMonitor7voltageEjdd>:
 80a090c:	f000 b840 	b.w	80a0990 <HAL_Pin_Map>

080a0910 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a0910:	b508      	push	{r3, lr}
 80a0912:	4b02      	ldr	r3, [pc, #8]	; (80a091c <os_mutex_create+0xc>)
 80a0914:	681b      	ldr	r3, [r3, #0]
 80a0916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0918:	9301      	str	r3, [sp, #4]
 80a091a:	bd08      	pop	{r3, pc}
 80a091c:	080601d0 	.word	0x080601d0

080a0920 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
 80a0920:	b508      	push	{r3, lr}
 80a0922:	4b02      	ldr	r3, [pc, #8]	; (80a092c <HAL_Feature_Set+0xc>)
 80a0924:	681b      	ldr	r3, [r3, #0]
 80a0926:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0928:	9301      	str	r3, [sp, #4]
 80a092a:	bd08      	pop	{r3, pc}
 80a092c:	080601b8 	.word	0x080601b8

080a0930 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
 80a0930:	b508      	push	{r3, lr}
 80a0932:	4b02      	ldr	r3, [pc, #8]	; (80a093c <HAL_Core_System_Reset_Ex+0xc>)
 80a0934:	681b      	ldr	r3, [r3, #0]
 80a0936:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0938:	9301      	str	r3, [sp, #4]
 80a093a:	bd08      	pop	{r3, pc}
 80a093c:	080601b8 	.word	0x080601b8

080a0940 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0940:	b508      	push	{r3, lr}
 80a0942:	4b02      	ldr	r3, [pc, #8]	; (80a094c <HAL_RNG_GetRandomNumber+0xc>)
 80a0944:	681b      	ldr	r3, [r3, #0]
 80a0946:	685b      	ldr	r3, [r3, #4]
 80a0948:	9301      	str	r3, [sp, #4]
 80a094a:	bd08      	pop	{r3, pc}
 80a094c:	0806019c 	.word	0x0806019c

080a0950 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0950:	b508      	push	{r3, lr}
 80a0952:	4b02      	ldr	r3, [pc, #8]	; (80a095c <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0954:	681b      	ldr	r3, [r3, #0]
 80a0956:	695b      	ldr	r3, [r3, #20]
 80a0958:	9301      	str	r3, [sp, #4]
 80a095a:	bd08      	pop	{r3, pc}
 80a095c:	0806019c 	.word	0x0806019c

080a0960 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 80a0960:	b508      	push	{r3, lr}
 80a0962:	4b02      	ldr	r3, [pc, #8]	; (80a096c <HAL_RTC_Get_UnixTime+0xc>)
 80a0964:	681b      	ldr	r3, [r3, #0]
 80a0966:	69db      	ldr	r3, [r3, #28]
 80a0968:	9301      	str	r3, [sp, #4]
 80a096a:	bd08      	pop	{r3, pc}
 80a096c:	0806019c 	.word	0x0806019c

080a0970 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 80a0970:	b508      	push	{r3, lr}
 80a0972:	4b02      	ldr	r3, [pc, #8]	; (80a097c <HAL_RTC_Time_Is_Valid+0xc>)
 80a0974:	681b      	ldr	r3, [r3, #0]
 80a0976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0978:	9301      	str	r3, [sp, #4]
 80a097a:	bd08      	pop	{r3, pc}
 80a097c:	0806019c 	.word	0x0806019c

080a0980 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 80a0980:	b508      	push	{r3, lr}
 80a0982:	4b02      	ldr	r3, [pc, #8]	; (80a098c <hal_timer_millis+0xc>)
 80a0984:	681b      	ldr	r3, [r3, #0]
 80a0986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a0988:	9301      	str	r3, [sp, #4]
 80a098a:	bd08      	pop	{r3, pc}
 80a098c:	0806019c 	.word	0x0806019c

080a0990 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a0990:	b508      	push	{r3, lr}
 80a0992:	4b02      	ldr	r3, [pc, #8]	; (80a099c <HAL_Pin_Map+0xc>)
 80a0994:	681b      	ldr	r3, [r3, #0]
 80a0996:	681b      	ldr	r3, [r3, #0]
 80a0998:	9301      	str	r3, [sp, #4]
 80a099a:	bd08      	pop	{r3, pc}
 80a099c:	080601b0 	.word	0x080601b0

080a09a0 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a09a0:	b508      	push	{r3, lr}
 80a09a2:	4b02      	ldr	r3, [pc, #8]	; (80a09ac <HAL_Validate_Pin_Function+0xc>)
 80a09a4:	681b      	ldr	r3, [r3, #0]
 80a09a6:	685b      	ldr	r3, [r3, #4]
 80a09a8:	9301      	str	r3, [sp, #4]
 80a09aa:	bd08      	pop	{r3, pc}
 80a09ac:	080601b0 	.word	0x080601b0

080a09b0 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 80a09b0:	b508      	push	{r3, lr}
 80a09b2:	4b02      	ldr	r3, [pc, #8]	; (80a09bc <HAL_ADC_Read+0xc>)
 80a09b4:	681b      	ldr	r3, [r3, #0]
 80a09b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a09b8:	9301      	str	r3, [sp, #4]
 80a09ba:	bd08      	pop	{r3, pc}
 80a09bc:	080601b0 	.word	0x080601b0

080a09c0 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a09c0:	b508      	push	{r3, lr}
 80a09c2:	4b02      	ldr	r3, [pc, #8]	; (80a09cc <HAL_I2C_Write_Data+0xc>)
 80a09c4:	681b      	ldr	r3, [r3, #0]
 80a09c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a09c8:	9301      	str	r3, [sp, #4]
 80a09ca:	bd08      	pop	{r3, pc}
 80a09cc:	080601ac 	.word	0x080601ac

080a09d0 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a09d0:	b508      	push	{r3, lr}
 80a09d2:	4b02      	ldr	r3, [pc, #8]	; (80a09dc <HAL_I2C_Available_Data+0xc>)
 80a09d4:	681b      	ldr	r3, [r3, #0]
 80a09d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a09d8:	9301      	str	r3, [sp, #4]
 80a09da:	bd08      	pop	{r3, pc}
 80a09dc:	080601ac 	.word	0x080601ac

080a09e0 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a09e0:	b508      	push	{r3, lr}
 80a09e2:	4b02      	ldr	r3, [pc, #8]	; (80a09ec <HAL_I2C_Read_Data+0xc>)
 80a09e4:	681b      	ldr	r3, [r3, #0]
 80a09e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a09e8:	9301      	str	r3, [sp, #4]
 80a09ea:	bd08      	pop	{r3, pc}
 80a09ec:	080601ac 	.word	0x080601ac

080a09f0 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a09f0:	b508      	push	{r3, lr}
 80a09f2:	4b02      	ldr	r3, [pc, #8]	; (80a09fc <HAL_I2C_Peek_Data+0xc>)
 80a09f4:	681b      	ldr	r3, [r3, #0]
 80a09f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a09f8:	9301      	str	r3, [sp, #4]
 80a09fa:	bd08      	pop	{r3, pc}
 80a09fc:	080601ac 	.word	0x080601ac

080a0a00 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a0a00:	b508      	push	{r3, lr}
 80a0a02:	4b02      	ldr	r3, [pc, #8]	; (80a0a0c <HAL_I2C_Flush_Data+0xc>)
 80a0a04:	681b      	ldr	r3, [r3, #0]
 80a0a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0a08:	9301      	str	r3, [sp, #4]
 80a0a0a:	bd08      	pop	{r3, pc}
 80a0a0c:	080601ac 	.word	0x080601ac

080a0a10 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a0a10:	b508      	push	{r3, lr}
 80a0a12:	4b02      	ldr	r3, [pc, #8]	; (80a0a1c <HAL_I2C_Is_Enabled+0xc>)
 80a0a14:	681b      	ldr	r3, [r3, #0]
 80a0a16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0a18:	9301      	str	r3, [sp, #4]
 80a0a1a:	bd08      	pop	{r3, pc}
 80a0a1c:	080601ac 	.word	0x080601ac

080a0a20 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a0a20:	b508      	push	{r3, lr}
 80a0a22:	4b03      	ldr	r3, [pc, #12]	; (80a0a30 <HAL_I2C_Init+0x10>)
 80a0a24:	681b      	ldr	r3, [r3, #0]
 80a0a26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0a2a:	9301      	str	r3, [sp, #4]
 80a0a2c:	bd08      	pop	{r3, pc}
 80a0a2e:	0000      	.short	0x0000
 80a0a30:	080601ac 	.word	0x080601ac

080a0a34 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a0a34:	b508      	push	{r3, lr}
 80a0a36:	4b02      	ldr	r3, [pc, #8]	; (80a0a40 <HAL_SPI_Init+0xc>)
 80a0a38:	681b      	ldr	r3, [r3, #0]
 80a0a3a:	69db      	ldr	r3, [r3, #28]
 80a0a3c:	9301      	str	r3, [sp, #4]
 80a0a3e:	bd08      	pop	{r3, pc}
 80a0a40:	080601b4 	.word	0x080601b4

080a0a44 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a0a44:	b508      	push	{r3, lr}
 80a0a46:	4b02      	ldr	r3, [pc, #8]	; (80a0a50 <HAL_SPI_Is_Enabled+0xc>)
 80a0a48:	681b      	ldr	r3, [r3, #0]
 80a0a4a:	6a1b      	ldr	r3, [r3, #32]
 80a0a4c:	9301      	str	r3, [sp, #4]
 80a0a4e:	bd08      	pop	{r3, pc}
 80a0a50:	080601b4 	.word	0x080601b4

080a0a54 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0a54:	b508      	push	{r3, lr}
 80a0a56:	4b02      	ldr	r3, [pc, #8]	; (80a0a60 <HAL_USART_Init+0xc>)
 80a0a58:	681b      	ldr	r3, [r3, #0]
 80a0a5a:	699b      	ldr	r3, [r3, #24]
 80a0a5c:	9301      	str	r3, [sp, #4]
 80a0a5e:	bd08      	pop	{r3, pc}
 80a0a60:	080601c4 	.word	0x080601c4

080a0a64 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0a64:	b508      	push	{r3, lr}
 80a0a66:	4b02      	ldr	r3, [pc, #8]	; (80a0a70 <HAL_USART_Write_Data+0xc>)
 80a0a68:	681b      	ldr	r3, [r3, #0]
 80a0a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0a6c:	9301      	str	r3, [sp, #4]
 80a0a6e:	bd08      	pop	{r3, pc}
 80a0a70:	080601c4 	.word	0x080601c4

080a0a74 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0a74:	b508      	push	{r3, lr}
 80a0a76:	4b02      	ldr	r3, [pc, #8]	; (80a0a80 <HAL_USART_Available_Data+0xc>)
 80a0a78:	681b      	ldr	r3, [r3, #0]
 80a0a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0a7c:	9301      	str	r3, [sp, #4]
 80a0a7e:	bd08      	pop	{r3, pc}
 80a0a80:	080601c4 	.word	0x080601c4

080a0a84 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0a84:	b508      	push	{r3, lr}
 80a0a86:	4b02      	ldr	r3, [pc, #8]	; (80a0a90 <HAL_USART_Read_Data+0xc>)
 80a0a88:	681b      	ldr	r3, [r3, #0]
 80a0a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0a8c:	9301      	str	r3, [sp, #4]
 80a0a8e:	bd08      	pop	{r3, pc}
 80a0a90:	080601c4 	.word	0x080601c4

080a0a94 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0a94:	b508      	push	{r3, lr}
 80a0a96:	4b02      	ldr	r3, [pc, #8]	; (80a0aa0 <HAL_USART_Peek_Data+0xc>)
 80a0a98:	681b      	ldr	r3, [r3, #0]
 80a0a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0a9c:	9301      	str	r3, [sp, #4]
 80a0a9e:	bd08      	pop	{r3, pc}
 80a0aa0:	080601c4 	.word	0x080601c4

080a0aa4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0aa4:	b508      	push	{r3, lr}
 80a0aa6:	4b02      	ldr	r3, [pc, #8]	; (80a0ab0 <HAL_USART_Flush_Data+0xc>)
 80a0aa8:	681b      	ldr	r3, [r3, #0]
 80a0aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0aac:	9301      	str	r3, [sp, #4]
 80a0aae:	bd08      	pop	{r3, pc}
 80a0ab0:	080601c4 	.word	0x080601c4

080a0ab4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a0ab4:	b508      	push	{r3, lr}
 80a0ab6:	4b02      	ldr	r3, [pc, #8]	; (80a0ac0 <HAL_USART_Is_Enabled+0xc>)
 80a0ab8:	681b      	ldr	r3, [r3, #0]
 80a0aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0abc:	9301      	str	r3, [sp, #4]
 80a0abe:	bd08      	pop	{r3, pc}
 80a0ac0:	080601c4 	.word	0x080601c4

080a0ac4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0ac4:	b508      	push	{r3, lr}
 80a0ac6:	4b02      	ldr	r3, [pc, #8]	; (80a0ad0 <HAL_USART_Available_Data_For_Write+0xc>)
 80a0ac8:	681b      	ldr	r3, [r3, #0]
 80a0aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0acc:	9301      	str	r3, [sp, #4]
 80a0ace:	bd08      	pop	{r3, pc}
 80a0ad0:	080601c4 	.word	0x080601c4

080a0ad4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0ad4:	b508      	push	{r3, lr}
 80a0ad6:	4b02      	ldr	r3, [pc, #8]	; (80a0ae0 <HAL_USB_USART_Init+0xc>)
 80a0ad8:	681b      	ldr	r3, [r3, #0]
 80a0ada:	681b      	ldr	r3, [r3, #0]
 80a0adc:	9301      	str	r3, [sp, #4]
 80a0ade:	bd08      	pop	{r3, pc}
 80a0ae0:	080601d8 	.word	0x080601d8

080a0ae4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0ae4:	b508      	push	{r3, lr}
 80a0ae6:	4b02      	ldr	r3, [pc, #8]	; (80a0af0 <HAL_USB_USART_Begin+0xc>)
 80a0ae8:	681b      	ldr	r3, [r3, #0]
 80a0aea:	685b      	ldr	r3, [r3, #4]
 80a0aec:	9301      	str	r3, [sp, #4]
 80a0aee:	bd08      	pop	{r3, pc}
 80a0af0:	080601d8 	.word	0x080601d8

080a0af4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0af4:	b508      	push	{r3, lr}
 80a0af6:	4b02      	ldr	r3, [pc, #8]	; (80a0b00 <HAL_USB_USART_Available_Data+0xc>)
 80a0af8:	681b      	ldr	r3, [r3, #0]
 80a0afa:	691b      	ldr	r3, [r3, #16]
 80a0afc:	9301      	str	r3, [sp, #4]
 80a0afe:	bd08      	pop	{r3, pc}
 80a0b00:	080601d8 	.word	0x080601d8

080a0b04 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0b04:	b508      	push	{r3, lr}
 80a0b06:	4b02      	ldr	r3, [pc, #8]	; (80a0b10 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0b08:	681b      	ldr	r3, [r3, #0]
 80a0b0a:	695b      	ldr	r3, [r3, #20]
 80a0b0c:	9301      	str	r3, [sp, #4]
 80a0b0e:	bd08      	pop	{r3, pc}
 80a0b10:	080601d8 	.word	0x080601d8

080a0b14 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0b14:	b508      	push	{r3, lr}
 80a0b16:	4b02      	ldr	r3, [pc, #8]	; (80a0b20 <HAL_USB_USART_Receive_Data+0xc>)
 80a0b18:	681b      	ldr	r3, [r3, #0]
 80a0b1a:	699b      	ldr	r3, [r3, #24]
 80a0b1c:	9301      	str	r3, [sp, #4]
 80a0b1e:	bd08      	pop	{r3, pc}
 80a0b20:	080601d8 	.word	0x080601d8

080a0b24 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0b24:	b508      	push	{r3, lr}
 80a0b26:	4b02      	ldr	r3, [pc, #8]	; (80a0b30 <HAL_USB_USART_Send_Data+0xc>)
 80a0b28:	681b      	ldr	r3, [r3, #0]
 80a0b2a:	69db      	ldr	r3, [r3, #28]
 80a0b2c:	9301      	str	r3, [sp, #4]
 80a0b2e:	bd08      	pop	{r3, pc}
 80a0b30:	080601d8 	.word	0x080601d8

080a0b34 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0b34:	b508      	push	{r3, lr}
 80a0b36:	4b02      	ldr	r3, [pc, #8]	; (80a0b40 <HAL_USB_USART_Flush_Data+0xc>)
 80a0b38:	681b      	ldr	r3, [r3, #0]
 80a0b3a:	6a1b      	ldr	r3, [r3, #32]
 80a0b3c:	9301      	str	r3, [sp, #4]
 80a0b3e:	bd08      	pop	{r3, pc}
 80a0b40:	080601d8 	.word	0x080601d8

080a0b44 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0b44:	b508      	push	{r3, lr}
 80a0b46:	4b02      	ldr	r3, [pc, #8]	; (80a0b50 <inet_gethostbyname+0xc>)
 80a0b48:	681b      	ldr	r3, [r3, #0]
 80a0b4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0b4c:	9301      	str	r3, [sp, #4]
 80a0b4e:	bd08      	pop	{r3, pc}
 80a0b50:	080601c0 	.word	0x080601c0

080a0b54 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a0b54:	b508      	push	{r3, lr}
 80a0b56:	4b02      	ldr	r3, [pc, #8]	; (80a0b60 <system_mode+0xc>)
 80a0b58:	681b      	ldr	r3, [r3, #0]
 80a0b5a:	681b      	ldr	r3, [r3, #0]
 80a0b5c:	9301      	str	r3, [sp, #4]
 80a0b5e:	bd08      	pop	{r3, pc}
 80a0b60:	080601a4 	.word	0x080601a4

080a0b64 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0b64:	b508      	push	{r3, lr}
 80a0b66:	4b02      	ldr	r3, [pc, #8]	; (80a0b70 <set_system_mode+0xc>)
 80a0b68:	681b      	ldr	r3, [r3, #0]
 80a0b6a:	685b      	ldr	r3, [r3, #4]
 80a0b6c:	9301      	str	r3, [sp, #4]
 80a0b6e:	bd08      	pop	{r3, pc}
 80a0b70:	080601a4 	.word	0x080601a4

080a0b74 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0b74:	b508      	push	{r3, lr}
 80a0b76:	4b02      	ldr	r3, [pc, #8]	; (80a0b80 <system_delay_ms+0xc>)
 80a0b78:	681b      	ldr	r3, [r3, #0]
 80a0b7a:	695b      	ldr	r3, [r3, #20]
 80a0b7c:	9301      	str	r3, [sp, #4]
 80a0b7e:	bd08      	pop	{r3, pc}
 80a0b80:	080601a4 	.word	0x080601a4

080a0b84 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a0b84:	b508      	push	{r3, lr}
 80a0b86:	4b02      	ldr	r3, [pc, #8]	; (80a0b90 <system_thread_set_state+0xc>)
 80a0b88:	681b      	ldr	r3, [r3, #0]
 80a0b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0b8c:	9301      	str	r3, [sp, #4]
 80a0b8e:	bd08      	pop	{r3, pc}
 80a0b90:	080601a4 	.word	0x080601a4

080a0b94 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a0b94:	b508      	push	{r3, lr}
 80a0b96:	4b02      	ldr	r3, [pc, #8]	; (80a0ba0 <application_thread_current+0xc>)
 80a0b98:	681b      	ldr	r3, [r3, #0]
 80a0b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0b9c:	9301      	str	r3, [sp, #4]
 80a0b9e:	bd08      	pop	{r3, pc}
 80a0ba0:	080601a4 	.word	0x080601a4

080a0ba4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a0ba4:	b508      	push	{r3, lr}
 80a0ba6:	4b02      	ldr	r3, [pc, #8]	; (80a0bb0 <application_thread_invoke+0xc>)
 80a0ba8:	681b      	ldr	r3, [r3, #0]
 80a0baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0bac:	9301      	str	r3, [sp, #4]
 80a0bae:	bd08      	pop	{r3, pc}
 80a0bb0:	080601a4 	.word	0x080601a4

080a0bb4 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a0bb4:	b508      	push	{r3, lr}
 80a0bb6:	4b02      	ldr	r3, [pc, #8]	; (80a0bc0 <system_thread_get_state+0xc>)
 80a0bb8:	681b      	ldr	r3, [r3, #0]
 80a0bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0bbc:	9301      	str	r3, [sp, #4]
 80a0bbe:	bd08      	pop	{r3, pc}
 80a0bc0:	080601a4 	.word	0x080601a4

080a0bc4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0bc4:	b508      	push	{r3, lr}
 80a0bc6:	4b03      	ldr	r3, [pc, #12]	; (80a0bd4 <system_ctrl_set_app_request_handler+0x10>)
 80a0bc8:	681b      	ldr	r3, [r3, #0]
 80a0bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0bce:	9301      	str	r3, [sp, #4]
 80a0bd0:	bd08      	pop	{r3, pc}
 80a0bd2:	0000      	.short	0x0000
 80a0bd4:	080601a4 	.word	0x080601a4

080a0bd8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0bd8:	b508      	push	{r3, lr}
 80a0bda:	4b03      	ldr	r3, [pc, #12]	; (80a0be8 <system_ctrl_set_result+0x10>)
 80a0bdc:	681b      	ldr	r3, [r3, #0]
 80a0bde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0be2:	9301      	str	r3, [sp, #4]
 80a0be4:	bd08      	pop	{r3, pc}
 80a0be6:	0000      	.short	0x0000
 80a0be8:	080601a4 	.word	0x080601a4

080a0bec <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a0bec:	b508      	push	{r3, lr}
 80a0bee:	4b02      	ldr	r3, [pc, #8]	; (80a0bf8 <spark_function+0xc>)
 80a0bf0:	681b      	ldr	r3, [r3, #0]
 80a0bf2:	685b      	ldr	r3, [r3, #4]
 80a0bf4:	9301      	str	r3, [sp, #4]
 80a0bf6:	bd08      	pop	{r3, pc}
 80a0bf8:	080601cc 	.word	0x080601cc

080a0bfc <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a0bfc:	b508      	push	{r3, lr}
 80a0bfe:	4b02      	ldr	r3, [pc, #8]	; (80a0c08 <spark_process+0xc>)
 80a0c00:	681b      	ldr	r3, [r3, #0]
 80a0c02:	689b      	ldr	r3, [r3, #8]
 80a0c04:	9301      	str	r3, [sp, #4]
 80a0c06:	bd08      	pop	{r3, pc}
 80a0c08:	080601cc 	.word	0x080601cc

080a0c0c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 80a0c0c:	b508      	push	{r3, lr}
 80a0c0e:	4b02      	ldr	r3, [pc, #8]	; (80a0c18 <spark_cloud_flag_connect+0xc>)
 80a0c10:	681b      	ldr	r3, [r3, #0]
 80a0c12:	68db      	ldr	r3, [r3, #12]
 80a0c14:	9301      	str	r3, [sp, #4]
 80a0c16:	bd08      	pop	{r3, pc}
 80a0c18:	080601cc 	.word	0x080601cc

080a0c1c <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a0c1c:	b508      	push	{r3, lr}
 80a0c1e:	4b02      	ldr	r3, [pc, #8]	; (80a0c28 <spark_cloud_flag_connected+0xc>)
 80a0c20:	681b      	ldr	r3, [r3, #0]
 80a0c22:	695b      	ldr	r3, [r3, #20]
 80a0c24:	9301      	str	r3, [sp, #4]
 80a0c26:	bd08      	pop	{r3, pc}
 80a0c28:	080601cc 	.word	0x080601cc

080a0c2c <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 80a0c2c:	b508      	push	{r3, lr}
 80a0c2e:	4b02      	ldr	r3, [pc, #8]	; (80a0c38 <spark_deviceID+0xc>)
 80a0c30:	681b      	ldr	r3, [r3, #0]
 80a0c32:	69db      	ldr	r3, [r3, #28]
 80a0c34:	9301      	str	r3, [sp, #4]
 80a0c36:	bd08      	pop	{r3, pc}
 80a0c38:	080601cc 	.word	0x080601cc

080a0c3c <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a0c3c:	b508      	push	{r3, lr}
 80a0c3e:	4b02      	ldr	r3, [pc, #8]	; (80a0c48 <spark_send_event+0xc>)
 80a0c40:	681b      	ldr	r3, [r3, #0]
 80a0c42:	6a1b      	ldr	r3, [r3, #32]
 80a0c44:	9301      	str	r3, [sp, #4]
 80a0c46:	bd08      	pop	{r3, pc}
 80a0c48:	080601cc 	.word	0x080601cc

080a0c4c <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 80a0c4c:	b508      	push	{r3, lr}
 80a0c4e:	4b02      	ldr	r3, [pc, #8]	; (80a0c58 <spark_subscribe+0xc>)
 80a0c50:	681b      	ldr	r3, [r3, #0]
 80a0c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0c54:	9301      	str	r3, [sp, #4]
 80a0c56:	bd08      	pop	{r3, pc}
 80a0c58:	080601cc 	.word	0x080601cc

080a0c5c <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
 80a0c5c:	b508      	push	{r3, lr}
 80a0c5e:	4b02      	ldr	r3, [pc, #8]	; (80a0c68 <spark_sync_time+0xc>)
 80a0c60:	681b      	ldr	r3, [r3, #0]
 80a0c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0c64:	9301      	str	r3, [sp, #4]
 80a0c66:	bd08      	pop	{r3, pc}
 80a0c68:	080601cc 	.word	0x080601cc

080a0c6c <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a0c6c:	b508      	push	{r3, lr}
 80a0c6e:	4b02      	ldr	r3, [pc, #8]	; (80a0c78 <spark_sync_time_pending+0xc>)
 80a0c70:	681b      	ldr	r3, [r3, #0]
 80a0c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0c74:	9301      	str	r3, [sp, #4]
 80a0c76:	bd08      	pop	{r3, pc}
 80a0c78:	080601cc 	.word	0x080601cc

080a0c7c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0c7c:	b508      	push	{r3, lr}
 80a0c7e:	4b02      	ldr	r3, [pc, #8]	; (80a0c88 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0c80:	681b      	ldr	r3, [r3, #0]
 80a0c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0c84:	9301      	str	r3, [sp, #4]
 80a0c86:	bd08      	pop	{r3, pc}
 80a0c88:	080601cc 	.word	0x080601cc

080a0c8c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0c8c:	b508      	push	{r3, lr}
 80a0c8e:	4b02      	ldr	r3, [pc, #8]	; (80a0c98 <network_connect+0xc>)
 80a0c90:	681b      	ldr	r3, [r3, #0]
 80a0c92:	685b      	ldr	r3, [r3, #4]
 80a0c94:	9301      	str	r3, [sp, #4]
 80a0c96:	bd08      	pop	{r3, pc}
 80a0c98:	080601c8 	.word	0x080601c8

080a0c9c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0c9c:	b508      	push	{r3, lr}
 80a0c9e:	4b02      	ldr	r3, [pc, #8]	; (80a0ca8 <network_connecting+0xc>)
 80a0ca0:	681b      	ldr	r3, [r3, #0]
 80a0ca2:	689b      	ldr	r3, [r3, #8]
 80a0ca4:	9301      	str	r3, [sp, #4]
 80a0ca6:	bd08      	pop	{r3, pc}
 80a0ca8:	080601c8 	.word	0x080601c8

080a0cac <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0cac:	b508      	push	{r3, lr}
 80a0cae:	4b02      	ldr	r3, [pc, #8]	; (80a0cb8 <network_disconnect+0xc>)
 80a0cb0:	681b      	ldr	r3, [r3, #0]
 80a0cb2:	68db      	ldr	r3, [r3, #12]
 80a0cb4:	9301      	str	r3, [sp, #4]
 80a0cb6:	bd08      	pop	{r3, pc}
 80a0cb8:	080601c8 	.word	0x080601c8

080a0cbc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0cbc:	b508      	push	{r3, lr}
 80a0cbe:	4b02      	ldr	r3, [pc, #8]	; (80a0cc8 <network_ready+0xc>)
 80a0cc0:	681b      	ldr	r3, [r3, #0]
 80a0cc2:	691b      	ldr	r3, [r3, #16]
 80a0cc4:	9301      	str	r3, [sp, #4]
 80a0cc6:	bd08      	pop	{r3, pc}
 80a0cc8:	080601c8 	.word	0x080601c8

080a0ccc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0ccc:	b508      	push	{r3, lr}
 80a0cce:	4b02      	ldr	r3, [pc, #8]	; (80a0cd8 <network_on+0xc>)
 80a0cd0:	681b      	ldr	r3, [r3, #0]
 80a0cd2:	695b      	ldr	r3, [r3, #20]
 80a0cd4:	9301      	str	r3, [sp, #4]
 80a0cd6:	bd08      	pop	{r3, pc}
 80a0cd8:	080601c8 	.word	0x080601c8

080a0cdc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0cdc:	b508      	push	{r3, lr}
 80a0cde:	4b02      	ldr	r3, [pc, #8]	; (80a0ce8 <network_off+0xc>)
 80a0ce0:	681b      	ldr	r3, [r3, #0]
 80a0ce2:	699b      	ldr	r3, [r3, #24]
 80a0ce4:	9301      	str	r3, [sp, #4]
 80a0ce6:	bd08      	pop	{r3, pc}
 80a0ce8:	080601c8 	.word	0x080601c8

080a0cec <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0cec:	b508      	push	{r3, lr}
 80a0cee:	4b02      	ldr	r3, [pc, #8]	; (80a0cf8 <network_listen+0xc>)
 80a0cf0:	681b      	ldr	r3, [r3, #0]
 80a0cf2:	69db      	ldr	r3, [r3, #28]
 80a0cf4:	9301      	str	r3, [sp, #4]
 80a0cf6:	bd08      	pop	{r3, pc}
 80a0cf8:	080601c8 	.word	0x080601c8

080a0cfc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0cfc:	b508      	push	{r3, lr}
 80a0cfe:	4b02      	ldr	r3, [pc, #8]	; (80a0d08 <network_listening+0xc>)
 80a0d00:	681b      	ldr	r3, [r3, #0]
 80a0d02:	6a1b      	ldr	r3, [r3, #32]
 80a0d04:	9301      	str	r3, [sp, #4]
 80a0d06:	bd08      	pop	{r3, pc}
 80a0d08:	080601c8 	.word	0x080601c8

080a0d0c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0d0c:	b508      	push	{r3, lr}
 80a0d0e:	4b02      	ldr	r3, [pc, #8]	; (80a0d18 <network_set_listen_timeout+0xc>)
 80a0d10:	681b      	ldr	r3, [r3, #0]
 80a0d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0d14:	9301      	str	r3, [sp, #4]
 80a0d16:	bd08      	pop	{r3, pc}
 80a0d18:	080601c8 	.word	0x080601c8

080a0d1c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0d1c:	b508      	push	{r3, lr}
 80a0d1e:	4b02      	ldr	r3, [pc, #8]	; (80a0d28 <network_get_listen_timeout+0xc>)
 80a0d20:	681b      	ldr	r3, [r3, #0]
 80a0d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0d24:	9301      	str	r3, [sp, #4]
 80a0d26:	bd08      	pop	{r3, pc}
 80a0d28:	080601c8 	.word	0x080601c8

080a0d2c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0d2c:	b508      	push	{r3, lr}
 80a0d2e:	4b02      	ldr	r3, [pc, #8]	; (80a0d38 <malloc+0xc>)
 80a0d30:	681b      	ldr	r3, [r3, #0]
 80a0d32:	681b      	ldr	r3, [r3, #0]
 80a0d34:	9301      	str	r3, [sp, #4]
 80a0d36:	bd08      	pop	{r3, pc}
 80a0d38:	080601a0 	.word	0x080601a0

080a0d3c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0d3c:	b508      	push	{r3, lr}
 80a0d3e:	4b02      	ldr	r3, [pc, #8]	; (80a0d48 <free+0xc>)
 80a0d40:	681b      	ldr	r3, [r3, #0]
 80a0d42:	685b      	ldr	r3, [r3, #4]
 80a0d44:	9301      	str	r3, [sp, #4]
 80a0d46:	bd08      	pop	{r3, pc}
 80a0d48:	080601a0 	.word	0x080601a0

080a0d4c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a0d4c:	b508      	push	{r3, lr}
 80a0d4e:	4b02      	ldr	r3, [pc, #8]	; (80a0d58 <realloc+0xc>)
 80a0d50:	681b      	ldr	r3, [r3, #0]
 80a0d52:	689b      	ldr	r3, [r3, #8]
 80a0d54:	9301      	str	r3, [sp, #4]
 80a0d56:	bd08      	pop	{r3, pc}
 80a0d58:	080601a0 	.word	0x080601a0

080a0d5c <siscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80a0d5c:	b508      	push	{r3, lr}
 80a0d5e:	4b02      	ldr	r3, [pc, #8]	; (80a0d68 <siscanf+0xc>)
 80a0d60:	681b      	ldr	r3, [r3, #0]
 80a0d62:	699b      	ldr	r3, [r3, #24]
 80a0d64:	9301      	str	r3, [sp, #4]
 80a0d66:	bd08      	pop	{r3, pc}
 80a0d68:	080601a0 	.word	0x080601a0

080a0d6c <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80a0d6c:	b508      	push	{r3, lr}
 80a0d6e:	4b02      	ldr	r3, [pc, #8]	; (80a0d78 <snprintf+0xc>)
 80a0d70:	681b      	ldr	r3, [r3, #0]
 80a0d72:	69db      	ldr	r3, [r3, #28]
 80a0d74:	9301      	str	r3, [sp, #4]
 80a0d76:	bd08      	pop	{r3, pc}
 80a0d78:	080601a0 	.word	0x080601a0

080a0d7c <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a0d7c:	b508      	push	{r3, lr}
 80a0d7e:	4b02      	ldr	r3, [pc, #8]	; (80a0d88 <abort+0xc>)
 80a0d80:	681b      	ldr	r3, [r3, #0]
 80a0d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0d84:	9301      	str	r3, [sp, #4]
 80a0d86:	bd08      	pop	{r3, pc}
 80a0d88:	080601a0 	.word	0x080601a0

080a0d8c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a0d8c:	b508      	push	{r3, lr}
 80a0d8e:	4b02      	ldr	r3, [pc, #8]	; (80a0d98 <_malloc_r+0xc>)
 80a0d90:	681b      	ldr	r3, [r3, #0]
 80a0d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0d94:	9301      	str	r3, [sp, #4]
 80a0d96:	bd08      	pop	{r3, pc}
 80a0d98:	080601a0 	.word	0x080601a0

080a0d9c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 80a0d9c:	b508      	push	{r3, lr}
 80a0d9e:	4b02      	ldr	r3, [pc, #8]	; (80a0da8 <__errno+0xc>)
 80a0da0:	681b      	ldr	r3, [r3, #0]
 80a0da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0da4:	9301      	str	r3, [sp, #4]
 80a0da6:	bd08      	pop	{r3, pc}
 80a0da8:	080601a0 	.word	0x080601a0

080a0dac <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0dac:	2100      	movs	r1, #0
 80a0dae:	f7ff bee1 	b.w	80a0b74 <system_delay_ms>

080a0db2 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a0db2:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0db4:	6883      	ldr	r3, [r0, #8]
 80a0db6:	4604      	mov	r4, r0
 80a0db8:	b90b      	cbnz	r3, 80a0dbe <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a0dba:	f001 f91c 	bl	80a1ff6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0dbe:	68c3      	ldr	r3, [r0, #12]
 80a0dc0:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a0dc2:	68a3      	ldr	r3, [r4, #8]
 80a0dc4:	b11b      	cbz	r3, 80a0dce <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0dc6:	2203      	movs	r2, #3
 80a0dc8:	4621      	mov	r1, r4
 80a0dca:	4620      	mov	r0, r4
 80a0dcc:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a0dce:	4620      	mov	r0, r4
}
 80a0dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a0dd4:	2110      	movs	r1, #16
 80a0dd6:	f001 b90c 	b.w	80a1ff2 <_ZdlPvj>

080a0dda <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a0dda:	4770      	bx	lr

080a0ddc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a0ddc:	2000      	movs	r0, #0
 80a0dde:	4770      	bx	lr

080a0de0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a0de0:	b510      	push	{r4, lr}
 80a0de2:	4604      	mov	r4, r0
 80a0de4:	2110      	movs	r1, #16
 80a0de6:	f001 f904 	bl	80a1ff2 <_ZdlPvj>
 80a0dea:	4620      	mov	r0, r4
 80a0dec:	bd10      	pop	{r4, pc}

080a0dee <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a0dee:	b508      	push	{r3, lr}
      { delete this; }
 80a0df0:	b108      	cbz	r0, 80a0df6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a0df2:	f7ff fff5 	bl	80a0de0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a0df6:	bd08      	pop	{r3, pc}

080a0df8 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0df8:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0dfa:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0dfc:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a0dfe:	b113      	cbz	r3, 80a0e06 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0e00:	2203      	movs	r2, #3
 80a0e02:	4601      	mov	r1, r0
 80a0e04:	4798      	blx	r3
    }
 80a0e06:	4620      	mov	r0, r4
 80a0e08:	bd10      	pop	{r4, pc}

080a0e0a <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a0e0a:	2200      	movs	r2, #0
 80a0e0c:	6002      	str	r2, [r0, #0]
 80a0e0e:	f64f 729c 	movw	r2, #65436	; 0xff9c
 80a0e12:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a0e14:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0e16:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80a0e1a:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0e1c:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0e1e:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a0e20:	680c      	ldr	r4, [r1, #0]
 80a0e22:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0e24:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a0e26:	bd10      	pop	{r4, pc}

080a0e28 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a0e28:	b510      	push	{r4, lr}
 80a0e2a:	4604      	mov	r4, r0
    free((void*)msg_);
 80a0e2c:	6800      	ldr	r0, [r0, #0]
 80a0e2e:	f7ff ff85 	bl	80a0d3c <free>
}
 80a0e32:	4620      	mov	r0, r4
 80a0e34:	bd10      	pop	{r4, pc}

080a0e36 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a0e36:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a0e38:	68c4      	ldr	r4, [r0, #12]
 80a0e3a:	b1f4      	cbz	r4, 80a0e7a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a0e3c:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a0e3e:	2b02      	cmp	r3, #2
 80a0e40:	d103      	bne.n	80a0e4a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a0e42:	f104 000c 	add.w	r0, r4, #12
 80a0e46:	f7ff ffef 	bl	80a0e28 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a0e4a:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a0e4c:	b135      	cbz	r5, 80a0e5c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0e4e:	4628      	mov	r0, r5
 80a0e50:	f7ff ffd2 	bl	80a0df8 <_ZNSt14_Function_baseD1Ev>
 80a0e54:	2110      	movs	r1, #16
 80a0e56:	4628      	mov	r0, r5
 80a0e58:	f001 f8cb 	bl	80a1ff2 <_ZdlPvj>
 80a0e5c:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a0e5e:	b135      	cbz	r5, 80a0e6e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a0e60:	4628      	mov	r0, r5
 80a0e62:	f7ff ffc9 	bl	80a0df8 <_ZNSt14_Function_baseD1Ev>
 80a0e66:	2110      	movs	r1, #16
 80a0e68:	4628      	mov	r0, r5
 80a0e6a:	f001 f8c2 	bl	80a1ff2 <_ZdlPvj>
 80a0e6e:	4620      	mov	r0, r4
 80a0e70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a0e74:	2114      	movs	r1, #20
 80a0e76:	f001 b8bc 	b.w	80a1ff2 <_ZdlPvj>
 80a0e7a:	bd38      	pop	{r3, r4, r5, pc}

080a0e7c <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a0e7c:	b510      	push	{r4, lr}
 80a0e7e:	b088      	sub	sp, #32
 80a0e80:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a0e82:	4668      	mov	r0, sp
 80a0e84:	f000 fcd8 	bl	80a1838 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 80a0e88:	4669      	mov	r1, sp
 80a0e8a:	a804      	add	r0, sp, #16
 80a0e8c:	f000 fcf6 	bl	80a187c <_ZN6StringC1ERKS_>
 80a0e90:	a804      	add	r0, sp, #16
 80a0e92:	47a0      	blx	r4
 80a0e94:	4604      	mov	r4, r0
 80a0e96:	a804      	add	r0, sp, #16
 80a0e98:	f000 fc87 	bl	80a17aa <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a0e9c:	4668      	mov	r0, sp
 80a0e9e:	f000 fc84 	bl	80a17aa <_ZN6StringD1Ev>
    return (*fn)(p);
}
 80a0ea2:	4620      	mov	r0, r4
 80a0ea4:	b008      	add	sp, #32
 80a0ea6:	bd10      	pop	{r4, pc}

080a0ea8 <_ZN10CloudClass22call_std_user_functionEPvPKcS0_>:

int CloudClass::call_std_user_function(void* data, const char* param, void* reserved)
{
 80a0ea8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a0eaa:	4604      	mov	r4, r0
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
 80a0eac:	4668      	mov	r0, sp
 80a0eae:	f000 fcc3 	bl	80a1838 <_ZN6StringC1EPK19__FlashStringHelper>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0eb2:	68a3      	ldr	r3, [r4, #8]
 80a0eb4:	b90b      	cbnz	r3, 80a0eba <_ZN10CloudClass22call_std_user_functionEPvPKcS0_+0x12>
	__throw_bad_function_call();
 80a0eb6:	f001 f89e 	bl	80a1ff6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0eba:	68e3      	ldr	r3, [r4, #12]
 80a0ebc:	4669      	mov	r1, sp
 80a0ebe:	4620      	mov	r0, r4
 80a0ec0:	4798      	blx	r3
 80a0ec2:	4604      	mov	r4, r0
 80a0ec4:	4668      	mov	r0, sp
 80a0ec6:	f000 fc70 	bl	80a17aa <_ZN6StringD1Ev>
}
 80a0eca:	4620      	mov	r0, r4
 80a0ecc:	b004      	add	sp, #16
 80a0ece:	bd10      	pop	{r4, pc}

080a0ed0 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a0ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0ed2:	4607      	mov	r7, r0
 80a0ed4:	460e      	mov	r6, r1
 80a0ed6:	4615      	mov	r5, r2
 80a0ed8:	b085      	sub	sp, #20
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 80a0eda:	2410      	movs	r4, #16
 80a0edc:	4622      	mov	r2, r4
 80a0ede:	2100      	movs	r1, #0
 80a0ee0:	4668      	mov	r0, sp
 80a0ee2:	f002 f872 	bl	80a2fca <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a0ee6:	2200      	movs	r2, #0
 80a0ee8:	4669      	mov	r1, sp
 80a0eea:	4610      	mov	r0, r2
         size = sizeof(*this);
 80a0eec:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
 80a0ef0:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 80a0ef2:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 80a0ef4:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a0ef6:	f7ff fe79 	bl	80a0bec <spark_function>
}
 80a0efa:	b005      	add	sp, #20
 80a0efc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0efe <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a0efe:	b513      	push	{r0, r1, r4, lr}
 80a0f00:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a0f02:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a0f06:	2300      	movs	r3, #0
 80a0f08:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a0f0a:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a0f0c:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a0f0e:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0f10:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a0f12:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a0f14:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0f16:	f7ff f94a 	bl	80a01ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0f1a:	4620      	mov	r0, r4
 80a0f1c:	b002      	add	sp, #8
 80a0f1e:	bd10      	pop	{r4, pc}

080a0f20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a0f20:	680b      	ldr	r3, [r1, #0]
 80a0f22:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a0f24:	b113      	cbz	r3, 80a0f2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a0f26:	685a      	ldr	r2, [r3, #4]
 80a0f28:	3201      	adds	r2, #1
 80a0f2a:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a0f2c:	4770      	bx	lr

080a0f2e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a0f2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0f30:	460c      	mov	r4, r1
 80a0f32:	4606      	mov	r6, r0
 80a0f34:	460f      	mov	r7, r1
 80a0f36:	f854 3b04 	ldr.w	r3, [r4], #4
 80a0f3a:	ad02      	add	r5, sp, #8
 80a0f3c:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a0f40:	4621      	mov	r1, r4
 80a0f42:	a801      	add	r0, sp, #4
 80a0f44:	f7ff ffec 	bl	80a0f20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a0f48:	4629      	mov	r1, r5
 80a0f4a:	4630      	mov	r0, r6
 80a0f4c:	f7ff ffd7 	bl	80a0efe <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0f50:	a801      	add	r0, sp, #4
 80a0f52:	f7ff f92c 	bl	80a01ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0f56:	4620      	mov	r0, r4
 80a0f58:	f7ff f929 	bl	80a01ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a0f5c:	4638      	mov	r0, r7
 80a0f5e:	2108      	movs	r1, #8
 80a0f60:	f001 f847 	bl	80a1ff2 <_ZdlPvj>
        return p;
    }
 80a0f64:	4630      	mov	r0, r6
 80a0f66:	b003      	add	sp, #12
 80a0f68:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0f6a <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a0f6a:	b513      	push	{r0, r1, r4, lr}
 80a0f6c:	460b      	mov	r3, r1
 80a0f6e:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0f70:	c803      	ldmia	r0, {r0, r1}
 80a0f72:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a0f76:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a0f7a:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a0f7e:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a0f82:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a0f86:	b002      	add	sp, #8
 80a0f88:	bd10      	pop	{r4, pc}
	...

080a0f8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a0f8c:	b538      	push	{r3, r4, r5, lr}
 80a0f8e:	2300      	movs	r3, #0
 80a0f90:	4604      	mov	r4, r0
 80a0f92:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0f94:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a0f96:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0f98:	f7ff f881 	bl	80a009e <_Znwj>
 80a0f9c:	b128      	cbz	r0, 80a0faa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a0f9e:	2301      	movs	r3, #1
 80a0fa0:	6043      	str	r3, [r0, #4]
 80a0fa2:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a0fa4:	4b02      	ldr	r3, [pc, #8]	; (80a0fb0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a0fa6:	60c5      	str	r5, [r0, #12]
 80a0fa8:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0faa:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 80a0fac:	4620      	mov	r0, r4
 80a0fae:	bd38      	pop	{r3, r4, r5, pc}
 80a0fb0:	080a3b00 	.word	0x080a3b00

080a0fb4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0fb4:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a0fb6:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0fb8:	b90a      	cbnz	r2, 80a0fbe <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a0fba:	f001 f81c 	bl	80a1ff6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0fbe:	68c3      	ldr	r3, [r0, #12]
    }
 80a0fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0fc4:	4718      	bx	r3

080a0fc6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a0fc6:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0fc8:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a0fca:	f100 0110 	add.w	r1, r0, #16
 80a0fce:	f7ff fff1 	bl	80a0fb4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a0fd2:	bd08      	pop	{r3, pc}

080a0fd4 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0fd4:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a0fd6:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0fd8:	b90a      	cbnz	r2, 80a0fde <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a0fda:	f001 f80c 	bl	80a1ff6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0fde:	68c3      	ldr	r3, [r0, #12]
    }
 80a0fe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0fe4:	4718      	bx	r3

080a0fe6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a0fe6:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0fe8:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a0fea:	f100 0110 	add.w	r1, r0, #16
 80a0fee:	f7ff fff1 	bl	80a0fd4 <_ZNKSt8functionIFvRKbEEclES1_>
 80a0ff2:	bd08      	pop	{r3, pc}

080a0ff4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0ff4:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0ff6:	2300      	movs	r3, #0
 80a0ff8:	6083      	str	r3, [r0, #8]
 80a0ffa:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0ffc:	4604      	mov	r4, r0
 80a0ffe:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a1000:	b12b      	cbz	r3, 80a100e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1002:	2202      	movs	r2, #2
 80a1004:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a1006:	68eb      	ldr	r3, [r5, #12]
 80a1008:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a100a:	68ab      	ldr	r3, [r5, #8]
 80a100c:	60a3      	str	r3, [r4, #8]
	}
    }
 80a100e:	4620      	mov	r0, r4
 80a1010:	bd38      	pop	{r3, r4, r5, pc}
	...

080a1014 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a1014:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1016:	b089      	sub	sp, #36	; 0x24
 80a1018:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a101a:	4668      	mov	r0, sp
 80a101c:	f7ff fef5 	bl	80a0e0a <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a1020:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a1024:	2300      	movs	r3, #0
 80a1026:	f88d 3008 	strb.w	r3, [sp, #8]
 80a102a:	e8d4 3f4f 	ldrexb	r3, [r4]
 80a102e:	2b00      	cmp	r3, #0
 80a1030:	d103      	bne.n	80a103a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 80a1032:	e8c4 2f41 	strexb	r1, r2, [r4]
 80a1036:	2900      	cmp	r1, #0
 80a1038:	d1f7      	bne.n	80a102a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 80a103a:	d002      	beq.n	80a1042 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 80a103c:	f88d 3008 	strb.w	r3, [sp, #8]
 80a1040:	e063      	b.n	80a110a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a1042:	f114 050c 	adds.w	r5, r4, #12
 80a1046:	d003      	beq.n	80a1050 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 80a1048:	4669      	mov	r1, sp
 80a104a:	4628      	mov	r0, r5
 80a104c:	f7ff fedd 	bl	80a0e0a <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a1050:	f3bf 8f5f 	dmb	sy
 80a1054:	2301      	movs	r3, #1
 80a1056:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a1058:	f3bf 8f5f 	dmb	sy
 80a105c:	f104 0308 	add.w	r3, r4, #8
 80a1060:	2000      	movs	r0, #0
 80a1062:	e853 6f00 	ldrex	r6, [r3]
 80a1066:	e843 0200 	strex	r2, r0, [r3]
 80a106a:	2a00      	cmp	r2, #0
 80a106c:	d1f9      	bne.n	80a1062 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 80a106e:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a1072:	2e00      	cmp	r6, #0
 80a1074:	d049      	beq.n	80a110a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a1076:	f7ff fd8d 	bl	80a0b94 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a107a:	b120      	cbz	r0, 80a1086 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a107c:	4629      	mov	r1, r5
 80a107e:	4630      	mov	r0, r6
 80a1080:	f7ff ff98 	bl	80a0fb4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a1084:	e03a      	b.n	80a10fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a1086:	4631      	mov	r1, r6
 80a1088:	a802      	add	r0, sp, #8
 80a108a:	f7ff ffb3 	bl	80a0ff4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a108e:	68e0      	ldr	r0, [r4, #12]
 80a1090:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a1094:	b108      	cbz	r0, 80a109a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 80a1096:	f001 ffdb 	bl	80a3050 <strdup>
 80a109a:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a109c:	2010      	movs	r0, #16
 80a109e:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a10a2:	f7fe fffc 	bl	80a009e <_Znwj>
 80a10a6:	4605      	mov	r5, r0
 80a10a8:	b1e8      	cbz	r0, 80a10e6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a10aa:	2700      	movs	r7, #0
 80a10ac:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a10ae:	2018      	movs	r0, #24
 80a10b0:	f7fe fff5 	bl	80a009e <_Znwj>
 80a10b4:	4604      	mov	r4, r0
 80a10b6:	b188      	cbz	r0, 80a10dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a10b8:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a10ba:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a10bc:	a802      	add	r0, sp, #8
 80a10be:	f7ff ff54 	bl	80a0f6a <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a10c2:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a10c4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a10c6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a10c8:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a10ca:	9204      	str	r2, [sp, #16]
 80a10cc:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a10ce:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a10d0:	60e3      	str	r3, [r4, #12]
 80a10d2:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a10d6:	9205      	str	r2, [sp, #20]
 80a10d8:	f7ff fe97 	bl	80a0e0a <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a10dc:	4b0d      	ldr	r3, [pc, #52]	; (80a1114 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a10de:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a10e0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a10e2:	4b0d      	ldr	r3, [pc, #52]	; (80a1118 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 80a10e4:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 80a10e6:	a806      	add	r0, sp, #24
 80a10e8:	f7ff fe9e 	bl	80a0e28 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a10ec:	a802      	add	r0, sp, #8
 80a10ee:	f7ff fe83 	bl	80a0df8 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a10f2:	2200      	movs	r2, #0
 80a10f4:	4629      	mov	r1, r5
 80a10f6:	4809      	ldr	r0, [pc, #36]	; (80a111c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 80a10f8:	f7ff fd54 	bl	80a0ba4 <application_thread_invoke>
 80a10fc:	4630      	mov	r0, r6
 80a10fe:	f7ff fe7b 	bl	80a0df8 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a1102:	2110      	movs	r1, #16
 80a1104:	4630      	mov	r0, r6
 80a1106:	f000 ff74 	bl	80a1ff2 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 80a110a:	4668      	mov	r0, sp
 80a110c:	f7ff fe8c 	bl	80a0e28 <_ZN8particle5ErrorD1Ev>
    }
 80a1110:	b009      	add	sp, #36	; 0x24
 80a1112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1114:	080a0fc7 	.word	0x080a0fc7
 80a1118:	080a123d 	.word	0x080a123d
 80a111c:	080a0db3 	.word	0x080a0db3

080a1120 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a1120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1124:	b08b      	sub	sp, #44	; 0x2c
 80a1126:	4606      	mov	r6, r0
 80a1128:	460f      	mov	r7, r1
 80a112a:	4690      	mov	r8, r2
 80a112c:	4699      	mov	r9, r3
 80a112e:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a1132:	f7ff fd73 	bl	80a0c1c <spark_cloud_flag_connected>
 80a1136:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
 80a1138:	4683      	mov	fp, r0
 80a113a:	bb30      	cbnz	r0, 80a118a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a113c:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a1140:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a1142:	a905      	add	r1, sp, #20
 80a1144:	4628      	mov	r0, r5
 80a1146:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a114a:	f7ff fe5e 	bl	80a0e0a <_ZN8particle5ErrorC1EOS0_>
 80a114e:	2014      	movs	r0, #20
 80a1150:	f7fe ffa5 	bl	80a009e <_Znwj>
 80a1154:	4604      	mov	r4, r0
 80a1156:	b158      	cbz	r0, 80a1170 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a1158:	2302      	movs	r3, #2
 80a115a:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a115c:	2301      	movs	r3, #1
 80a115e:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a1160:	f8c0 b004 	str.w	fp, [r0, #4]
 80a1164:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 80a1168:	4629      	mov	r1, r5
 80a116a:	300c      	adds	r0, #12
 80a116c:	f7ff fe4d 	bl	80a0e0a <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a1170:	4630      	mov	r0, r6
 80a1172:	4621      	mov	r1, r4
 80a1174:	f840 4b04 	str.w	r4, [r0], #4
 80a1178:	f7ff ff08 	bl	80a0f8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a117c:	4628      	mov	r0, r5
 80a117e:	f7ff fe53 	bl	80a0e28 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a1182:	a805      	add	r0, sp, #20
 80a1184:	f7ff fe50 	bl	80a0e28 <_ZN8particle5ErrorD1Ev>
 80a1188:	e052      	b.n	80a1230 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a118a:	2400      	movs	r4, #0
 80a118c:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a118e:	2014      	movs	r0, #20
 80a1190:	606c      	str	r4, [r5, #4]
 80a1192:	60ac      	str	r4, [r5, #8]
 80a1194:	9307      	str	r3, [sp, #28]
 80a1196:	f7fe ff82 	bl	80a009e <_Znwj>
 80a119a:	4601      	mov	r1, r0
 80a119c:	b118      	cbz	r0, 80a11a6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 80a119e:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a11a0:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a11a2:	6044      	str	r4, [r0, #4]
 80a11a4:	6084      	str	r4, [r0, #8]
 80a11a6:	a804      	add	r0, sp, #16
 80a11a8:	9103      	str	r1, [sp, #12]
 80a11aa:	f7ff feef 	bl	80a0f8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a11ae:	4b22      	ldr	r3, [pc, #136]	; (80a1238 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a11b0:	2008      	movs	r0, #8
 80a11b2:	9308      	str	r3, [sp, #32]
 80a11b4:	f7fe ff73 	bl	80a009e <_Znwj>
 80a11b8:	4604      	mov	r4, r0
 80a11ba:	b128      	cbz	r0, 80a11c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a11bc:	9b03      	ldr	r3, [sp, #12]
 80a11be:	a904      	add	r1, sp, #16
 80a11c0:	f840 3b04 	str.w	r3, [r0], #4
 80a11c4:	f7ff feac 	bl	80a0f20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a11c8:	9500      	str	r5, [sp, #0]
 80a11ca:	fa5f f38a 	uxtb.w	r3, sl
 80a11ce:	464a      	mov	r2, r9
 80a11d0:	4641      	mov	r1, r8
 80a11d2:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a11d4:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a11d6:	f7ff fd31 	bl	80a0c3c <spark_send_event>
 80a11da:	b920      	cbnz	r0, 80a11e6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a11dc:	9b03      	ldr	r3, [sp, #12]
 80a11de:	785b      	ldrb	r3, [r3, #1]
 80a11e0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a11e4:	b183      	cbz	r3, 80a1208 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 80a11e6:	9b03      	ldr	r3, [sp, #12]
 80a11e8:	a904      	add	r1, sp, #16
 80a11ea:	a806      	add	r0, sp, #24
 80a11ec:	9305      	str	r3, [sp, #20]
 80a11ee:	f7ff fe97 	bl	80a0f20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a11f2:	a905      	add	r1, sp, #20
 80a11f4:	4630      	mov	r0, r6
 80a11f6:	f7ff fe82 	bl	80a0efe <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a11fa:	a806      	add	r0, sp, #24
 80a11fc:	f7fe ffd7 	bl	80a01ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1200:	a804      	add	r0, sp, #16
 80a1202:	f7fe ffd4 	bl	80a01ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1206:	e013      	b.n	80a1230 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 80a1208:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a120c:	a905      	add	r1, sp, #20
 80a120e:	a803      	add	r0, sp, #12
 80a1210:	9205      	str	r2, [sp, #20]
 80a1212:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a1216:	f7ff fefd 	bl	80a1014 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a121a:	a805      	add	r0, sp, #20
 80a121c:	f7ff fe04 	bl	80a0e28 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a1220:	a805      	add	r0, sp, #20
 80a1222:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a1224:	f7ff fe83 	bl	80a0f2e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 80a1228:	a806      	add	r0, sp, #24
 80a122a:	f7fe ffc0 	bl	80a01ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a122e:	e7da      	b.n	80a11e6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 80a1230:	4630      	mov	r0, r6
 80a1232:	b00b      	add	sp, #44	; 0x2c
 80a1234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1238:	080a13ad 	.word	0x080a13ad

080a123c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a123c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a123e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1240:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1242:	d006      	beq.n	80a1252 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a1244:	2a03      	cmp	r2, #3
 80a1246:	d017      	beq.n	80a1278 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a1248:	2a01      	cmp	r2, #1
 80a124a:	d122      	bne.n	80a1292 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a124c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a124e:	6003      	str	r3, [r0, #0]
	      break;
 80a1250:	e01f      	b.n	80a1292 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1252:	2018      	movs	r0, #24
 80a1254:	680e      	ldr	r6, [r1, #0]
 80a1256:	f7fe ff22 	bl	80a009e <_Znwj>
 80a125a:	4605      	mov	r5, r0
 80a125c:	b150      	cbz	r0, 80a1274 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a125e:	4631      	mov	r1, r6
 80a1260:	f7ff fec8 	bl	80a0ff4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a1264:	6930      	ldr	r0, [r6, #16]
 80a1266:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a126a:	b108      	cbz	r0, 80a1270 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a126c:	f001 fef0 	bl	80a3050 <strdup>
 80a1270:	6128      	str	r0, [r5, #16]
 80a1272:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1274:	6025      	str	r5, [r4, #0]
 80a1276:	e00c      	b.n	80a1292 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1278:	6804      	ldr	r4, [r0, #0]
 80a127a:	b154      	cbz	r4, 80a1292 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 80a127c:	f104 0010 	add.w	r0, r4, #16
 80a1280:	f7ff fdd2 	bl	80a0e28 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1284:	4620      	mov	r0, r4
 80a1286:	f7ff fdb7 	bl	80a0df8 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a128a:	2118      	movs	r1, #24
 80a128c:	4620      	mov	r0, r4
 80a128e:	f000 feb0 	bl	80a1ff2 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a1292:	2000      	movs	r0, #0
 80a1294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1296 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1296:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1298:	2300      	movs	r3, #0
 80a129a:	6083      	str	r3, [r0, #8]
 80a129c:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a129e:	4604      	mov	r4, r0
 80a12a0:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a12a2:	b12b      	cbz	r3, 80a12b0 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a12a4:	2202      	movs	r2, #2
 80a12a6:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a12a8:	68eb      	ldr	r3, [r5, #12]
 80a12aa:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a12ac:	68ab      	ldr	r3, [r5, #8]
 80a12ae:	60a3      	str	r3, [r4, #8]
	}
    }
 80a12b0:	4620      	mov	r0, r4
 80a12b2:	bd38      	pop	{r3, r4, r5, pc}

080a12b4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a12b4:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a12b6:	b570      	push	{r4, r5, r6, lr}
 80a12b8:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a12ba:	d006      	beq.n	80a12ca <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a12bc:	2a03      	cmp	r2, #3
 80a12be:	d011      	beq.n	80a12e4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a12c0:	2a01      	cmp	r2, #1
 80a12c2:	d118      	bne.n	80a12f6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a12c4:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a12c6:	6003      	str	r3, [r0, #0]
	      break;
 80a12c8:	e015      	b.n	80a12f6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a12ca:	2014      	movs	r0, #20
 80a12cc:	680e      	ldr	r6, [r1, #0]
 80a12ce:	f7fe fee6 	bl	80a009e <_Znwj>
 80a12d2:	4605      	mov	r5, r0
 80a12d4:	b120      	cbz	r0, 80a12e0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a12d6:	4631      	mov	r1, r6
 80a12d8:	f7ff ffdd 	bl	80a1296 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a12dc:	7c33      	ldrb	r3, [r6, #16]
 80a12de:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a12e0:	6025      	str	r5, [r4, #0]
 80a12e2:	e008      	b.n	80a12f6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a12e4:	6804      	ldr	r4, [r0, #0]
 80a12e6:	b134      	cbz	r4, 80a12f6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a12e8:	4620      	mov	r0, r4
 80a12ea:	f7ff fd85 	bl	80a0df8 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a12ee:	2114      	movs	r1, #20
 80a12f0:	4620      	mov	r0, r4
 80a12f2:	f000 fe7e 	bl	80a1ff2 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a12f6:	2000      	movs	r0, #0
 80a12f8:	bd70      	pop	{r4, r5, r6, pc}
	...

080a12fc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a12fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a12fe:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a1300:	f3bf 8f5f 	dmb	sy
 80a1304:	b087      	sub	sp, #28
 80a1306:	2300      	movs	r3, #0
 80a1308:	e850 6f00 	ldrex	r6, [r0]
 80a130c:	e840 3200 	strex	r2, r3, [r0]
 80a1310:	2a00      	cmp	r2, #0
 80a1312:	d1f9      	bne.n	80a1308 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a1314:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a1318:	2e00      	cmp	r6, #0
 80a131a:	d03f      	beq.n	80a139c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a131c:	4618      	mov	r0, r3
 80a131e:	f7ff fc39 	bl	80a0b94 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a1322:	4607      	mov	r7, r0
 80a1324:	b120      	cbz	r0, 80a1330 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a1326:	4621      	mov	r1, r4
 80a1328:	4630      	mov	r0, r6
 80a132a:	f7ff fe53 	bl	80a0fd4 <_ZNKSt8functionIFvRKbEEclES1_>
 80a132e:	e02e      	b.n	80a138e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a1330:	4631      	mov	r1, r6
 80a1332:	a801      	add	r0, sp, #4
 80a1334:	f7ff ffaf 	bl	80a1296 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a1338:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a133a:	2010      	movs	r0, #16
 80a133c:	f88d 3014 	strb.w	r3, [sp, #20]
 80a1340:	f7fe fead 	bl	80a009e <_Znwj>
 80a1344:	4605      	mov	r5, r0
 80a1346:	b1d0      	cbz	r0, 80a137e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1348:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a134a:	2014      	movs	r0, #20
 80a134c:	f7fe fea7 	bl	80a009e <_Znwj>
 80a1350:	4604      	mov	r4, r0
 80a1352:	b178      	cbz	r0, 80a1374 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1354:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a1356:	4601      	mov	r1, r0
 80a1358:	a801      	add	r0, sp, #4
 80a135a:	f7ff fe06 	bl	80a0f6a <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a135e:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a1360:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1362:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1364:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a1366:	9203      	str	r2, [sp, #12]
 80a1368:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a136a:	60e3      	str	r3, [r4, #12]
 80a136c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1370:	9204      	str	r2, [sp, #16]
 80a1372:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1374:	4b0a      	ldr	r3, [pc, #40]	; (80a13a0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1376:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1378:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a137a:	4b0a      	ldr	r3, [pc, #40]	; (80a13a4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a137c:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a137e:	a801      	add	r0, sp, #4
 80a1380:	f7ff fd3a 	bl	80a0df8 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1384:	2200      	movs	r2, #0
 80a1386:	4629      	mov	r1, r5
 80a1388:	4807      	ldr	r0, [pc, #28]	; (80a13a8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a138a:	f7ff fc0b 	bl	80a0ba4 <application_thread_invoke>
 80a138e:	4630      	mov	r0, r6
 80a1390:	f7ff fd32 	bl	80a0df8 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a1394:	2110      	movs	r1, #16
 80a1396:	4630      	mov	r0, r6
 80a1398:	f000 fe2b 	bl	80a1ff2 <_ZdlPvj>
        }
    }
 80a139c:	b007      	add	sp, #28
 80a139e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a13a0:	080a0fe7 	.word	0x080a0fe7
 80a13a4:	080a12b5 	.word	0x080a12b5
 80a13a8:	080a0db3 	.word	0x080a0db3

080a13ac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a13ac:	b530      	push	{r4, r5, lr}
 80a13ae:	4604      	mov	r4, r0
 80a13b0:	b085      	sub	sp, #20
 80a13b2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a13b4:	4668      	mov	r0, sp
 80a13b6:	4611      	mov	r1, r2
 80a13b8:	f7ff fdb9 	bl	80a0f2e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a13bc:	b17c      	cbz	r4, 80a13de <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a13be:	b224      	sxth	r4, r4
 80a13c0:	4628      	mov	r0, r5
 80a13c2:	b10d      	cbz	r5, 80a13c8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a13c4:	f001 fe44 	bl	80a3050 <strdup>
 80a13c8:	9002      	str	r0, [sp, #8]
 80a13ca:	a902      	add	r1, sp, #8
 80a13cc:	4668      	mov	r0, sp
 80a13ce:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a13d2:	f7ff fe1f 	bl	80a1014 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a13d6:	a802      	add	r0, sp, #8
 80a13d8:	f7ff fd26 	bl	80a0e28 <_ZN8particle5ErrorD1Ev>
 80a13dc:	e01d      	b.n	80a141a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a13de:	f04f 0201 	mov.w	r2, #1
 80a13e2:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a13e4:	f88d 4008 	strb.w	r4, [sp, #8]
 80a13e8:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a13ec:	42a3      	cmp	r3, r4
 80a13ee:	d103      	bne.n	80a13f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a13f0:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a13f4:	2900      	cmp	r1, #0
 80a13f6:	d1f7      	bne.n	80a13e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a13f8:	d002      	beq.n	80a1400 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a13fa:	f88d 3008 	strb.w	r3, [sp, #8]
 80a13fe:	e00c      	b.n	80a141a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a1400:	f110 010c 	adds.w	r1, r0, #12
 80a1404:	f04f 0301 	mov.w	r3, #1
 80a1408:	bf18      	it	ne
 80a140a:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a140c:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a1410:	3004      	adds	r0, #4
 80a1412:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a1416:	f7ff ff71 	bl	80a12fc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a141a:	a801      	add	r0, sp, #4
 80a141c:	f7fe fec7 	bl	80a01ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a1420:	b005      	add	sp, #20
 80a1422:	bd30      	pop	{r4, r5, pc}

080a1424 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a1424:	4770      	bx	lr

080a1426 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1426:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1428:	4606      	mov	r6, r0
 80a142a:	4615      	mov	r5, r2
 80a142c:	460c      	mov	r4, r1
 80a142e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1430:	42bc      	cmp	r4, r7
 80a1432:	d006      	beq.n	80a1442 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1434:	6833      	ldr	r3, [r6, #0]
 80a1436:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a143a:	689b      	ldr	r3, [r3, #8]
 80a143c:	4630      	mov	r0, r6
 80a143e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1440:	e7f6      	b.n	80a1430 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a1442:	4628      	mov	r0, r5
 80a1444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1446 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a1446:	2200      	movs	r2, #0
 80a1448:	7c00      	ldrb	r0, [r0, #16]
 80a144a:	f7ff bab9 	b.w	80a09c0 <HAL_I2C_Write_Data>

080a144e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a144e:	2100      	movs	r1, #0
 80a1450:	7c00      	ldrb	r0, [r0, #16]
 80a1452:	f7ff babd 	b.w	80a09d0 <HAL_I2C_Available_Data>

080a1456 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a1456:	2100      	movs	r1, #0
 80a1458:	7c00      	ldrb	r0, [r0, #16]
 80a145a:	f7ff bac1 	b.w	80a09e0 <HAL_I2C_Read_Data>

080a145e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a145e:	2100      	movs	r1, #0
 80a1460:	7c00      	ldrb	r0, [r0, #16]
 80a1462:	f7ff bac5 	b.w	80a09f0 <HAL_I2C_Peek_Data>

080a1466 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a1466:	2100      	movs	r1, #0
 80a1468:	7c00      	ldrb	r0, [r0, #16]
 80a146a:	f7ff bac9 	b.w	80a0a00 <HAL_I2C_Flush_Data>

080a146e <_ZN7TwoWireD0Ev>:
 80a146e:	b510      	push	{r4, lr}
 80a1470:	4604      	mov	r4, r0
 80a1472:	2114      	movs	r1, #20
 80a1474:	f000 fdbd 	bl	80a1ff2 <_ZdlPvj>
 80a1478:	4620      	mov	r0, r4
 80a147a:	bd10      	pop	{r4, pc}

080a147c <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a147c:	b510      	push	{r4, lr}
 80a147e:	4604      	mov	r4, r0
 80a1480:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1482:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1486:	60a3      	str	r3, [r4, #8]
 80a1488:	4b04      	ldr	r3, [pc, #16]	; (80a149c <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a148a:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a148c:	7420      	strb	r0, [r4, #16]
 80a148e:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1490:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a1492:	f7ff fac5 	bl	80a0a20 <HAL_I2C_Init>

}
 80a1496:	4620      	mov	r0, r4
 80a1498:	bd10      	pop	{r4, pc}
 80a149a:	bf00      	nop
 80a149c:	080a3b1c 	.word	0x080a3b1c

080a14a0 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a14a0:	2100      	movs	r1, #0
 80a14a2:	7c00      	ldrb	r0, [r0, #16]
 80a14a4:	f7ff bab4 	b.w	80a0a10 <HAL_I2C_Is_Enabled>

080a14a8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a14a8:	4770      	bx	lr

080a14aa <_ZN9IPAddressD0Ev>:
 80a14aa:	b510      	push	{r4, lr}
 80a14ac:	4604      	mov	r4, r0
 80a14ae:	2118      	movs	r1, #24
 80a14b0:	f000 fd9f 	bl	80a1ff2 <_ZdlPvj>
 80a14b4:	4620      	mov	r0, r4
 80a14b6:	bd10      	pop	{r4, pc}

080a14b8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a14b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a14ba:	460f      	mov	r7, r1
 80a14bc:	f100 0608 	add.w	r6, r0, #8
 80a14c0:	1d05      	adds	r5, r0, #4
 80a14c2:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a14c4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a14c8:	220a      	movs	r2, #10
 80a14ca:	4638      	mov	r0, r7
 80a14cc:	f000 f927 	bl	80a171e <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a14d0:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a14d2:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a14d4:	d007      	beq.n	80a14e6 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a14d6:	2c00      	cmp	r4, #0
 80a14d8:	d0f4      	beq.n	80a14c4 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a14da:	212e      	movs	r1, #46	; 0x2e
 80a14dc:	4638      	mov	r0, r7
 80a14de:	f000 f8db 	bl	80a1698 <_ZN5Print5printEc>
 80a14e2:	4404      	add	r4, r0
 80a14e4:	e7ee      	b.n	80a14c4 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a14e6:	4620      	mov	r0, r4
 80a14e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a14ec <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a14ec:	b510      	push	{r4, lr}
 80a14ee:	4604      	mov	r4, r0
 80a14f0:	4b04      	ldr	r3, [pc, #16]	; (80a1504 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a14f2:	2211      	movs	r2, #17
 80a14f4:	f840 3b04 	str.w	r3, [r0], #4
 80a14f8:	2100      	movs	r1, #0
 80a14fa:	f001 fd66 	bl	80a2fca <memset>
{
    clear();
}
 80a14fe:	4620      	mov	r0, r4
 80a1500:	bd10      	pop	{r4, pc}
 80a1502:	bf00      	nop
 80a1504:	080a3b44 	.word	0x080a3b44

080a1508 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1508:	4603      	mov	r3, r0
 80a150a:	4a07      	ldr	r2, [pc, #28]	; (80a1528 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a150c:	b510      	push	{r4, lr}
 80a150e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a1512:	f101 0210 	add.w	r2, r1, #16
 80a1516:	f851 4b04 	ldr.w	r4, [r1], #4
 80a151a:	4291      	cmp	r1, r2
 80a151c:	f843 4b04 	str.w	r4, [r3], #4
 80a1520:	d1f9      	bne.n	80a1516 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1522:	780a      	ldrb	r2, [r1, #0]
 80a1524:	701a      	strb	r2, [r3, #0]
}
 80a1526:	bd10      	pop	{r4, pc}
 80a1528:	080a3b44 	.word	0x080a3b44

080a152c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a152c:	4a02      	ldr	r2, [pc, #8]	; (80a1538 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a152e:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1530:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a1532:	2204      	movs	r2, #4
 80a1534:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a1536:	4770      	bx	lr
 80a1538:	080a3b44 	.word	0x080a3b44

080a153c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a153c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a153e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1542:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a1546:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a154a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a154e:	2304      	movs	r3, #4
 80a1550:	6041      	str	r1, [r0, #4]
 80a1552:	7503      	strb	r3, [r0, #20]
 80a1554:	bd10      	pop	{r4, pc}
	...

080a1558 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1558:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a155a:	4d04      	ldr	r5, [pc, #16]	; (80a156c <_ZN9IPAddressC1Ehhhh+0x14>)
 80a155c:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a155e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1562:	9500      	str	r5, [sp, #0]
 80a1564:	f7ff ffea 	bl	80a153c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1568:	b003      	add	sp, #12
 80a156a:	bd30      	pop	{r4, r5, pc}
 80a156c:	080a3b44 	.word	0x080a3b44

080a1570 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1570:	4a01      	ldr	r2, [pc, #4]	; (80a1578 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1572:	4b02      	ldr	r3, [pc, #8]	; (80a157c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1574:	601a      	str	r2, [r3, #0]
 80a1576:	4770      	bx	lr
 80a1578:	080a3c0b 	.word	0x080a3c0b
 80a157c:	20000270 	.word	0x20000270

080a1580 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1580:	2300      	movs	r3, #0
 80a1582:	461a      	mov	r2, r3
 80a1584:	6840      	ldr	r0, [r0, #4]
 80a1586:	f7ff bb81 	b.w	80a0c8c <network_connect>

080a158a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a158a:	2200      	movs	r2, #0
 80a158c:	2102      	movs	r1, #2
 80a158e:	6840      	ldr	r0, [r0, #4]
 80a1590:	f7ff bb8c 	b.w	80a0cac <network_disconnect>

080a1594 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a1594:	2200      	movs	r2, #0
 80a1596:	4611      	mov	r1, r2
 80a1598:	6840      	ldr	r0, [r0, #4]
 80a159a:	f7ff bb7f 	b.w	80a0c9c <network_connecting>

080a159e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a159e:	2200      	movs	r2, #0
 80a15a0:	4611      	mov	r1, r2
 80a15a2:	6840      	ldr	r0, [r0, #4]
 80a15a4:	f7ff bb8a 	b.w	80a0cbc <network_ready>

080a15a8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a15a8:	2300      	movs	r3, #0
 80a15aa:	461a      	mov	r2, r3
 80a15ac:	4619      	mov	r1, r3
 80a15ae:	6840      	ldr	r0, [r0, #4]
 80a15b0:	f7ff bb8c 	b.w	80a0ccc <network_on>

080a15b4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a15b4:	2300      	movs	r3, #0
 80a15b6:	461a      	mov	r2, r3
 80a15b8:	4619      	mov	r1, r3
 80a15ba:	6840      	ldr	r0, [r0, #4]
 80a15bc:	f7ff bb8e 	b.w	80a0cdc <network_off>

080a15c0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a15c0:	2200      	movs	r2, #0
 80a15c2:	f081 0101 	eor.w	r1, r1, #1
 80a15c6:	6840      	ldr	r0, [r0, #4]
 80a15c8:	f7ff bb90 	b.w	80a0cec <network_listen>

080a15cc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a15cc:	2200      	movs	r2, #0
 80a15ce:	6840      	ldr	r0, [r0, #4]
 80a15d0:	f7ff bb9c 	b.w	80a0d0c <network_set_listen_timeout>

080a15d4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a15d4:	2200      	movs	r2, #0
 80a15d6:	4611      	mov	r1, r2
 80a15d8:	6840      	ldr	r0, [r0, #4]
 80a15da:	f7ff bb9f 	b.w	80a0d1c <network_get_listen_timeout>

080a15de <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a15de:	2200      	movs	r2, #0
 80a15e0:	4611      	mov	r1, r2
 80a15e2:	6840      	ldr	r0, [r0, #4]
 80a15e4:	f7ff bb8a 	b.w	80a0cfc <network_listening>

080a15e8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a15e8:	b570      	push	{r4, r5, r6, lr}
 80a15ea:	4616      	mov	r6, r2
 80a15ec:	b08e      	sub	sp, #56	; 0x38
 80a15ee:	4604      	mov	r4, r0
    IPAddress addr;
 80a15f0:	a808      	add	r0, sp, #32
 80a15f2:	f7ff ff7b 	bl	80a14ec <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a15f6:	2211      	movs	r2, #17
 80a15f8:	2100      	movs	r1, #0
 80a15fa:	a803      	add	r0, sp, #12
 80a15fc:	f001 fce5 	bl	80a2fca <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1600:	4630      	mov	r0, r6
 80a1602:	f001 fd40 	bl	80a3086 <strlen>
 80a1606:	2500      	movs	r5, #0
 80a1608:	4b0a      	ldr	r3, [pc, #40]	; (80a1634 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a160a:	9500      	str	r5, [sp, #0]
 80a160c:	b281      	uxth	r1, r0
 80a160e:	685b      	ldr	r3, [r3, #4]
 80a1610:	aa03      	add	r2, sp, #12
 80a1612:	4630      	mov	r0, r6
 80a1614:	f7ff fa96 	bl	80a0b44 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1618:	b120      	cbz	r0, 80a1624 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a161a:	4629      	mov	r1, r5
 80a161c:	4620      	mov	r0, r4
 80a161e:	f7ff ff85 	bl	80a152c <_ZN9IPAddressC1Em>
 80a1622:	e003      	b.n	80a162c <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a1624:	a903      	add	r1, sp, #12
 80a1626:	4620      	mov	r0, r4
 80a1628:	f7ff ff6e 	bl	80a1508 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a162c:	4620      	mov	r0, r4
 80a162e:	b00e      	add	sp, #56	; 0x38
 80a1630:	bd70      	pop	{r4, r5, r6, pc}
 80a1632:	bf00      	nop
 80a1634:	20000724 	.word	0x20000724

080a1638 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1638:	4b02      	ldr	r3, [pc, #8]	; (80a1644 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a163a:	4a03      	ldr	r2, [pc, #12]	; (80a1648 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a163c:	601a      	str	r2, [r3, #0]
 80a163e:	2200      	movs	r2, #0
 80a1640:	605a      	str	r2, [r3, #4]
 80a1642:	4770      	bx	lr
 80a1644:	20000274 	.word	0x20000274
 80a1648:	080a3c3c 	.word	0x080a3c3c

080a164c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a164c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a164e:	4606      	mov	r6, r0
 80a1650:	460d      	mov	r5, r1
 80a1652:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a1654:	2400      	movs	r4, #0
  while (size--) {
 80a1656:	42bd      	cmp	r5, r7
 80a1658:	d00c      	beq.n	80a1674 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a165a:	6833      	ldr	r3, [r6, #0]
 80a165c:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1660:	689b      	ldr	r3, [r3, #8]
 80a1662:	4630      	mov	r0, r6
 80a1664:	4798      	blx	r3
     if (chunk>=0)
 80a1666:	2800      	cmp	r0, #0
 80a1668:	db01      	blt.n	80a166e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a166a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a166c:	e7f3      	b.n	80a1656 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a166e:	2c00      	cmp	r4, #0
 80a1670:	bf08      	it	eq
 80a1672:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1674:	4620      	mov	r0, r4
 80a1676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1678 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1678:	b570      	push	{r4, r5, r6, lr}
 80a167a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a167c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a167e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a1680:	b149      	cbz	r1, 80a1696 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1682:	f001 fd00 	bl	80a3086 <strlen>
 80a1686:	682b      	ldr	r3, [r5, #0]
 80a1688:	4602      	mov	r2, r0
 80a168a:	4621      	mov	r1, r4
 80a168c:	4628      	mov	r0, r5
    }
 80a168e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a1692:	68db      	ldr	r3, [r3, #12]
 80a1694:	4718      	bx	r3
    }
 80a1696:	bd70      	pop	{r4, r5, r6, pc}

080a1698 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1698:	6803      	ldr	r3, [r0, #0]
 80a169a:	689b      	ldr	r3, [r3, #8]
 80a169c:	4718      	bx	r3

080a169e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a169e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a16a0:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a16a2:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a16a4:	f7ff fff8 	bl	80a1698 <_ZN5Print5printEc>
  n += print('\n');
 80a16a8:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a16aa:	4604      	mov	r4, r0
  n += print('\n');
 80a16ac:	4628      	mov	r0, r5
 80a16ae:	f7ff fff3 	bl	80a1698 <_ZN5Print5printEc>
  return n;
}
 80a16b2:	4420      	add	r0, r4
 80a16b4:	bd38      	pop	{r3, r4, r5, pc}

080a16b6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a16b6:	b538      	push	{r3, r4, r5, lr}
 80a16b8:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a16ba:	f7ff ffdd 	bl	80a1678 <_ZN5Print5writeEPKc>
 80a16be:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a16c0:	4628      	mov	r0, r5
 80a16c2:	f7ff ffec 	bl	80a169e <_ZN5Print7printlnEv>
  return n;
}
 80a16c6:	4420      	add	r0, r4
 80a16c8:	bd38      	pop	{r3, r4, r5, pc}

080a16ca <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a16ca:	2a01      	cmp	r2, #1
 80a16cc:	bf98      	it	ls
 80a16ce:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a16d0:	b530      	push	{r4, r5, lr}
 80a16d2:	460b      	mov	r3, r1
 80a16d4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a16d6:	2100      	movs	r1, #0
 80a16d8:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a16dc:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a16e0:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a16e4:	fb05 3312 	mls	r3, r5, r2, r3
 80a16e8:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a16ea:	2b09      	cmp	r3, #9
 80a16ec:	bf94      	ite	ls
 80a16ee:	3330      	addls	r3, #48	; 0x30
 80a16f0:	3337      	addhi	r3, #55	; 0x37
 80a16f2:	b2db      	uxtb	r3, r3
 80a16f4:	4621      	mov	r1, r4
 80a16f6:	f804 3901 	strb.w	r3, [r4], #-1
 80a16fa:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a16fc:	2d00      	cmp	r5, #0
 80a16fe:	d1ef      	bne.n	80a16e0 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a1700:	f7ff ffba 	bl	80a1678 <_ZN5Print5writeEPKc>
}
 80a1704:	b00b      	add	sp, #44	; 0x2c
 80a1706:	bd30      	pop	{r4, r5, pc}

080a1708 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a1708:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a170a:	b922      	cbnz	r2, 80a1716 <_ZN5Print5printEmi+0xe>
 80a170c:	6803      	ldr	r3, [r0, #0]
 80a170e:	b2c9      	uxtb	r1, r1
 80a1710:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a1712:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a1714:	4718      	bx	r3
  else return printNumber(n, base);
 80a1716:	b2d2      	uxtb	r2, r2
}
 80a1718:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a171a:	f7ff bfd6 	b.w	80a16ca <_ZN5Print11printNumberEmh>

080a171e <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a171e:	f7ff bff3 	b.w	80a1708 <_ZN5Print5printEmi>

080a1722 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a1722:	b510      	push	{r4, lr}
 80a1724:	4604      	mov	r4, r0
 80a1726:	f7ff fb67 	bl	80a0df8 <_ZNSt14_Function_baseD1Ev>
 80a172a:	4620      	mov	r0, r4
 80a172c:	bd10      	pop	{r4, pc}
	...

080a1730 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1730:	4803      	ldr	r0, [pc, #12]	; (80a1740 <_GLOBAL__sub_I_RGB+0x10>)
 80a1732:	2300      	movs	r3, #0
 80a1734:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a1736:	4a03      	ldr	r2, [pc, #12]	; (80a1744 <_GLOBAL__sub_I_RGB+0x14>)
 80a1738:	4903      	ldr	r1, [pc, #12]	; (80a1748 <_GLOBAL__sub_I_RGB+0x18>)
 80a173a:	f000 bc55 	b.w	80a1fe8 <__aeabi_atexit>
 80a173e:	bf00      	nop
 80a1740:	2000027c 	.word	0x2000027c
 80a1744:	20000190 	.word	0x20000190
 80a1748:	080a1723 	.word	0x080a1723

080a174c <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a174c:	4770      	bx	lr

080a174e <_ZN8SPIClassD0Ev>:
 80a174e:	b510      	push	{r4, lr}
 80a1750:	4604      	mov	r4, r0
 80a1752:	2110      	movs	r1, #16
 80a1754:	f000 fc4d 	bl	80a1ff2 <_ZdlPvj>
 80a1758:	4620      	mov	r0, r4
 80a175a:	bd10      	pop	{r4, pc}

080a175c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a175c:	b570      	push	{r4, r5, r6, lr}
 80a175e:	4604      	mov	r4, r0
 80a1760:	460e      	mov	r6, r1
 80a1762:	4b07      	ldr	r3, [pc, #28]	; (80a1780 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a1764:	2500      	movs	r5, #0
 80a1766:	6003      	str	r3, [r0, #0]
 80a1768:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a176c:	f7ff f8d0 	bl	80a0910 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a1770:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a1772:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a1774:	f7ff f95e 	bl	80a0a34 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a1778:	60a5      	str	r5, [r4, #8]
}
 80a177a:	4620      	mov	r0, r4
 80a177c:	bd70      	pop	{r4, r5, r6, pc}
 80a177e:	bf00      	nop
 80a1780:	080a3c70 	.word	0x080a3c70

080a1784 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a1784:	7900      	ldrb	r0, [r0, #4]
 80a1786:	f7ff b95d 	b.w	80a0a44 <HAL_SPI_Is_Enabled>

080a178a <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a178a:	2300      	movs	r3, #0
 80a178c:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a178e:	6043      	str	r3, [r0, #4]
	len = 0;
 80a1790:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1792:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
 80a1794:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
 80a1796:	680c      	ldr	r4, [r1, #0]
 80a1798:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
 80a179a:	684c      	ldr	r4, [r1, #4]
 80a179c:	6044      	str	r4, [r0, #4]
	len = rhs.len;
 80a179e:	688c      	ldr	r4, [r1, #8]
 80a17a0:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
 80a17a2:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
 80a17a4:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
 80a17a6:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
 80a17a8:	bd10      	pop	{r4, pc}

080a17aa <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a17aa:	b510      	push	{r4, lr}
 80a17ac:	4604      	mov	r4, r0
{
	free(buffer);
 80a17ae:	6800      	ldr	r0, [r0, #0]
 80a17b0:	f7ff fac4 	bl	80a0d3c <free>
}
 80a17b4:	4620      	mov	r0, r4
 80a17b6:	bd10      	pop	{r4, pc}

080a17b8 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a17b8:	b510      	push	{r4, lr}
 80a17ba:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a17bc:	6800      	ldr	r0, [r0, #0]
 80a17be:	b108      	cbz	r0, 80a17c4 <_ZN6String10invalidateEv+0xc>
 80a17c0:	f7ff fabc 	bl	80a0d3c <free>
	buffer = NULL;
 80a17c4:	2300      	movs	r3, #0
 80a17c6:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a17c8:	60a3      	str	r3, [r4, #8]
 80a17ca:	6063      	str	r3, [r4, #4]
 80a17cc:	bd10      	pop	{r4, pc}

080a17ce <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a17ce:	b538      	push	{r3, r4, r5, lr}
 80a17d0:	4604      	mov	r4, r0
 80a17d2:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a17d4:	6800      	ldr	r0, [r0, #0]
 80a17d6:	3101      	adds	r1, #1
 80a17d8:	f7ff fab8 	bl	80a0d4c <realloc>
	if (newbuffer) {
 80a17dc:	b110      	cbz	r0, 80a17e4 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a17de:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a17e2:	2001      	movs	r0, #1
	}
	return 0;
}
 80a17e4:	bd38      	pop	{r3, r4, r5, pc}

080a17e6 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a17e6:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a17e8:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a17ea:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a17ec:	b113      	cbz	r3, 80a17f4 <_ZN6String7reserveEj+0xe>
 80a17ee:	6843      	ldr	r3, [r0, #4]
 80a17f0:	428b      	cmp	r3, r1
 80a17f2:	d207      	bcs.n	80a1804 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a17f4:	4620      	mov	r0, r4
 80a17f6:	f7ff ffea 	bl	80a17ce <_ZN6String12changeBufferEj>
 80a17fa:	b120      	cbz	r0, 80a1806 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a17fc:	68a3      	ldr	r3, [r4, #8]
 80a17fe:	b90b      	cbnz	r3, 80a1804 <_ZN6String7reserveEj+0x1e>
 80a1800:	6822      	ldr	r2, [r4, #0]
 80a1802:	7013      	strb	r3, [r2, #0]
 80a1804:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a1806:	bd10      	pop	{r4, pc}

080a1808 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1808:	b570      	push	{r4, r5, r6, lr}
 80a180a:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a180c:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a180e:	4604      	mov	r4, r0
 80a1810:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a1812:	f7ff ffe8 	bl	80a17e6 <_ZN6String7reserveEj>
 80a1816:	b918      	cbnz	r0, 80a1820 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a1818:	4620      	mov	r0, r4
 80a181a:	f7ff ffcd 	bl	80a17b8 <_ZN6String10invalidateEv>
		return *this;
 80a181e:	e009      	b.n	80a1834 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a1820:	462a      	mov	r2, r5
 80a1822:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a1824:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a1826:	6820      	ldr	r0, [r4, #0]
 80a1828:	f001 fbc4 	bl	80a2fb4 <memcpy>
	buffer[len] = 0;
 80a182c:	6822      	ldr	r2, [r4, #0]
 80a182e:	68a3      	ldr	r3, [r4, #8]
 80a1830:	2100      	movs	r1, #0
 80a1832:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a1834:	4620      	mov	r0, r4
 80a1836:	bd70      	pop	{r4, r5, r6, pc}

080a1838 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1838:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a183a:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a183c:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a183e:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a1840:	6043      	str	r3, [r0, #4]
	len = 0;
 80a1842:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1844:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a1846:	460d      	mov	r5, r1
 80a1848:	b139      	cbz	r1, 80a185a <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a184a:	4608      	mov	r0, r1
 80a184c:	f001 fc1b 	bl	80a3086 <strlen>
 80a1850:	4629      	mov	r1, r5
 80a1852:	4602      	mov	r2, r0
 80a1854:	4620      	mov	r0, r4
 80a1856:	f7ff ffd7 	bl	80a1808 <_ZN6String4copyEPKcj>
}
 80a185a:	4620      	mov	r0, r4
 80a185c:	bd38      	pop	{r3, r4, r5, pc}

080a185e <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a185e:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a1860:	b510      	push	{r4, lr}
 80a1862:	460b      	mov	r3, r1
 80a1864:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a1866:	d007      	beq.n	80a1878 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a1868:	6809      	ldr	r1, [r1, #0]
 80a186a:	b119      	cbz	r1, 80a1874 <_ZN6StringaSERKS_+0x16>
 80a186c:	689a      	ldr	r2, [r3, #8]
 80a186e:	f7ff ffcb 	bl	80a1808 <_ZN6String4copyEPKcj>
 80a1872:	e001      	b.n	80a1878 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a1874:	f7ff ffa0 	bl	80a17b8 <_ZN6String10invalidateEv>

	return *this;
}
 80a1878:	4620      	mov	r0, r4
 80a187a:	bd10      	pop	{r4, pc}

080a187c <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80a187c:	b510      	push	{r4, lr}
 80a187e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1880:	2300      	movs	r3, #0
 80a1882:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a1884:	6043      	str	r3, [r0, #4]
	len = 0;
 80a1886:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1888:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a188a:	f7ff ffe8 	bl	80a185e <_ZN6StringaSERKS_>
}
 80a188e:	4620      	mov	r0, r4
 80a1890:	bd10      	pop	{r4, pc}

080a1892 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a1892:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a1894:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a1896:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a1898:	b912      	cbnz	r2, 80a18a0 <_ZNK6String6equalsEPKc+0xe>
 80a189a:	b919      	cbnz	r1, 80a18a4 <_ZNK6String6equalsEPKc+0x12>
 80a189c:	2001      	movs	r0, #1
 80a189e:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a18a0:	b911      	cbnz	r1, 80a18a8 <_ZNK6String6equalsEPKc+0x16>
 80a18a2:	6803      	ldr	r3, [r0, #0]
 80a18a4:	7818      	ldrb	r0, [r3, #0]
 80a18a6:	e002      	b.n	80a18ae <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 80a18a8:	6800      	ldr	r0, [r0, #0]
 80a18aa:	f001 fbbf 	bl	80a302c <strcmp>
 80a18ae:	fab0 f080 	clz	r0, r0
 80a18b2:	0940      	lsrs	r0, r0, #5
}
 80a18b4:	bd08      	pop	{r3, pc}

080a18b6 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
 80a18b6:	b570      	push	{r4, r5, r6, lr}
 80a18b8:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
 80a18ba:	b19a      	cbz	r2, 80a18e4 <_ZNK6String8getBytesEPhjj+0x2e>
 80a18bc:	b191      	cbz	r1, 80a18e4 <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
 80a18be:	6885      	ldr	r5, [r0, #8]
 80a18c0:	429d      	cmp	r5, r3
 80a18c2:	d802      	bhi.n	80a18ca <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
 80a18c4:	2300      	movs	r3, #0
 80a18c6:	700b      	strb	r3, [r1, #0]
		return;
 80a18c8:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
 80a18ca:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
 80a18cc:	1aed      	subs	r5, r5, r3
 80a18ce:	42ac      	cmp	r4, r5
 80a18d0:	bf28      	it	cs
 80a18d2:	462c      	movcs	r4, r5
	strncpy((char *)buf, buffer + index, n);
 80a18d4:	6801      	ldr	r1, [r0, #0]
 80a18d6:	4622      	mov	r2, r4
 80a18d8:	4419      	add	r1, r3
 80a18da:	4630      	mov	r0, r6
 80a18dc:	f001 fbf0 	bl	80a30c0 <strncpy>
	buf[n] = 0;
 80a18e0:	2300      	movs	r3, #0
 80a18e2:	5533      	strb	r3, [r6, r4]
 80a18e4:	bd70      	pop	{r4, r5, r6, pc}

080a18e6 <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
 80a18e6:	4601      	mov	r1, r0
 80a18e8:	2200      	movs	r2, #0
 80a18ea:	208c      	movs	r0, #140	; 0x8c
 80a18ec:	f7ff b820 	b.w	80a0930 <HAL_Core_System_Reset_Ex>

080a18f0 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
 80a18f0:	2000      	movs	r0, #0
 80a18f2:	f7ff bff8 	b.w	80a18e6 <_ZN11SystemClass5resetEm>
	...

080a18f8 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a18f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a18fc:	4b03      	ldr	r3, [pc, #12]	; (80a190c <_GLOBAL__sub_I_System+0x14>)
 80a18fe:	2000      	movs	r0, #0
 80a1900:	7018      	strb	r0, [r3, #0]
 80a1902:	8058      	strh	r0, [r3, #2]
 80a1904:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1906:	f7ff b92d 	b.w	80a0b64 <set_system_mode>
 80a190a:	bf00      	nop
 80a190c:	2000028c 	.word	0x2000028c

080a1910 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80a1910:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
 80a1912:	4b14      	ldr	r3, [pc, #80]	; (80a1964 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80a1914:	4f14      	ldr	r7, [pc, #80]	; (80a1968 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 80a1916:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
 80a1918:	4b14      	ldr	r3, [pc, #80]	; (80a196c <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 80a191a:	4406      	add	r6, r0
    unix_time += dst_current_cache;
 80a191c:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
 80a191e:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
 80a1920:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
 80a1922:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80a1924:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80a1926:	d01b      	beq.n	80a1960 <_ZL22Refresh_UnixTime_Cachel+0x50>
 80a1928:	a80a      	add	r0, sp, #40	; 0x28
 80a192a:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
 80a192e:	f001 fa49 	bl	80a2dc4 <localtime>
	calendar_time->tm_year += 1900;
	return *calendar_time;
 80a1932:	4604      	mov	r4, r0
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 80a1934:	6943      	ldr	r3, [r0, #20]
	return *calendar_time;
 80a1936:	ad01      	add	r5, sp, #4
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 80a1938:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80a193c:	6143      	str	r3, [r0, #20]
	return *calendar_time;
 80a193e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a1940:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a1942:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a1944:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a1946:	f8d4 e000 	ldr.w	lr, [r4]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a194a:	4c09      	ldr	r4, [pc, #36]	; (80a1970 <_ZL22Refresh_UnixTime_Cachel+0x60>)
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
 80a194c:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a1950:	ad01      	add	r5, sp, #4
 80a1952:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a1954:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a1956:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a1958:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 80a195a:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a195c:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
 80a1960:	b00b      	add	sp, #44	; 0x2c
 80a1962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1964:	200002c4 	.word	0x200002c4
 80a1968:	200002c0 	.word	0x200002c0
 80a196c:	200002bc 	.word	0x200002bc
 80a1970:	20000294 	.word	0x20000294

080a1974 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 80a1974:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80a1976:	2000      	movs	r0, #0
 80a1978:	f7ff f978 	bl	80a0c6c <spark_sync_time_pending>
 80a197c:	b128      	cbz	r0, 80a198a <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a197e:	f7ff f94d 	bl	80a0c1c <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80a1982:	f080 0001 	eor.w	r0, r0, #1
 80a1986:	b2c0      	uxtb	r0, r0
 80a1988:	bd08      	pop	{r3, pc}
 80a198a:	2001      	movs	r0, #1
    }
 80a198c:	bd08      	pop	{r3, pc}

080a198e <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a198e:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 80a1990:	2000      	movs	r0, #0
 80a1992:	f7fe ffed 	bl	80a0970 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 80a1996:	4604      	mov	r4, r0
 80a1998:	b968      	cbnz	r0, 80a19b6 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a199a:	f7ff f8db 	bl	80a0b54 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a199e:	2801      	cmp	r0, #1
 80a19a0:	d10b      	bne.n	80a19ba <_ZN9TimeClass7isValidEv+0x2c>
 80a19a2:	4620      	mov	r0, r4
 80a19a4:	f7ff f906 	bl	80a0bb4 <system_thread_get_state>
 80a19a8:	b938      	cbnz	r0, 80a19ba <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 80a19aa:	f7ff ffe3 	bl	80a1974 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a19ae:	b930      	cbnz	r0, 80a19be <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 80a19b0:	f7ff f924 	bl	80a0bfc <spark_process>
 80a19b4:	e7f9      	b.n	80a19aa <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 80a19b6:	2001      	movs	r0, #1
 80a19b8:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 80a19ba:	2000      	movs	r0, #0
 80a19bc:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 80a19be:	f7ff ffd9 	bl	80a1974 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 80a19c2:	2000      	movs	r0, #0
 80a19c4:	f7fe ffd4 	bl	80a0970 <HAL_RTC_Time_Is_Valid>
 80a19c8:	3000      	adds	r0, #0
 80a19ca:	bf18      	it	ne
 80a19cc:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 80a19ce:	bd10      	pop	{r4, pc}

080a19d0 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 80a19d0:	b508      	push	{r3, lr}
    (void)isValid();
 80a19d2:	f7ff ffdc 	bl	80a198e <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 80a19d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 80a19da:	f7fe bfc1 	b.w	80a0960 <HAL_RTC_Get_UnixTime>
	...

080a19e0 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
 80a19e0:	b508      	push	{r3, lr}
	return hour(now());
 80a19e2:	f7ff fff5 	bl	80a19d0 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80a19e6:	f7ff ff93 	bl	80a1910 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
 80a19ea:	4b01      	ldr	r3, [pc, #4]	; (80a19f0 <_ZN9TimeClass4hourEv+0x10>)
 80a19ec:	6898      	ldr	r0, [r3, #8]
 80a19ee:	bd08      	pop	{r3, pc}
 80a19f0:	20000294 	.word	0x20000294

080a19f4 <_ZN9TimeClass6secondEv>:
	return calendar_time_cache.tm_min;
}

/* current seconds */
int TimeClass::second()
{
 80a19f4:	b508      	push	{r3, lr}
	return second(now());
 80a19f6:	f7ff ffeb 	bl	80a19d0 <_ZN9TimeClass3nowEv>
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80a19fa:	f7ff ff89 	bl	80a1910 <_ZL22Refresh_UnixTime_Cachel>

/* current seconds */
int TimeClass::second()
{
	return second(now());
}
 80a19fe:	4b01      	ldr	r3, [pc, #4]	; (80a1a04 <_ZN9TimeClass6secondEv+0x10>)
 80a1a00:	6818      	ldr	r0, [r3, #0]
 80a1a02:	bd08      	pop	{r3, pc}
 80a1a04:	20000294 	.word	0x20000294

080a1a08 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1a08:	4b02      	ldr	r3, [pc, #8]	; (80a1a14 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1a0a:	681a      	ldr	r2, [r3, #0]
 80a1a0c:	4b02      	ldr	r3, [pc, #8]	; (80a1a18 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1a0e:	601a      	str	r2, [r3, #0]
 80a1a10:	4770      	bx	lr
 80a1a12:	bf00      	nop
 80a1a14:	200000d4 	.word	0x200000d4
 80a1a18:	200002b8 	.word	0x200002b8

080a1a1c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a1a1c:	4770      	bx	lr

080a1a1e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1a1e:	7441      	strb	r1, [r0, #17]
 80a1a20:	4770      	bx	lr

080a1a22 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a1a22:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a1a24:	7c00      	ldrb	r0, [r0, #16]
 80a1a26:	f7ff f84d 	bl	80a0ac4 <HAL_USART_Available_Data_For_Write>
}
 80a1a2a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1a2e:	bd08      	pop	{r3, pc}

080a1a30 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a1a30:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a1a32:	7c00      	ldrb	r0, [r0, #16]
 80a1a34:	f7ff f81e 	bl	80a0a74 <HAL_USART_Available_Data>
}
 80a1a38:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1a3c:	bd08      	pop	{r3, pc}

080a1a3e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a1a3e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a1a40:	7c00      	ldrb	r0, [r0, #16]
 80a1a42:	f7ff f827 	bl	80a0a94 <HAL_USART_Peek_Data>
}
 80a1a46:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1a4a:	bf28      	it	cs
 80a1a4c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1a50:	bd08      	pop	{r3, pc}

080a1a52 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a1a52:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a1a54:	7c00      	ldrb	r0, [r0, #16]
 80a1a56:	f7ff f815 	bl	80a0a84 <HAL_USART_Read_Data>
}
 80a1a5a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1a5e:	bf28      	it	cs
 80a1a60:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1a64:	bd08      	pop	{r3, pc}

080a1a66 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a1a66:	7c00      	ldrb	r0, [r0, #16]
 80a1a68:	f7ff b81c 	b.w	80a0aa4 <HAL_USART_Flush_Data>

080a1a6c <_ZN11USARTSerialD0Ev>:
 80a1a6c:	b510      	push	{r4, lr}
 80a1a6e:	4604      	mov	r4, r0
 80a1a70:	2114      	movs	r1, #20
 80a1a72:	f000 fabe 	bl	80a1ff2 <_ZdlPvj>
 80a1a76:	4620      	mov	r0, r4
 80a1a78:	bd10      	pop	{r4, pc}

080a1a7a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1a7a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1a7c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a1a7e:	4604      	mov	r4, r0
 80a1a80:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1a82:	b925      	cbnz	r5, 80a1a8e <_ZN11USARTSerial5writeEh+0x14>
 80a1a84:	7c00      	ldrb	r0, [r0, #16]
 80a1a86:	f7ff f81d 	bl	80a0ac4 <HAL_USART_Available_Data_For_Write>
 80a1a8a:	2800      	cmp	r0, #0
 80a1a8c:	dd05      	ble.n	80a1a9a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1a8e:	4631      	mov	r1, r6
 80a1a90:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a1a92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1a96:	f7fe bfe5 	b.w	80a0a64 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a1a9a:	4628      	mov	r0, r5
 80a1a9c:	bd70      	pop	{r4, r5, r6, pc}
	...

080a1aa0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1aa0:	b510      	push	{r4, lr}
 80a1aa2:	4604      	mov	r4, r0
 80a1aa4:	4608      	mov	r0, r1
 80a1aa6:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1aa8:	2200      	movs	r2, #0
 80a1aaa:	6062      	str	r2, [r4, #4]
 80a1aac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1ab0:	60a2      	str	r2, [r4, #8]
 80a1ab2:	4a05      	ldr	r2, [pc, #20]	; (80a1ac8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a1ab4:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1ab6:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a1ab8:	2201      	movs	r2, #1
 80a1aba:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a1abc:	461a      	mov	r2, r3
 80a1abe:	f7fe ffc9 	bl	80a0a54 <HAL_USART_Init>
}
 80a1ac2:	4620      	mov	r0, r4
 80a1ac4:	bd10      	pop	{r4, pc}
 80a1ac6:	bf00      	nop
 80a1ac8:	080a3ca8 	.word	0x080a3ca8

080a1acc <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a1acc:	7c00      	ldrb	r0, [r0, #16]
 80a1ace:	f7fe bff1 	b.w	80a0ab4 <HAL_USART_Is_Enabled>
	...

080a1ad4 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a1ad4:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a1ad6:	4d0c      	ldr	r5, [pc, #48]	; (80a1b08 <_Z22__fetch_global_Serial1v+0x34>)
 80a1ad8:	6829      	ldr	r1, [r5, #0]
 80a1ada:	f011 0401 	ands.w	r4, r1, #1
 80a1ade:	d111      	bne.n	80a1b04 <_Z22__fetch_global_Serial1v+0x30>
 80a1ae0:	4628      	mov	r0, r5
 80a1ae2:	f7fe fae0 	bl	80a00a6 <__cxa_guard_acquire>
 80a1ae6:	b168      	cbz	r0, 80a1b04 <_Z22__fetch_global_Serial1v+0x30>
 80a1ae8:	4a08      	ldr	r2, [pc, #32]	; (80a1b0c <_Z22__fetch_global_Serial1v+0x38>)
 80a1aea:	4621      	mov	r1, r4
 80a1aec:	4b08      	ldr	r3, [pc, #32]	; (80a1b10 <_Z22__fetch_global_Serial1v+0x3c>)
 80a1aee:	4809      	ldr	r0, [pc, #36]	; (80a1b14 <_Z22__fetch_global_Serial1v+0x40>)
 80a1af0:	f7ff ffd6 	bl	80a1aa0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a1af4:	4628      	mov	r0, r5
 80a1af6:	f7fe fadb 	bl	80a00b0 <__cxa_guard_release>
 80a1afa:	4a07      	ldr	r2, [pc, #28]	; (80a1b18 <_Z22__fetch_global_Serial1v+0x44>)
 80a1afc:	4907      	ldr	r1, [pc, #28]	; (80a1b1c <_Z22__fetch_global_Serial1v+0x48>)
 80a1afe:	4805      	ldr	r0, [pc, #20]	; (80a1b14 <_Z22__fetch_global_Serial1v+0x40>)
 80a1b00:	f000 fa72 	bl	80a1fe8 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a1b04:	4803      	ldr	r0, [pc, #12]	; (80a1b14 <_Z22__fetch_global_Serial1v+0x40>)
 80a1b06:	bd38      	pop	{r3, r4, r5, pc}
 80a1b08:	20000360 	.word	0x20000360
 80a1b0c:	20000364 	.word	0x20000364
 80a1b10:	200002dc 	.word	0x200002dc
 80a1b14:	200002c8 	.word	0x200002c8
 80a1b18:	20000190 	.word	0x20000190
 80a1b1c:	080a1a1d 	.word	0x080a1a1d

080a1b20 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1b20:	7441      	strb	r1, [r0, #17]
 80a1b22:	4770      	bx	lr

080a1b24 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a1b24:	4770      	bx	lr

080a1b26 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a1b26:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a1b28:	2100      	movs	r1, #0
 80a1b2a:	7c00      	ldrb	r0, [r0, #16]
 80a1b2c:	f7fe fff2 	bl	80a0b14 <HAL_USB_USART_Receive_Data>
}
 80a1b30:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1b34:	bf28      	it	cs
 80a1b36:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1b3a:	bd08      	pop	{r3, pc}

080a1b3c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a1b3c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a1b3e:	2101      	movs	r1, #1
 80a1b40:	7c00      	ldrb	r0, [r0, #16]
 80a1b42:	f7fe ffe7 	bl	80a0b14 <HAL_USB_USART_Receive_Data>
}
 80a1b46:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1b4a:	bf28      	it	cs
 80a1b4c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1b50:	bd08      	pop	{r3, pc}

080a1b52 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a1b52:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a1b54:	7c00      	ldrb	r0, [r0, #16]
 80a1b56:	f7fe ffd5 	bl	80a0b04 <HAL_USB_USART_Available_Data_For_Write>
}
 80a1b5a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1b5e:	bd08      	pop	{r3, pc}

080a1b60 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a1b60:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a1b62:	7c00      	ldrb	r0, [r0, #16]
 80a1b64:	f7fe ffc6 	bl	80a0af4 <HAL_USB_USART_Available_Data>
}
 80a1b68:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1b6c:	bd08      	pop	{r3, pc}

080a1b6e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a1b6e:	7c00      	ldrb	r0, [r0, #16]
 80a1b70:	f7fe bfe0 	b.w	80a0b34 <HAL_USB_USART_Flush_Data>

080a1b74 <_ZN9USBSerialD0Ev>:
 80a1b74:	b510      	push	{r4, lr}
 80a1b76:	4604      	mov	r4, r0
 80a1b78:	2114      	movs	r1, #20
 80a1b7a:	f000 fa3a 	bl	80a1ff2 <_ZdlPvj>
 80a1b7e:	4620      	mov	r0, r4
 80a1b80:	bd10      	pop	{r4, pc}

080a1b82 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a1b82:	b538      	push	{r3, r4, r5, lr}
 80a1b84:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1b86:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a1b88:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1b8a:	f7fe ffbb 	bl	80a0b04 <HAL_USB_USART_Available_Data_For_Write>
 80a1b8e:	2800      	cmp	r0, #0
 80a1b90:	dc01      	bgt.n	80a1b96 <_ZN9USBSerial5writeEh+0x14>
 80a1b92:	7c60      	ldrb	r0, [r4, #17]
 80a1b94:	b128      	cbz	r0, 80a1ba2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a1b96:	4629      	mov	r1, r5
 80a1b98:	7c20      	ldrb	r0, [r4, #16]
 80a1b9a:	f7fe ffc3 	bl	80a0b24 <HAL_USB_USART_Send_Data>
 80a1b9e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a1ba2:	bd38      	pop	{r3, r4, r5, pc}

080a1ba4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1ba4:	b510      	push	{r4, lr}
 80a1ba6:	4604      	mov	r4, r0
 80a1ba8:	2300      	movs	r3, #0
 80a1baa:	6063      	str	r3, [r4, #4]
 80a1bac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1bb0:	60a3      	str	r3, [r4, #8]
 80a1bb2:	4b05      	ldr	r3, [pc, #20]	; (80a1bc8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a1bb4:	4608      	mov	r0, r1
 80a1bb6:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a1bb8:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a1bba:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a1bbc:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a1bbe:	4611      	mov	r1, r2
 80a1bc0:	f7fe ff88 	bl	80a0ad4 <HAL_USB_USART_Init>
}
 80a1bc4:	4620      	mov	r0, r4
 80a1bc6:	bd10      	pop	{r4, pc}
 80a1bc8:	080a3cd8 	.word	0x080a3cd8

080a1bcc <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a1bcc:	2200      	movs	r2, #0
 80a1bce:	7c00      	ldrb	r0, [r0, #16]
 80a1bd0:	f7fe bf88 	b.w	80a0ae4 <HAL_USB_USART_Begin>

080a1bd4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a1bd4:	b510      	push	{r4, lr}
 80a1bd6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1bd8:	2214      	movs	r2, #20
 80a1bda:	2100      	movs	r1, #0
 80a1bdc:	f001 f9f5 	bl	80a2fca <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1be0:	4b05      	ldr	r3, [pc, #20]	; (80a1bf8 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1be2:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1be4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a1be6:	4b05      	ldr	r3, [pc, #20]	; (80a1bfc <_Z19acquireSerialBufferv+0x28>)
 80a1be8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1bea:	f240 1301 	movw	r3, #257	; 0x101
 80a1bee:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1bf0:	2381      	movs	r3, #129	; 0x81
 80a1bf2:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1bf4:	bd10      	pop	{r4, pc}
 80a1bf6:	bf00      	nop
 80a1bf8:	2000046d 	.word	0x2000046d
 80a1bfc:	200003ec 	.word	0x200003ec

080a1c00 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a1c00:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1c02:	4d0e      	ldr	r5, [pc, #56]	; (80a1c3c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a1c04:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a1c06:	a801      	add	r0, sp, #4
 80a1c08:	f7ff ffe4 	bl	80a1bd4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1c0c:	6829      	ldr	r1, [r5, #0]
 80a1c0e:	f011 0401 	ands.w	r4, r1, #1
 80a1c12:	d110      	bne.n	80a1c36 <_Z16_fetch_usbserialv+0x36>
 80a1c14:	4628      	mov	r0, r5
 80a1c16:	f7fe fa46 	bl	80a00a6 <__cxa_guard_acquire>
 80a1c1a:	b160      	cbz	r0, 80a1c36 <_Z16_fetch_usbserialv+0x36>
 80a1c1c:	aa01      	add	r2, sp, #4
 80a1c1e:	4621      	mov	r1, r4
 80a1c20:	4807      	ldr	r0, [pc, #28]	; (80a1c40 <_Z16_fetch_usbserialv+0x40>)
 80a1c22:	f7ff ffbf 	bl	80a1ba4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1c26:	4628      	mov	r0, r5
 80a1c28:	f7fe fa42 	bl	80a00b0 <__cxa_guard_release>
 80a1c2c:	4a05      	ldr	r2, [pc, #20]	; (80a1c44 <_Z16_fetch_usbserialv+0x44>)
 80a1c2e:	4906      	ldr	r1, [pc, #24]	; (80a1c48 <_Z16_fetch_usbserialv+0x48>)
 80a1c30:	4803      	ldr	r0, [pc, #12]	; (80a1c40 <_Z16_fetch_usbserialv+0x40>)
 80a1c32:	f000 f9d9 	bl	80a1fe8 <__aeabi_atexit>
	return _usbserial;
}
 80a1c36:	4802      	ldr	r0, [pc, #8]	; (80a1c40 <_Z16_fetch_usbserialv+0x40>)
 80a1c38:	b007      	add	sp, #28
 80a1c3a:	bd30      	pop	{r4, r5, pc}
 80a1c3c:	200003e8 	.word	0x200003e8
 80a1c40:	20000570 	.word	0x20000570
 80a1c44:	20000190 	.word	0x20000190
 80a1c48:	080a1b25 	.word	0x080a1b25

080a1c4c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a1c4c:	b510      	push	{r4, lr}
 80a1c4e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1c50:	2214      	movs	r2, #20
 80a1c52:	2100      	movs	r1, #0
 80a1c54:	f001 f9b9 	bl	80a2fca <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1c58:	4b05      	ldr	r3, [pc, #20]	; (80a1c70 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1c5a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1c5c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a1c5e:	4b05      	ldr	r3, [pc, #20]	; (80a1c74 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a1c60:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1c62:	f240 1301 	movw	r3, #257	; 0x101
 80a1c66:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1c68:	2381      	movs	r3, #129	; 0x81
 80a1c6a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1c6c:	bd10      	pop	{r4, pc}
 80a1c6e:	bf00      	nop
 80a1c70:	20000620 	.word	0x20000620
 80a1c74:	20000588 	.word	0x20000588

080a1c78 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1c78:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1c7a:	4c0e      	ldr	r4, [pc, #56]	; (80a1cb4 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a1c7c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a1c7e:	a801      	add	r0, sp, #4
 80a1c80:	f7ff ffe4 	bl	80a1c4c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1c84:	6823      	ldr	r3, [r4, #0]
 80a1c86:	07db      	lsls	r3, r3, #31
 80a1c88:	d410      	bmi.n	80a1cac <_Z17_fetch_usbserial1v+0x34>
 80a1c8a:	4620      	mov	r0, r4
 80a1c8c:	f7fe fa0b 	bl	80a00a6 <__cxa_guard_acquire>
 80a1c90:	b160      	cbz	r0, 80a1cac <_Z17_fetch_usbserial1v+0x34>
 80a1c92:	aa01      	add	r2, sp, #4
 80a1c94:	2101      	movs	r1, #1
 80a1c96:	4808      	ldr	r0, [pc, #32]	; (80a1cb8 <_Z17_fetch_usbserial1v+0x40>)
 80a1c98:	f7ff ff84 	bl	80a1ba4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1c9c:	4620      	mov	r0, r4
 80a1c9e:	f7fe fa07 	bl	80a00b0 <__cxa_guard_release>
 80a1ca2:	4a06      	ldr	r2, [pc, #24]	; (80a1cbc <_Z17_fetch_usbserial1v+0x44>)
 80a1ca4:	4906      	ldr	r1, [pc, #24]	; (80a1cc0 <_Z17_fetch_usbserial1v+0x48>)
 80a1ca6:	4804      	ldr	r0, [pc, #16]	; (80a1cb8 <_Z17_fetch_usbserial1v+0x40>)
 80a1ca8:	f000 f99e 	bl	80a1fe8 <__aeabi_atexit>
  return _usbserial1;
}
 80a1cac:	4802      	ldr	r0, [pc, #8]	; (80a1cb8 <_Z17_fetch_usbserial1v+0x40>)
 80a1cae:	b006      	add	sp, #24
 80a1cb0:	bd10      	pop	{r4, pc}
 80a1cb2:	bf00      	nop
 80a1cb4:	20000584 	.word	0x20000584
 80a1cb8:	2000060c 	.word	0x2000060c
 80a1cbc:	20000190 	.word	0x20000190
 80a1cc0:	080a1b25 	.word	0x080a1b25

080a1cc4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a1cc4:	2200      	movs	r2, #0
 80a1cc6:	4611      	mov	r1, r2
 80a1cc8:	6840      	ldr	r0, [r0, #4]
 80a1cca:	f7fe bff7 	b.w	80a0cbc <network_ready>

080a1cce <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1cce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1cd0:	4616      	mov	r6, r2
 80a1cd2:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a1cd4:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1cd6:	460f      	mov	r7, r1
 80a1cd8:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a1cda:	2100      	movs	r1, #0
 80a1cdc:	a803      	add	r0, sp, #12
 80a1cde:	f001 f974 	bl	80a2fca <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1ce2:	4630      	mov	r0, r6
 80a1ce4:	f001 f9cf 	bl	80a3086 <strlen>
 80a1ce8:	2500      	movs	r5, #0
 80a1cea:	9500      	str	r5, [sp, #0]
 80a1cec:	b281      	uxth	r1, r0
 80a1cee:	687b      	ldr	r3, [r7, #4]
 80a1cf0:	aa03      	add	r2, sp, #12
 80a1cf2:	4630      	mov	r0, r6
 80a1cf4:	f7fe ff26 	bl	80a0b44 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1cf8:	b120      	cbz	r0, 80a1d04 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a1cfa:	4629      	mov	r1, r5
 80a1cfc:	4620      	mov	r0, r4
 80a1cfe:	f7ff fc15 	bl	80a152c <_ZN9IPAddressC1Em>
 80a1d02:	e003      	b.n	80a1d0c <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a1d04:	a903      	add	r1, sp, #12
 80a1d06:	4620      	mov	r0, r4
 80a1d08:	f7ff fbfe 	bl	80a1508 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a1d0c:	4620      	mov	r0, r4
 80a1d0e:	b009      	add	sp, #36	; 0x24
 80a1d10:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1d12 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a1d12:	2200      	movs	r2, #0
 80a1d14:	4611      	mov	r1, r2
 80a1d16:	6840      	ldr	r0, [r0, #4]
 80a1d18:	f7fe bff0 	b.w	80a0cfc <network_listening>

080a1d1c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a1d1c:	2200      	movs	r2, #0
 80a1d1e:	4611      	mov	r1, r2
 80a1d20:	6840      	ldr	r0, [r0, #4]
 80a1d22:	f7fe bffb 	b.w	80a0d1c <network_get_listen_timeout>

080a1d26 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a1d26:	2200      	movs	r2, #0
 80a1d28:	6840      	ldr	r0, [r0, #4]
 80a1d2a:	f7fe bfef 	b.w	80a0d0c <network_set_listen_timeout>

080a1d2e <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a1d2e:	2200      	movs	r2, #0
 80a1d30:	f081 0101 	eor.w	r1, r1, #1
 80a1d34:	6840      	ldr	r0, [r0, #4]
 80a1d36:	f7fe bfd9 	b.w	80a0cec <network_listen>

080a1d3a <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a1d3a:	2300      	movs	r3, #0
 80a1d3c:	461a      	mov	r2, r3
 80a1d3e:	4619      	mov	r1, r3
 80a1d40:	6840      	ldr	r0, [r0, #4]
 80a1d42:	f7fe bfcb 	b.w	80a0cdc <network_off>

080a1d46 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a1d46:	2300      	movs	r3, #0
 80a1d48:	461a      	mov	r2, r3
 80a1d4a:	4619      	mov	r1, r3
 80a1d4c:	6840      	ldr	r0, [r0, #4]
 80a1d4e:	f7fe bfbd 	b.w	80a0ccc <network_on>

080a1d52 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a1d52:	2200      	movs	r2, #0
 80a1d54:	4611      	mov	r1, r2
 80a1d56:	6840      	ldr	r0, [r0, #4]
 80a1d58:	f7fe bfa0 	b.w	80a0c9c <network_connecting>

080a1d5c <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a1d5c:	2200      	movs	r2, #0
 80a1d5e:	2102      	movs	r1, #2
 80a1d60:	6840      	ldr	r0, [r0, #4]
 80a1d62:	f7fe bfa3 	b.w	80a0cac <network_disconnect>

080a1d66 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a1d66:	2300      	movs	r3, #0
 80a1d68:	461a      	mov	r2, r3
 80a1d6a:	6840      	ldr	r0, [r0, #4]
 80a1d6c:	f7fe bf8e 	b.w	80a0c8c <network_connect>

080a1d70 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a1d70:	4b02      	ldr	r3, [pc, #8]	; (80a1d7c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a1d72:	2204      	movs	r2, #4
 80a1d74:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a1d76:	4a02      	ldr	r2, [pc, #8]	; (80a1d80 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1d78:	601a      	str	r2, [r3, #0]
 80a1d7a:	4770      	bx	lr
 80a1d7c:	20000724 	.word	0x20000724
 80a1d80:	080a3d08 	.word	0x080a3d08

080a1d84 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a1d84:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a1d86:	4b14      	ldr	r3, [pc, #80]	; (80a1dd8 <serialEventRun+0x54>)
 80a1d88:	b133      	cbz	r3, 80a1d98 <serialEventRun+0x14>
 80a1d8a:	f7ff ff39 	bl	80a1c00 <_Z16_fetch_usbserialv>
 80a1d8e:	6803      	ldr	r3, [r0, #0]
 80a1d90:	691b      	ldr	r3, [r3, #16]
 80a1d92:	4798      	blx	r3
 80a1d94:	2800      	cmp	r0, #0
 80a1d96:	dc16      	bgt.n	80a1dc6 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a1d98:	4b10      	ldr	r3, [pc, #64]	; (80a1ddc <serialEventRun+0x58>)
 80a1d9a:	b133      	cbz	r3, 80a1daa <serialEventRun+0x26>
 80a1d9c:	f7ff fe9a 	bl	80a1ad4 <_Z22__fetch_global_Serial1v>
 80a1da0:	6803      	ldr	r3, [r0, #0]
 80a1da2:	691b      	ldr	r3, [r3, #16]
 80a1da4:	4798      	blx	r3
 80a1da6:	2800      	cmp	r0, #0
 80a1da8:	dc10      	bgt.n	80a1dcc <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a1daa:	4b0d      	ldr	r3, [pc, #52]	; (80a1de0 <serialEventRun+0x5c>)
 80a1dac:	b10b      	cbz	r3, 80a1db2 <serialEventRun+0x2e>
 80a1dae:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1db2:	4b0c      	ldr	r3, [pc, #48]	; (80a1de4 <serialEventRun+0x60>)
 80a1db4:	b17b      	cbz	r3, 80a1dd6 <serialEventRun+0x52>
 80a1db6:	f7ff ff5f 	bl	80a1c78 <_Z17_fetch_usbserial1v>
 80a1dba:	6803      	ldr	r3, [r0, #0]
 80a1dbc:	691b      	ldr	r3, [r3, #16]
 80a1dbe:	4798      	blx	r3
 80a1dc0:	2800      	cmp	r0, #0
 80a1dc2:	dc06      	bgt.n	80a1dd2 <serialEventRun+0x4e>
 80a1dc4:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a1dc6:	f3af 8000 	nop.w
 80a1dca:	e7e5      	b.n	80a1d98 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a1dcc:	f3af 8000 	nop.w
 80a1dd0:	e7eb      	b.n	80a1daa <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a1dd2:	f3af 8000 	nop.w
 80a1dd6:	bd08      	pop	{r3, pc}
	...

080a1de8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a1de8:	b508      	push	{r3, lr}
	serialEventRun();
 80a1dea:	f7ff ffcb 	bl	80a1d84 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1dee:	f7fe fdaf 	bl	80a0950 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1df2:	4b01      	ldr	r3, [pc, #4]	; (80a1df8 <_post_loop+0x10>)
 80a1df4:	6018      	str	r0, [r3, #0]
 80a1df6:	bd08      	pop	{r3, pc}
 80a1df8:	20000734 	.word	0x20000734

080a1dfc <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1dfc:	4802      	ldr	r0, [pc, #8]	; (80a1e08 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a1dfe:	4a03      	ldr	r2, [pc, #12]	; (80a1e0c <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1e00:	4903      	ldr	r1, [pc, #12]	; (80a1e10 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a1e02:	1a12      	subs	r2, r2, r0
 80a1e04:	f001 b8d6 	b.w	80a2fb4 <memcpy>
 80a1e08:	40024000 	.word	0x40024000
 80a1e0c:	40024004 	.word	0x40024004
 80a1e10:	080a3f80 	.word	0x080a3f80

080a1e14 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1e14:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1e16:	2300      	movs	r3, #0
 80a1e18:	9300      	str	r3, [sp, #0]
 80a1e1a:	461a      	mov	r2, r3
 80a1e1c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1e20:	f7fe feda 	bl	80a0bd8 <system_ctrl_set_result>
}
 80a1e24:	b003      	add	sp, #12
 80a1e26:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a1e2c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a1e2c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a1e2e:	8843      	ldrh	r3, [r0, #2]
 80a1e30:	2b0a      	cmp	r3, #10
 80a1e32:	d008      	beq.n	80a1e46 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1e34:	2b50      	cmp	r3, #80	; 0x50
 80a1e36:	d109      	bne.n	80a1e4c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a1e38:	4b09      	ldr	r3, [pc, #36]	; (80a1e60 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a1e3a:	681b      	ldr	r3, [r3, #0]
 80a1e3c:	b13b      	cbz	r3, 80a1e4e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a1e3e:	b003      	add	sp, #12
 80a1e40:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a1e44:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a1e46:	f7ff ffe5 	bl	80a1e14 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a1e4a:	e006      	b.n	80a1e5a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1e4c:	2300      	movs	r3, #0
 80a1e4e:	9300      	str	r3, [sp, #0]
 80a1e50:	461a      	mov	r2, r3
 80a1e52:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1e56:	f7fe febf 	bl	80a0bd8 <system_ctrl_set_result>
        break;
    }
}
 80a1e5a:	b003      	add	sp, #12
 80a1e5c:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1e60:	2000072c 	.word	0x2000072c

080a1e64 <module_user_init_hook>:

void module_user_init_hook()
{
 80a1e64:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1e66:	4c10      	ldr	r4, [pc, #64]	; (80a1ea8 <module_user_init_hook+0x44>)
 80a1e68:	4d10      	ldr	r5, [pc, #64]	; (80a1eac <module_user_init_hook+0x48>)
 80a1e6a:	6823      	ldr	r3, [r4, #0]
 80a1e6c:	42ab      	cmp	r3, r5
 80a1e6e:	4b10      	ldr	r3, [pc, #64]	; (80a1eb0 <module_user_init_hook+0x4c>)
 80a1e70:	bf0c      	ite	eq
 80a1e72:	2201      	moveq	r2, #1
 80a1e74:	2200      	movne	r2, #0
 80a1e76:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1e78:	d002      	beq.n	80a1e80 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a1e7a:	f7ff ffbf 	bl	80a1dfc <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a1e7e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1e80:	f7fe fd5e 	bl	80a0940 <HAL_RNG_GetRandomNumber>
 80a1e84:	4604      	mov	r4, r0
    srand(seed);
 80a1e86:	f001 f8a9 	bl	80a2fdc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a1e8a:	4b0a      	ldr	r3, [pc, #40]	; (80a1eb4 <module_user_init_hook+0x50>)
 80a1e8c:	b113      	cbz	r3, 80a1e94 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a1e8e:	4620      	mov	r0, r4
 80a1e90:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a1e94:	2100      	movs	r1, #0
 80a1e96:	4807      	ldr	r0, [pc, #28]	; (80a1eb4 <module_user_init_hook+0x50>)
 80a1e98:	f7fe fef0 	bl	80a0c7c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a1e9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a1ea0:	2100      	movs	r1, #0
 80a1ea2:	4805      	ldr	r0, [pc, #20]	; (80a1eb8 <module_user_init_hook+0x54>)
 80a1ea4:	f7fe be8e 	b.w	80a0bc4 <system_ctrl_set_app_request_handler>
 80a1ea8:	40024000 	.word	0x40024000
 80a1eac:	9a271c1e 	.word	0x9a271c1e
 80a1eb0:	20000730 	.word	0x20000730
 80a1eb4:	00000000 	.word	0x00000000
 80a1eb8:	080a1e2d 	.word	0x080a1e2d

080a1ebc <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a1ebc:	b510      	push	{r4, lr}
 80a1ebe:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a1ec0:	480f      	ldr	r0, [pc, #60]	; (80a1f00 <pinAvailable+0x44>)
 80a1ec2:	f7ff fc5f 	bl	80a1784 <_ZN8SPIClass9isEnabledEv>
 80a1ec6:	b128      	cbz	r0, 80a1ed4 <pinAvailable+0x18>
 80a1ec8:	f1a4 030d 	sub.w	r3, r4, #13
 80a1ecc:	2b02      	cmp	r3, #2
 80a1ece:	d801      	bhi.n	80a1ed4 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a1ed0:	2000      	movs	r0, #0
 80a1ed2:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a1ed4:	f000 f82e 	bl	80a1f34 <_Z19__fetch_global_Wirev>
 80a1ed8:	f7ff fae2 	bl	80a14a0 <_ZN7TwoWire9isEnabledEv>
 80a1edc:	b108      	cbz	r0, 80a1ee2 <pinAvailable+0x26>
 80a1ede:	2c01      	cmp	r4, #1
 80a1ee0:	d9f6      	bls.n	80a1ed0 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a1ee2:	f7ff fdf7 	bl	80a1ad4 <_Z22__fetch_global_Serial1v>
 80a1ee6:	f7ff fdf1 	bl	80a1acc <_ZN11USARTSerial9isEnabledEv>
 80a1eea:	b118      	cbz	r0, 80a1ef4 <pinAvailable+0x38>
 80a1eec:	f1a4 0312 	sub.w	r3, r4, #18
 80a1ef0:	2b01      	cmp	r3, #1
 80a1ef2:	d9ed      	bls.n	80a1ed0 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a1ef4:	2c17      	cmp	r4, #23
 80a1ef6:	bf8c      	ite	hi
 80a1ef8:	2000      	movhi	r0, #0
 80a1efa:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a1efc:	bd10      	pop	{r4, pc}
 80a1efe:	bf00      	nop
 80a1f00:	20000768 	.word	0x20000768

080a1f04 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a1f04:	b510      	push	{r4, lr}
 80a1f06:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80a1f08:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a1f0a:	bf9c      	itt	ls
 80a1f0c:	340a      	addls	r4, #10
 80a1f0e:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a1f10:	4620      	mov	r0, r4
 80a1f12:	f7ff ffd3 	bl	80a1ebc <pinAvailable>
 80a1f16:	b150      	cbz	r0, 80a1f2e <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a1f18:	2103      	movs	r1, #3
 80a1f1a:	4620      	mov	r0, r4
 80a1f1c:	f7fe fd40 	bl	80a09a0 <HAL_Validate_Pin_Function>
 80a1f20:	2803      	cmp	r0, #3
 80a1f22:	d104      	bne.n	80a1f2e <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a1f24:	4620      	mov	r0, r4
}
 80a1f26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a1f2a:	f7fe bd41 	b.w	80a09b0 <HAL_ADC_Read>
}
 80a1f2e:	2000      	movs	r0, #0
 80a1f30:	bd10      	pop	{r4, pc}
	...

080a1f34 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a1f34:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a1f36:	4d0b      	ldr	r5, [pc, #44]	; (80a1f64 <_Z19__fetch_global_Wirev+0x30>)
 80a1f38:	6829      	ldr	r1, [r5, #0]
 80a1f3a:	f011 0401 	ands.w	r4, r1, #1
 80a1f3e:	d10f      	bne.n	80a1f60 <_Z19__fetch_global_Wirev+0x2c>
 80a1f40:	4628      	mov	r0, r5
 80a1f42:	f7fe f8b0 	bl	80a00a6 <__cxa_guard_acquire>
 80a1f46:	b158      	cbz	r0, 80a1f60 <_Z19__fetch_global_Wirev+0x2c>
 80a1f48:	4621      	mov	r1, r4
 80a1f4a:	4807      	ldr	r0, [pc, #28]	; (80a1f68 <_Z19__fetch_global_Wirev+0x34>)
 80a1f4c:	f7ff fa96 	bl	80a147c <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a1f50:	4628      	mov	r0, r5
 80a1f52:	f7fe f8ad 	bl	80a00b0 <__cxa_guard_release>
 80a1f56:	4a05      	ldr	r2, [pc, #20]	; (80a1f6c <_Z19__fetch_global_Wirev+0x38>)
 80a1f58:	4905      	ldr	r1, [pc, #20]	; (80a1f70 <_Z19__fetch_global_Wirev+0x3c>)
 80a1f5a:	4803      	ldr	r0, [pc, #12]	; (80a1f68 <_Z19__fetch_global_Wirev+0x34>)
 80a1f5c:	f000 f844 	bl	80a1fe8 <__aeabi_atexit>
	return wire;
}
 80a1f60:	4801      	ldr	r0, [pc, #4]	; (80a1f68 <_Z19__fetch_global_Wirev+0x34>)
 80a1f62:	bd38      	pop	{r3, r4, r5, pc}
 80a1f64:	20000738 	.word	0x20000738
 80a1f68:	2000073c 	.word	0x2000073c
 80a1f6c:	20000190 	.word	0x20000190
 80a1f70:	080a1425 	.word	0x080a1425

080a1f74 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a1f74:	b513      	push	{r0, r1, r4, lr}
 80a1f76:	4c08      	ldr	r4, [pc, #32]	; (80a1f98 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a1f78:	2300      	movs	r3, #0
 80a1f7a:	461a      	mov	r2, r3
 80a1f7c:	4619      	mov	r1, r3
 80a1f7e:	9300      	str	r3, [sp, #0]
 80a1f80:	4620      	mov	r0, r4
 80a1f82:	f7ff fae9 	bl	80a1558 <_ZN9IPAddressC1Ehhhh>
 80a1f86:	4620      	mov	r0, r4
 80a1f88:	4a04      	ldr	r2, [pc, #16]	; (80a1f9c <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a1f8a:	4905      	ldr	r1, [pc, #20]	; (80a1fa0 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a1f8c:	b002      	add	sp, #8
 80a1f8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1f92:	f000 b829 	b.w	80a1fe8 <__aeabi_atexit>
 80a1f96:	bf00      	nop
 80a1f98:	20000750 	.word	0x20000750
 80a1f9c:	20000190 	.word	0x20000190
 80a1fa0:	080a14a9 	.word	0x080a14a9

080a1fa4 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1fa4:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a1fa6:	4c0c      	ldr	r4, [pc, #48]	; (80a1fd8 <_GLOBAL__sub_I_SPI+0x34>)
 80a1fa8:	4e0c      	ldr	r6, [pc, #48]	; (80a1fdc <_GLOBAL__sub_I_SPI+0x38>)
 80a1faa:	4d0d      	ldr	r5, [pc, #52]	; (80a1fe0 <_GLOBAL__sub_I_SPI+0x3c>)
 80a1fac:	2100      	movs	r1, #0
 80a1fae:	4620      	mov	r0, r4
 80a1fb0:	f7ff fbd4 	bl	80a175c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1fb4:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1fb6:	4c0b      	ldr	r4, [pc, #44]	; (80a1fe4 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a1fb8:	4632      	mov	r2, r6
 80a1fba:	4629      	mov	r1, r5
 80a1fbc:	f000 f814 	bl	80a1fe8 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1fc0:	2101      	movs	r1, #1
 80a1fc2:	4620      	mov	r0, r4
 80a1fc4:	f7ff fbca 	bl	80a175c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1fc8:	4632      	mov	r2, r6
 80a1fca:	4629      	mov	r1, r5
 80a1fcc:	4620      	mov	r0, r4
 80a1fce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a1fd2:	f000 b809 	b.w	80a1fe8 <__aeabi_atexit>
 80a1fd6:	bf00      	nop
 80a1fd8:	20000768 	.word	0x20000768
 80a1fdc:	20000190 	.word	0x20000190
 80a1fe0:	080a174d 	.word	0x080a174d
 80a1fe4:	20000778 	.word	0x20000778

080a1fe8 <__aeabi_atexit>:
 80a1fe8:	460b      	mov	r3, r1
 80a1fea:	4601      	mov	r1, r0
 80a1fec:	4618      	mov	r0, r3
 80a1fee:	f000 bedb 	b.w	80a2da8 <__cxa_atexit>

080a1ff2 <_ZdlPvj>:
 80a1ff2:	f7fe b856 	b.w	80a00a2 <_ZdlPv>

080a1ff6 <_ZSt25__throw_bad_function_callv>:
 80a1ff6:	b508      	push	{r3, lr}
 80a1ff8:	f7fe fec0 	bl	80a0d7c <abort>

080a1ffc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a1ffc:	4b24      	ldr	r3, [pc, #144]	; (80a2090 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a1ffe:	681a      	ldr	r2, [r3, #0]
 80a2000:	07d0      	lsls	r0, r2, #31
 80a2002:	bf5c      	itt	pl
 80a2004:	2201      	movpl	r2, #1
 80a2006:	601a      	strpl	r2, [r3, #0]
 80a2008:	4b22      	ldr	r3, [pc, #136]	; (80a2094 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a200a:	681a      	ldr	r2, [r3, #0]
 80a200c:	07d1      	lsls	r1, r2, #31
 80a200e:	bf5c      	itt	pl
 80a2010:	2201      	movpl	r2, #1
 80a2012:	601a      	strpl	r2, [r3, #0]
 80a2014:	4b20      	ldr	r3, [pc, #128]	; (80a2098 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a2016:	681a      	ldr	r2, [r3, #0]
 80a2018:	07d2      	lsls	r2, r2, #31
 80a201a:	bf5c      	itt	pl
 80a201c:	2201      	movpl	r2, #1
 80a201e:	601a      	strpl	r2, [r3, #0]
 80a2020:	4b1e      	ldr	r3, [pc, #120]	; (80a209c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a2022:	681a      	ldr	r2, [r3, #0]
 80a2024:	07d0      	lsls	r0, r2, #31
 80a2026:	bf5c      	itt	pl
 80a2028:	2201      	movpl	r2, #1
 80a202a:	601a      	strpl	r2, [r3, #0]
 80a202c:	4b1c      	ldr	r3, [pc, #112]	; (80a20a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a202e:	681a      	ldr	r2, [r3, #0]
 80a2030:	07d1      	lsls	r1, r2, #31
 80a2032:	bf5c      	itt	pl
 80a2034:	2201      	movpl	r2, #1
 80a2036:	601a      	strpl	r2, [r3, #0]
 80a2038:	4b1a      	ldr	r3, [pc, #104]	; (80a20a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a203a:	681a      	ldr	r2, [r3, #0]
 80a203c:	07d2      	lsls	r2, r2, #31
 80a203e:	bf5c      	itt	pl
 80a2040:	2201      	movpl	r2, #1
 80a2042:	601a      	strpl	r2, [r3, #0]
 80a2044:	4b18      	ldr	r3, [pc, #96]	; (80a20a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a2046:	681a      	ldr	r2, [r3, #0]
 80a2048:	07d0      	lsls	r0, r2, #31
 80a204a:	bf5c      	itt	pl
 80a204c:	2201      	movpl	r2, #1
 80a204e:	601a      	strpl	r2, [r3, #0]
 80a2050:	4b16      	ldr	r3, [pc, #88]	; (80a20ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a2052:	681a      	ldr	r2, [r3, #0]
 80a2054:	07d1      	lsls	r1, r2, #31
 80a2056:	bf5c      	itt	pl
 80a2058:	2201      	movpl	r2, #1
 80a205a:	601a      	strpl	r2, [r3, #0]
 80a205c:	4b14      	ldr	r3, [pc, #80]	; (80a20b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a205e:	681a      	ldr	r2, [r3, #0]
 80a2060:	07d2      	lsls	r2, r2, #31
 80a2062:	bf5c      	itt	pl
 80a2064:	2201      	movpl	r2, #1
 80a2066:	601a      	strpl	r2, [r3, #0]
 80a2068:	4b12      	ldr	r3, [pc, #72]	; (80a20b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a206a:	681a      	ldr	r2, [r3, #0]
 80a206c:	07d0      	lsls	r0, r2, #31
 80a206e:	bf5c      	itt	pl
 80a2070:	2201      	movpl	r2, #1
 80a2072:	601a      	strpl	r2, [r3, #0]
 80a2074:	4b10      	ldr	r3, [pc, #64]	; (80a20b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a2076:	681a      	ldr	r2, [r3, #0]
 80a2078:	07d1      	lsls	r1, r2, #31
 80a207a:	bf5c      	itt	pl
 80a207c:	2201      	movpl	r2, #1
 80a207e:	601a      	strpl	r2, [r3, #0]
 80a2080:	4b0e      	ldr	r3, [pc, #56]	; (80a20bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a2082:	681a      	ldr	r2, [r3, #0]
 80a2084:	07d2      	lsls	r2, r2, #31
 80a2086:	bf5c      	itt	pl
 80a2088:	2201      	movpl	r2, #1
 80a208a:	601a      	strpl	r2, [r3, #0]
 80a208c:	4770      	bx	lr
 80a208e:	bf00      	nop
 80a2090:	200007b4 	.word	0x200007b4
 80a2094:	200007b0 	.word	0x200007b0
 80a2098:	200007ac 	.word	0x200007ac
 80a209c:	200007a8 	.word	0x200007a8
 80a20a0:	200007a4 	.word	0x200007a4
 80a20a4:	200007a0 	.word	0x200007a0
 80a20a8:	2000079c 	.word	0x2000079c
 80a20ac:	20000798 	.word	0x20000798
 80a20b0:	20000794 	.word	0x20000794
 80a20b4:	20000790 	.word	0x20000790
 80a20b8:	2000078c 	.word	0x2000078c
 80a20bc:	20000788 	.word	0x20000788

080a20c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a20c0:	4b18      	ldr	r3, [pc, #96]	; (80a2124 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a20c2:	681a      	ldr	r2, [r3, #0]
 80a20c4:	07d1      	lsls	r1, r2, #31
 80a20c6:	bf5c      	itt	pl
 80a20c8:	2201      	movpl	r2, #1
 80a20ca:	601a      	strpl	r2, [r3, #0]
 80a20cc:	4b16      	ldr	r3, [pc, #88]	; (80a2128 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a20ce:	681a      	ldr	r2, [r3, #0]
 80a20d0:	07d2      	lsls	r2, r2, #31
 80a20d2:	bf5c      	itt	pl
 80a20d4:	2201      	movpl	r2, #1
 80a20d6:	601a      	strpl	r2, [r3, #0]
 80a20d8:	4b14      	ldr	r3, [pc, #80]	; (80a212c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a20da:	681a      	ldr	r2, [r3, #0]
 80a20dc:	07d0      	lsls	r0, r2, #31
 80a20de:	bf5c      	itt	pl
 80a20e0:	2201      	movpl	r2, #1
 80a20e2:	601a      	strpl	r2, [r3, #0]
 80a20e4:	4b12      	ldr	r3, [pc, #72]	; (80a2130 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a20e6:	681a      	ldr	r2, [r3, #0]
 80a20e8:	07d1      	lsls	r1, r2, #31
 80a20ea:	bf5c      	itt	pl
 80a20ec:	2201      	movpl	r2, #1
 80a20ee:	601a      	strpl	r2, [r3, #0]
 80a20f0:	4b10      	ldr	r3, [pc, #64]	; (80a2134 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a20f2:	681a      	ldr	r2, [r3, #0]
 80a20f4:	07d2      	lsls	r2, r2, #31
 80a20f6:	bf5c      	itt	pl
 80a20f8:	2201      	movpl	r2, #1
 80a20fa:	601a      	strpl	r2, [r3, #0]
 80a20fc:	4b0e      	ldr	r3, [pc, #56]	; (80a2138 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a20fe:	681a      	ldr	r2, [r3, #0]
 80a2100:	07d0      	lsls	r0, r2, #31
 80a2102:	bf5c      	itt	pl
 80a2104:	2201      	movpl	r2, #1
 80a2106:	601a      	strpl	r2, [r3, #0]
 80a2108:	4b0c      	ldr	r3, [pc, #48]	; (80a213c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a210a:	681a      	ldr	r2, [r3, #0]
 80a210c:	07d1      	lsls	r1, r2, #31
 80a210e:	bf5c      	itt	pl
 80a2110:	2201      	movpl	r2, #1
 80a2112:	601a      	strpl	r2, [r3, #0]
 80a2114:	4b0a      	ldr	r3, [pc, #40]	; (80a2140 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2116:	681a      	ldr	r2, [r3, #0]
 80a2118:	07d2      	lsls	r2, r2, #31
 80a211a:	bf5c      	itt	pl
 80a211c:	2201      	movpl	r2, #1
 80a211e:	601a      	strpl	r2, [r3, #0]
 80a2120:	4770      	bx	lr
 80a2122:	bf00      	nop
 80a2124:	200007d4 	.word	0x200007d4
 80a2128:	200007d0 	.word	0x200007d0
 80a212c:	200007cc 	.word	0x200007cc
 80a2130:	200007c8 	.word	0x200007c8
 80a2134:	200007c4 	.word	0x200007c4
 80a2138:	200007c0 	.word	0x200007c0
 80a213c:	200007bc 	.word	0x200007bc
 80a2140:	200007b8 	.word	0x200007b8

080a2144 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2144:	4b18      	ldr	r3, [pc, #96]	; (80a21a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2146:	681a      	ldr	r2, [r3, #0]
 80a2148:	07d1      	lsls	r1, r2, #31
 80a214a:	bf5c      	itt	pl
 80a214c:	2201      	movpl	r2, #1
 80a214e:	601a      	strpl	r2, [r3, #0]
 80a2150:	4b16      	ldr	r3, [pc, #88]	; (80a21ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2152:	681a      	ldr	r2, [r3, #0]
 80a2154:	07d2      	lsls	r2, r2, #31
 80a2156:	bf5c      	itt	pl
 80a2158:	2201      	movpl	r2, #1
 80a215a:	601a      	strpl	r2, [r3, #0]
 80a215c:	4b14      	ldr	r3, [pc, #80]	; (80a21b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a215e:	681a      	ldr	r2, [r3, #0]
 80a2160:	07d0      	lsls	r0, r2, #31
 80a2162:	bf5c      	itt	pl
 80a2164:	2201      	movpl	r2, #1
 80a2166:	601a      	strpl	r2, [r3, #0]
 80a2168:	4b12      	ldr	r3, [pc, #72]	; (80a21b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a216a:	681a      	ldr	r2, [r3, #0]
 80a216c:	07d1      	lsls	r1, r2, #31
 80a216e:	bf5c      	itt	pl
 80a2170:	2201      	movpl	r2, #1
 80a2172:	601a      	strpl	r2, [r3, #0]
 80a2174:	4b10      	ldr	r3, [pc, #64]	; (80a21b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2176:	681a      	ldr	r2, [r3, #0]
 80a2178:	07d2      	lsls	r2, r2, #31
 80a217a:	bf5c      	itt	pl
 80a217c:	2201      	movpl	r2, #1
 80a217e:	601a      	strpl	r2, [r3, #0]
 80a2180:	4b0e      	ldr	r3, [pc, #56]	; (80a21bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2182:	681a      	ldr	r2, [r3, #0]
 80a2184:	07d0      	lsls	r0, r2, #31
 80a2186:	bf5c      	itt	pl
 80a2188:	2201      	movpl	r2, #1
 80a218a:	601a      	strpl	r2, [r3, #0]
 80a218c:	4b0c      	ldr	r3, [pc, #48]	; (80a21c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a218e:	681a      	ldr	r2, [r3, #0]
 80a2190:	07d1      	lsls	r1, r2, #31
 80a2192:	bf5c      	itt	pl
 80a2194:	2201      	movpl	r2, #1
 80a2196:	601a      	strpl	r2, [r3, #0]
 80a2198:	4b0a      	ldr	r3, [pc, #40]	; (80a21c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a219a:	681a      	ldr	r2, [r3, #0]
 80a219c:	07d2      	lsls	r2, r2, #31
 80a219e:	bf5c      	itt	pl
 80a21a0:	2201      	movpl	r2, #1
 80a21a2:	601a      	strpl	r2, [r3, #0]
 80a21a4:	4770      	bx	lr
 80a21a6:	bf00      	nop
 80a21a8:	200007f4 	.word	0x200007f4
 80a21ac:	200007f0 	.word	0x200007f0
 80a21b0:	200007ec 	.word	0x200007ec
 80a21b4:	200007e8 	.word	0x200007e8
 80a21b8:	200007e4 	.word	0x200007e4
 80a21bc:	200007e0 	.word	0x200007e0
 80a21c0:	200007dc 	.word	0x200007dc
 80a21c4:	200007d8 	.word	0x200007d8

080a21c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a21c8:	4b24      	ldr	r3, [pc, #144]	; (80a225c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a21ca:	681a      	ldr	r2, [r3, #0]
 80a21cc:	07d0      	lsls	r0, r2, #31
 80a21ce:	bf5c      	itt	pl
 80a21d0:	2201      	movpl	r2, #1
 80a21d2:	601a      	strpl	r2, [r3, #0]
 80a21d4:	4b22      	ldr	r3, [pc, #136]	; (80a2260 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a21d6:	681a      	ldr	r2, [r3, #0]
 80a21d8:	07d1      	lsls	r1, r2, #31
 80a21da:	bf5c      	itt	pl
 80a21dc:	2201      	movpl	r2, #1
 80a21de:	601a      	strpl	r2, [r3, #0]
 80a21e0:	4b20      	ldr	r3, [pc, #128]	; (80a2264 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a21e2:	681a      	ldr	r2, [r3, #0]
 80a21e4:	07d2      	lsls	r2, r2, #31
 80a21e6:	bf5c      	itt	pl
 80a21e8:	2201      	movpl	r2, #1
 80a21ea:	601a      	strpl	r2, [r3, #0]
 80a21ec:	4b1e      	ldr	r3, [pc, #120]	; (80a2268 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a21ee:	681a      	ldr	r2, [r3, #0]
 80a21f0:	07d0      	lsls	r0, r2, #31
 80a21f2:	bf5c      	itt	pl
 80a21f4:	2201      	movpl	r2, #1
 80a21f6:	601a      	strpl	r2, [r3, #0]
 80a21f8:	4b1c      	ldr	r3, [pc, #112]	; (80a226c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a21fa:	681a      	ldr	r2, [r3, #0]
 80a21fc:	07d1      	lsls	r1, r2, #31
 80a21fe:	bf5c      	itt	pl
 80a2200:	2201      	movpl	r2, #1
 80a2202:	601a      	strpl	r2, [r3, #0]
 80a2204:	4b1a      	ldr	r3, [pc, #104]	; (80a2270 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a2206:	681a      	ldr	r2, [r3, #0]
 80a2208:	07d2      	lsls	r2, r2, #31
 80a220a:	bf5c      	itt	pl
 80a220c:	2201      	movpl	r2, #1
 80a220e:	601a      	strpl	r2, [r3, #0]
 80a2210:	4b18      	ldr	r3, [pc, #96]	; (80a2274 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a2212:	681a      	ldr	r2, [r3, #0]
 80a2214:	07d0      	lsls	r0, r2, #31
 80a2216:	bf5c      	itt	pl
 80a2218:	2201      	movpl	r2, #1
 80a221a:	601a      	strpl	r2, [r3, #0]
 80a221c:	4b16      	ldr	r3, [pc, #88]	; (80a2278 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a221e:	681a      	ldr	r2, [r3, #0]
 80a2220:	07d1      	lsls	r1, r2, #31
 80a2222:	bf5c      	itt	pl
 80a2224:	2201      	movpl	r2, #1
 80a2226:	601a      	strpl	r2, [r3, #0]
 80a2228:	4b14      	ldr	r3, [pc, #80]	; (80a227c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a222a:	681a      	ldr	r2, [r3, #0]
 80a222c:	07d2      	lsls	r2, r2, #31
 80a222e:	bf5c      	itt	pl
 80a2230:	2201      	movpl	r2, #1
 80a2232:	601a      	strpl	r2, [r3, #0]
 80a2234:	4b12      	ldr	r3, [pc, #72]	; (80a2280 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a2236:	681a      	ldr	r2, [r3, #0]
 80a2238:	07d0      	lsls	r0, r2, #31
 80a223a:	bf5c      	itt	pl
 80a223c:	2201      	movpl	r2, #1
 80a223e:	601a      	strpl	r2, [r3, #0]
 80a2240:	4b10      	ldr	r3, [pc, #64]	; (80a2284 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a2242:	681a      	ldr	r2, [r3, #0]
 80a2244:	07d1      	lsls	r1, r2, #31
 80a2246:	bf5c      	itt	pl
 80a2248:	2201      	movpl	r2, #1
 80a224a:	601a      	strpl	r2, [r3, #0]
 80a224c:	4b0e      	ldr	r3, [pc, #56]	; (80a2288 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a224e:	681a      	ldr	r2, [r3, #0]
 80a2250:	07d2      	lsls	r2, r2, #31
 80a2252:	bf5c      	itt	pl
 80a2254:	2201      	movpl	r2, #1
 80a2256:	601a      	strpl	r2, [r3, #0]
 80a2258:	4770      	bx	lr
 80a225a:	bf00      	nop
 80a225c:	20000824 	.word	0x20000824
 80a2260:	20000820 	.word	0x20000820
 80a2264:	2000081c 	.word	0x2000081c
 80a2268:	20000818 	.word	0x20000818
 80a226c:	20000814 	.word	0x20000814
 80a2270:	20000810 	.word	0x20000810
 80a2274:	2000080c 	.word	0x2000080c
 80a2278:	20000808 	.word	0x20000808
 80a227c:	20000804 	.word	0x20000804
 80a2280:	20000800 	.word	0x20000800
 80a2284:	200007fc 	.word	0x200007fc
 80a2288:	200007f8 	.word	0x200007f8

080a228c <sqrt>:
 80a228c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2290:	b08b      	sub	sp, #44	; 0x2c
 80a2292:	4604      	mov	r4, r0
 80a2294:	460d      	mov	r5, r1
 80a2296:	f000 f855 	bl	80a2344 <__ieee754_sqrt>
 80a229a:	4b28      	ldr	r3, [pc, #160]	; (80a233c <sqrt+0xb0>)
 80a229c:	4606      	mov	r6, r0
 80a229e:	f993 a000 	ldrsb.w	sl, [r3]
 80a22a2:	460f      	mov	r7, r1
 80a22a4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80a22a8:	d012      	beq.n	80a22d0 <sqrt+0x44>
 80a22aa:	4622      	mov	r2, r4
 80a22ac:	462b      	mov	r3, r5
 80a22ae:	4620      	mov	r0, r4
 80a22b0:	4629      	mov	r1, r5
 80a22b2:	f000 fd5f 	bl	80a2d74 <__aeabi_dcmpun>
 80a22b6:	4683      	mov	fp, r0
 80a22b8:	b950      	cbnz	r0, 80a22d0 <sqrt+0x44>
 80a22ba:	f04f 0800 	mov.w	r8, #0
 80a22be:	f04f 0900 	mov.w	r9, #0
 80a22c2:	4620      	mov	r0, r4
 80a22c4:	4629      	mov	r1, r5
 80a22c6:	4642      	mov	r2, r8
 80a22c8:	464b      	mov	r3, r9
 80a22ca:	f000 fd2b 	bl	80a2d24 <__aeabi_dcmplt>
 80a22ce:	b920      	cbnz	r0, 80a22da <sqrt+0x4e>
 80a22d0:	4630      	mov	r0, r6
 80a22d2:	4639      	mov	r1, r7
 80a22d4:	b00b      	add	sp, #44	; 0x2c
 80a22d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a22da:	4a19      	ldr	r2, [pc, #100]	; (80a2340 <sqrt+0xb4>)
 80a22dc:	2301      	movs	r3, #1
 80a22de:	f8cd b020 	str.w	fp, [sp, #32]
 80a22e2:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80a22e6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80a22ea:	9201      	str	r2, [sp, #4]
 80a22ec:	9300      	str	r3, [sp, #0]
 80a22ee:	f1ba 0f00 	cmp.w	sl, #0
 80a22f2:	d015      	beq.n	80a2320 <sqrt+0x94>
 80a22f4:	4642      	mov	r2, r8
 80a22f6:	464b      	mov	r3, r9
 80a22f8:	4640      	mov	r0, r8
 80a22fa:	4649      	mov	r1, r9
 80a22fc:	f000 fbca 	bl	80a2a94 <__aeabi_ddiv>
 80a2300:	f1ba 0f02 	cmp.w	sl, #2
 80a2304:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a2308:	d10c      	bne.n	80a2324 <sqrt+0x98>
 80a230a:	f7fe fd47 	bl	80a0d9c <__errno>
 80a230e:	2321      	movs	r3, #33	; 0x21
 80a2310:	6003      	str	r3, [r0, #0]
 80a2312:	9b08      	ldr	r3, [sp, #32]
 80a2314:	b963      	cbnz	r3, 80a2330 <sqrt+0xa4>
 80a2316:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a231a:	b00b      	add	sp, #44	; 0x2c
 80a231c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2320:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80a2324:	4668      	mov	r0, sp
 80a2326:	f000 f8d1 	bl	80a24cc <matherr>
 80a232a:	2800      	cmp	r0, #0
 80a232c:	d1f1      	bne.n	80a2312 <sqrt+0x86>
 80a232e:	e7ec      	b.n	80a230a <sqrt+0x7e>
 80a2330:	f7fe fd34 	bl	80a0d9c <__errno>
 80a2334:	9b08      	ldr	r3, [sp, #32]
 80a2336:	6003      	str	r3, [r0, #0]
 80a2338:	e7ed      	b.n	80a2316 <sqrt+0x8a>
 80a233a:	bf00      	nop
 80a233c:	200000d8 	.word	0x200000d8
 80a2340:	080a3d34 	.word	0x080a3d34

080a2344 <__ieee754_sqrt>:
 80a2344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2348:	4e5f      	ldr	r6, [pc, #380]	; (80a24c8 <__ieee754_sqrt+0x184>)
 80a234a:	460c      	mov	r4, r1
 80a234c:	46b6      	mov	lr, r6
 80a234e:	400e      	ands	r6, r1
 80a2350:	4576      	cmp	r6, lr
 80a2352:	4605      	mov	r5, r0
 80a2354:	f000 8098 	beq.w	80a2488 <__ieee754_sqrt+0x144>
 80a2358:	2900      	cmp	r1, #0
 80a235a:	460b      	mov	r3, r1
 80a235c:	4602      	mov	r2, r0
 80a235e:	dd74      	ble.n	80a244a <__ieee754_sqrt+0x106>
 80a2360:	ea5f 5e21 	movs.w	lr, r1, asr #20
 80a2364:	d07f      	beq.n	80a2466 <__ieee754_sqrt+0x122>
 80a2366:	f2ae 3eff 	subw	lr, lr, #1023	; 0x3ff
 80a236a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a236e:	f01e 0f01 	tst.w	lr, #1
 80a2372:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a2376:	d163      	bne.n	80a2440 <__ieee754_sqrt+0xfc>
 80a2378:	2700      	movs	r7, #0
 80a237a:	463e      	mov	r6, r7
 80a237c:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
 80a2380:	440b      	add	r3, r1
 80a2382:	ea4f 0e6e 	mov.w	lr, lr, asr #1
 80a2386:	0052      	lsls	r2, r2, #1
 80a2388:	2016      	movs	r0, #22
 80a238a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80a238e:	1874      	adds	r4, r6, r1
 80a2390:	429c      	cmp	r4, r3
 80a2392:	ea4f 75d2 	mov.w	r5, r2, lsr #31
 80a2396:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80a239a:	dc02      	bgt.n	80a23a2 <__ieee754_sqrt+0x5e>
 80a239c:	1b1b      	subs	r3, r3, r4
 80a239e:	1866      	adds	r6, r4, r1
 80a23a0:	440f      	add	r7, r1
 80a23a2:	3801      	subs	r0, #1
 80a23a4:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80a23a8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80a23ac:	d1ef      	bne.n	80a238e <__ieee754_sqrt+0x4a>
 80a23ae:	4684      	mov	ip, r0
 80a23b0:	2420      	movs	r4, #32
 80a23b2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80a23b6:	e009      	b.n	80a23cc <__ieee754_sqrt+0x88>
 80a23b8:	d020      	beq.n	80a23fc <__ieee754_sqrt+0xb8>
 80a23ba:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
 80a23be:	3c01      	subs	r4, #1
 80a23c0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80a23c4:	442b      	add	r3, r5
 80a23c6:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80a23ca:	d020      	beq.n	80a240e <__ieee754_sqrt+0xca>
 80a23cc:	429e      	cmp	r6, r3
 80a23ce:	eb01 050c 	add.w	r5, r1, ip
 80a23d2:	daf1      	bge.n	80a23b8 <__ieee754_sqrt+0x74>
 80a23d4:	2d00      	cmp	r5, #0
 80a23d6:	eb05 0c01 	add.w	ip, r5, r1
 80a23da:	db09      	blt.n	80a23f0 <__ieee754_sqrt+0xac>
 80a23dc:	46b0      	mov	r8, r6
 80a23de:	4295      	cmp	r5, r2
 80a23e0:	eba3 0306 	sub.w	r3, r3, r6
 80a23e4:	d900      	bls.n	80a23e8 <__ieee754_sqrt+0xa4>
 80a23e6:	3b01      	subs	r3, #1
 80a23e8:	4646      	mov	r6, r8
 80a23ea:	1b52      	subs	r2, r2, r5
 80a23ec:	4408      	add	r0, r1
 80a23ee:	e7e4      	b.n	80a23ba <__ieee754_sqrt+0x76>
 80a23f0:	f1bc 0f00 	cmp.w	ip, #0
 80a23f4:	dbf2      	blt.n	80a23dc <__ieee754_sqrt+0x98>
 80a23f6:	f106 0801 	add.w	r8, r6, #1
 80a23fa:	e7f0      	b.n	80a23de <__ieee754_sqrt+0x9a>
 80a23fc:	4295      	cmp	r5, r2
 80a23fe:	d817      	bhi.n	80a2430 <__ieee754_sqrt+0xec>
 80a2400:	2d00      	cmp	r5, #0
 80a2402:	eb05 0c01 	add.w	ip, r5, r1
 80a2406:	db49      	blt.n	80a249c <__ieee754_sqrt+0x158>
 80a2408:	4698      	mov	r8, r3
 80a240a:	2300      	movs	r3, #0
 80a240c:	e7ec      	b.n	80a23e8 <__ieee754_sqrt+0xa4>
 80a240e:	4313      	orrs	r3, r2
 80a2410:	d110      	bne.n	80a2434 <__ieee754_sqrt+0xf0>
 80a2412:	0840      	lsrs	r0, r0, #1
 80a2414:	107b      	asrs	r3, r7, #1
 80a2416:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80a241a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80a241e:	07fa      	lsls	r2, r7, #31
 80a2420:	eb03 570e 	add.w	r7, r3, lr, lsl #20
 80a2424:	4639      	mov	r1, r7
 80a2426:	bf48      	it	mi
 80a2428:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
 80a242c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a2430:	4633      	mov	r3, r6
 80a2432:	e7c2      	b.n	80a23ba <__ieee754_sqrt+0x76>
 80a2434:	1c41      	adds	r1, r0, #1
 80a2436:	d035      	beq.n	80a24a4 <__ieee754_sqrt+0x160>
 80a2438:	f000 0301 	and.w	r3, r0, #1
 80a243c:	4418      	add	r0, r3
 80a243e:	e7e8      	b.n	80a2412 <__ieee754_sqrt+0xce>
 80a2440:	005b      	lsls	r3, r3, #1
 80a2442:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80a2446:	0052      	lsls	r2, r2, #1
 80a2448:	e796      	b.n	80a2378 <__ieee754_sqrt+0x34>
 80a244a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80a244e:	4306      	orrs	r6, r0
 80a2450:	d0ec      	beq.n	80a242c <__ieee754_sqrt+0xe8>
 80a2452:	bb79      	cbnz	r1, 80a24b4 <__ieee754_sqrt+0x170>
 80a2454:	468e      	mov	lr, r1
 80a2456:	0ad3      	lsrs	r3, r2, #11
 80a2458:	f1ae 0e15 	sub.w	lr, lr, #21
 80a245c:	0552      	lsls	r2, r2, #21
 80a245e:	2b00      	cmp	r3, #0
 80a2460:	d0f9      	beq.n	80a2456 <__ieee754_sqrt+0x112>
 80a2462:	02dd      	lsls	r5, r3, #11
 80a2464:	d421      	bmi.n	80a24aa <__ieee754_sqrt+0x166>
 80a2466:	2100      	movs	r1, #0
 80a2468:	e000      	b.n	80a246c <__ieee754_sqrt+0x128>
 80a246a:	4601      	mov	r1, r0
 80a246c:	005b      	lsls	r3, r3, #1
 80a246e:	02dc      	lsls	r4, r3, #11
 80a2470:	f101 0001 	add.w	r0, r1, #1
 80a2474:	d5f9      	bpl.n	80a246a <__ieee754_sqrt+0x126>
 80a2476:	f1c0 0420 	rsb	r4, r0, #32
 80a247a:	fa22 f404 	lsr.w	r4, r2, r4
 80a247e:	4323      	orrs	r3, r4
 80a2480:	ebc1 0e0e 	rsb	lr, r1, lr
 80a2484:	4082      	lsls	r2, r0
 80a2486:	e76e      	b.n	80a2366 <__ieee754_sqrt+0x22>
 80a2488:	4602      	mov	r2, r0
 80a248a:	460b      	mov	r3, r1
 80a248c:	f000 f9d8 	bl	80a2840 <__aeabi_dmul>
 80a2490:	462a      	mov	r2, r5
 80a2492:	4623      	mov	r3, r4
 80a2494:	f000 f822 	bl	80a24dc <__adddf3>
 80a2498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a249c:	f1bc 0f00 	cmp.w	ip, #0
 80a24a0:	daa9      	bge.n	80a23f6 <__ieee754_sqrt+0xb2>
 80a24a2:	e7b1      	b.n	80a2408 <__ieee754_sqrt+0xc4>
 80a24a4:	3701      	adds	r7, #1
 80a24a6:	4620      	mov	r0, r4
 80a24a8:	e7b4      	b.n	80a2414 <__ieee754_sqrt+0xd0>
 80a24aa:	2420      	movs	r4, #32
 80a24ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80a24b0:	2000      	movs	r0, #0
 80a24b2:	e7e2      	b.n	80a247a <__ieee754_sqrt+0x136>
 80a24b4:	4602      	mov	r2, r0
 80a24b6:	460b      	mov	r3, r1
 80a24b8:	f000 f80e 	bl	80a24d8 <__aeabi_dsub>
 80a24bc:	4602      	mov	r2, r0
 80a24be:	460b      	mov	r3, r1
 80a24c0:	f000 fae8 	bl	80a2a94 <__aeabi_ddiv>
 80a24c4:	e7b2      	b.n	80a242c <__ieee754_sqrt+0xe8>
 80a24c6:	bf00      	nop
 80a24c8:	7ff00000 	.word	0x7ff00000

080a24cc <matherr>:
 80a24cc:	2000      	movs	r0, #0
 80a24ce:	4770      	bx	lr

080a24d0 <__aeabi_drsub>:
 80a24d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a24d4:	e002      	b.n	80a24dc <__adddf3>
 80a24d6:	bf00      	nop

080a24d8 <__aeabi_dsub>:
 80a24d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a24dc <__adddf3>:
 80a24dc:	b530      	push	{r4, r5, lr}
 80a24de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a24e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a24e6:	ea94 0f05 	teq	r4, r5
 80a24ea:	bf08      	it	eq
 80a24ec:	ea90 0f02 	teqeq	r0, r2
 80a24f0:	bf1f      	itttt	ne
 80a24f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a24f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a24fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a24fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2502:	f000 80e2 	beq.w	80a26ca <__adddf3+0x1ee>
 80a2506:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a250a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a250e:	bfb8      	it	lt
 80a2510:	426d      	neglt	r5, r5
 80a2512:	dd0c      	ble.n	80a252e <__adddf3+0x52>
 80a2514:	442c      	add	r4, r5
 80a2516:	ea80 0202 	eor.w	r2, r0, r2
 80a251a:	ea81 0303 	eor.w	r3, r1, r3
 80a251e:	ea82 0000 	eor.w	r0, r2, r0
 80a2522:	ea83 0101 	eor.w	r1, r3, r1
 80a2526:	ea80 0202 	eor.w	r2, r0, r2
 80a252a:	ea81 0303 	eor.w	r3, r1, r3
 80a252e:	2d36      	cmp	r5, #54	; 0x36
 80a2530:	bf88      	it	hi
 80a2532:	bd30      	pophi	{r4, r5, pc}
 80a2534:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2538:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a253c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a2540:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a2544:	d002      	beq.n	80a254c <__adddf3+0x70>
 80a2546:	4240      	negs	r0, r0
 80a2548:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a254c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a2550:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2554:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a2558:	d002      	beq.n	80a2560 <__adddf3+0x84>
 80a255a:	4252      	negs	r2, r2
 80a255c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a2560:	ea94 0f05 	teq	r4, r5
 80a2564:	f000 80a7 	beq.w	80a26b6 <__adddf3+0x1da>
 80a2568:	f1a4 0401 	sub.w	r4, r4, #1
 80a256c:	f1d5 0e20 	rsbs	lr, r5, #32
 80a2570:	db0d      	blt.n	80a258e <__adddf3+0xb2>
 80a2572:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a2576:	fa22 f205 	lsr.w	r2, r2, r5
 80a257a:	1880      	adds	r0, r0, r2
 80a257c:	f141 0100 	adc.w	r1, r1, #0
 80a2580:	fa03 f20e 	lsl.w	r2, r3, lr
 80a2584:	1880      	adds	r0, r0, r2
 80a2586:	fa43 f305 	asr.w	r3, r3, r5
 80a258a:	4159      	adcs	r1, r3
 80a258c:	e00e      	b.n	80a25ac <__adddf3+0xd0>
 80a258e:	f1a5 0520 	sub.w	r5, r5, #32
 80a2592:	f10e 0e20 	add.w	lr, lr, #32
 80a2596:	2a01      	cmp	r2, #1
 80a2598:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a259c:	bf28      	it	cs
 80a259e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a25a2:	fa43 f305 	asr.w	r3, r3, r5
 80a25a6:	18c0      	adds	r0, r0, r3
 80a25a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a25ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a25b0:	d507      	bpl.n	80a25c2 <__adddf3+0xe6>
 80a25b2:	f04f 0e00 	mov.w	lr, #0
 80a25b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80a25ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a25be:	eb6e 0101 	sbc.w	r1, lr, r1
 80a25c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a25c6:	d31b      	bcc.n	80a2600 <__adddf3+0x124>
 80a25c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a25cc:	d30c      	bcc.n	80a25e8 <__adddf3+0x10c>
 80a25ce:	0849      	lsrs	r1, r1, #1
 80a25d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80a25d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a25d8:	f104 0401 	add.w	r4, r4, #1
 80a25dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a25e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a25e4:	f080 809a 	bcs.w	80a271c <__adddf3+0x240>
 80a25e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a25ec:	bf08      	it	eq
 80a25ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a25f2:	f150 0000 	adcs.w	r0, r0, #0
 80a25f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a25fa:	ea41 0105 	orr.w	r1, r1, r5
 80a25fe:	bd30      	pop	{r4, r5, pc}
 80a2600:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a2604:	4140      	adcs	r0, r0
 80a2606:	eb41 0101 	adc.w	r1, r1, r1
 80a260a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a260e:	f1a4 0401 	sub.w	r4, r4, #1
 80a2612:	d1e9      	bne.n	80a25e8 <__adddf3+0x10c>
 80a2614:	f091 0f00 	teq	r1, #0
 80a2618:	bf04      	itt	eq
 80a261a:	4601      	moveq	r1, r0
 80a261c:	2000      	moveq	r0, #0
 80a261e:	fab1 f381 	clz	r3, r1
 80a2622:	bf08      	it	eq
 80a2624:	3320      	addeq	r3, #32
 80a2626:	f1a3 030b 	sub.w	r3, r3, #11
 80a262a:	f1b3 0220 	subs.w	r2, r3, #32
 80a262e:	da0c      	bge.n	80a264a <__adddf3+0x16e>
 80a2630:	320c      	adds	r2, #12
 80a2632:	dd08      	ble.n	80a2646 <__adddf3+0x16a>
 80a2634:	f102 0c14 	add.w	ip, r2, #20
 80a2638:	f1c2 020c 	rsb	r2, r2, #12
 80a263c:	fa01 f00c 	lsl.w	r0, r1, ip
 80a2640:	fa21 f102 	lsr.w	r1, r1, r2
 80a2644:	e00c      	b.n	80a2660 <__adddf3+0x184>
 80a2646:	f102 0214 	add.w	r2, r2, #20
 80a264a:	bfd8      	it	le
 80a264c:	f1c2 0c20 	rsble	ip, r2, #32
 80a2650:	fa01 f102 	lsl.w	r1, r1, r2
 80a2654:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a2658:	bfdc      	itt	le
 80a265a:	ea41 010c 	orrle.w	r1, r1, ip
 80a265e:	4090      	lslle	r0, r2
 80a2660:	1ae4      	subs	r4, r4, r3
 80a2662:	bfa2      	ittt	ge
 80a2664:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a2668:	4329      	orrge	r1, r5
 80a266a:	bd30      	popge	{r4, r5, pc}
 80a266c:	ea6f 0404 	mvn.w	r4, r4
 80a2670:	3c1f      	subs	r4, #31
 80a2672:	da1c      	bge.n	80a26ae <__adddf3+0x1d2>
 80a2674:	340c      	adds	r4, #12
 80a2676:	dc0e      	bgt.n	80a2696 <__adddf3+0x1ba>
 80a2678:	f104 0414 	add.w	r4, r4, #20
 80a267c:	f1c4 0220 	rsb	r2, r4, #32
 80a2680:	fa20 f004 	lsr.w	r0, r0, r4
 80a2684:	fa01 f302 	lsl.w	r3, r1, r2
 80a2688:	ea40 0003 	orr.w	r0, r0, r3
 80a268c:	fa21 f304 	lsr.w	r3, r1, r4
 80a2690:	ea45 0103 	orr.w	r1, r5, r3
 80a2694:	bd30      	pop	{r4, r5, pc}
 80a2696:	f1c4 040c 	rsb	r4, r4, #12
 80a269a:	f1c4 0220 	rsb	r2, r4, #32
 80a269e:	fa20 f002 	lsr.w	r0, r0, r2
 80a26a2:	fa01 f304 	lsl.w	r3, r1, r4
 80a26a6:	ea40 0003 	orr.w	r0, r0, r3
 80a26aa:	4629      	mov	r1, r5
 80a26ac:	bd30      	pop	{r4, r5, pc}
 80a26ae:	fa21 f004 	lsr.w	r0, r1, r4
 80a26b2:	4629      	mov	r1, r5
 80a26b4:	bd30      	pop	{r4, r5, pc}
 80a26b6:	f094 0f00 	teq	r4, #0
 80a26ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a26be:	bf06      	itte	eq
 80a26c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a26c4:	3401      	addeq	r4, #1
 80a26c6:	3d01      	subne	r5, #1
 80a26c8:	e74e      	b.n	80a2568 <__adddf3+0x8c>
 80a26ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a26ce:	bf18      	it	ne
 80a26d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a26d4:	d029      	beq.n	80a272a <__adddf3+0x24e>
 80a26d6:	ea94 0f05 	teq	r4, r5
 80a26da:	bf08      	it	eq
 80a26dc:	ea90 0f02 	teqeq	r0, r2
 80a26e0:	d005      	beq.n	80a26ee <__adddf3+0x212>
 80a26e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80a26e6:	bf04      	itt	eq
 80a26e8:	4619      	moveq	r1, r3
 80a26ea:	4610      	moveq	r0, r2
 80a26ec:	bd30      	pop	{r4, r5, pc}
 80a26ee:	ea91 0f03 	teq	r1, r3
 80a26f2:	bf1e      	ittt	ne
 80a26f4:	2100      	movne	r1, #0
 80a26f6:	2000      	movne	r0, #0
 80a26f8:	bd30      	popne	{r4, r5, pc}
 80a26fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a26fe:	d105      	bne.n	80a270c <__adddf3+0x230>
 80a2700:	0040      	lsls	r0, r0, #1
 80a2702:	4149      	adcs	r1, r1
 80a2704:	bf28      	it	cs
 80a2706:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a270a:	bd30      	pop	{r4, r5, pc}
 80a270c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a2710:	bf3c      	itt	cc
 80a2712:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a2716:	bd30      	popcc	{r4, r5, pc}
 80a2718:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a271c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a2720:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2724:	f04f 0000 	mov.w	r0, #0
 80a2728:	bd30      	pop	{r4, r5, pc}
 80a272a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a272e:	bf1a      	itte	ne
 80a2730:	4619      	movne	r1, r3
 80a2732:	4610      	movne	r0, r2
 80a2734:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a2738:	bf1c      	itt	ne
 80a273a:	460b      	movne	r3, r1
 80a273c:	4602      	movne	r2, r0
 80a273e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2742:	bf06      	itte	eq
 80a2744:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a2748:	ea91 0f03 	teqeq	r1, r3
 80a274c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a2750:	bd30      	pop	{r4, r5, pc}
 80a2752:	bf00      	nop

080a2754 <__aeabi_ui2d>:
 80a2754:	f090 0f00 	teq	r0, #0
 80a2758:	bf04      	itt	eq
 80a275a:	2100      	moveq	r1, #0
 80a275c:	4770      	bxeq	lr
 80a275e:	b530      	push	{r4, r5, lr}
 80a2760:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2764:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2768:	f04f 0500 	mov.w	r5, #0
 80a276c:	f04f 0100 	mov.w	r1, #0
 80a2770:	e750      	b.n	80a2614 <__adddf3+0x138>
 80a2772:	bf00      	nop

080a2774 <__aeabi_i2d>:
 80a2774:	f090 0f00 	teq	r0, #0
 80a2778:	bf04      	itt	eq
 80a277a:	2100      	moveq	r1, #0
 80a277c:	4770      	bxeq	lr
 80a277e:	b530      	push	{r4, r5, lr}
 80a2780:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2784:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2788:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a278c:	bf48      	it	mi
 80a278e:	4240      	negmi	r0, r0
 80a2790:	f04f 0100 	mov.w	r1, #0
 80a2794:	e73e      	b.n	80a2614 <__adddf3+0x138>
 80a2796:	bf00      	nop

080a2798 <__aeabi_f2d>:
 80a2798:	0042      	lsls	r2, r0, #1
 80a279a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a279e:	ea4f 0131 	mov.w	r1, r1, rrx
 80a27a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a27a6:	bf1f      	itttt	ne
 80a27a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a27ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a27b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a27b4:	4770      	bxne	lr
 80a27b6:	f092 0f00 	teq	r2, #0
 80a27ba:	bf14      	ite	ne
 80a27bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a27c0:	4770      	bxeq	lr
 80a27c2:	b530      	push	{r4, r5, lr}
 80a27c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a27c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a27cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a27d0:	e720      	b.n	80a2614 <__adddf3+0x138>
 80a27d2:	bf00      	nop

080a27d4 <__aeabi_ul2d>:
 80a27d4:	ea50 0201 	orrs.w	r2, r0, r1
 80a27d8:	bf08      	it	eq
 80a27da:	4770      	bxeq	lr
 80a27dc:	b530      	push	{r4, r5, lr}
 80a27de:	f04f 0500 	mov.w	r5, #0
 80a27e2:	e00a      	b.n	80a27fa <__aeabi_l2d+0x16>

080a27e4 <__aeabi_l2d>:
 80a27e4:	ea50 0201 	orrs.w	r2, r0, r1
 80a27e8:	bf08      	it	eq
 80a27ea:	4770      	bxeq	lr
 80a27ec:	b530      	push	{r4, r5, lr}
 80a27ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a27f2:	d502      	bpl.n	80a27fa <__aeabi_l2d+0x16>
 80a27f4:	4240      	negs	r0, r0
 80a27f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a27fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a27fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2802:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a2806:	f43f aedc 	beq.w	80a25c2 <__adddf3+0xe6>
 80a280a:	f04f 0203 	mov.w	r2, #3
 80a280e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2812:	bf18      	it	ne
 80a2814:	3203      	addne	r2, #3
 80a2816:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a281a:	bf18      	it	ne
 80a281c:	3203      	addne	r2, #3
 80a281e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a2822:	f1c2 0320 	rsb	r3, r2, #32
 80a2826:	fa00 fc03 	lsl.w	ip, r0, r3
 80a282a:	fa20 f002 	lsr.w	r0, r0, r2
 80a282e:	fa01 fe03 	lsl.w	lr, r1, r3
 80a2832:	ea40 000e 	orr.w	r0, r0, lr
 80a2836:	fa21 f102 	lsr.w	r1, r1, r2
 80a283a:	4414      	add	r4, r2
 80a283c:	e6c1      	b.n	80a25c2 <__adddf3+0xe6>
 80a283e:	bf00      	nop

080a2840 <__aeabi_dmul>:
 80a2840:	b570      	push	{r4, r5, r6, lr}
 80a2842:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2846:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a284a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a284e:	bf1d      	ittte	ne
 80a2850:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2854:	ea94 0f0c 	teqne	r4, ip
 80a2858:	ea95 0f0c 	teqne	r5, ip
 80a285c:	f000 f8de 	bleq	80a2a1c <__aeabi_dmul+0x1dc>
 80a2860:	442c      	add	r4, r5
 80a2862:	ea81 0603 	eor.w	r6, r1, r3
 80a2866:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a286a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a286e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a2872:	bf18      	it	ne
 80a2874:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a2878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a287c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a2880:	d038      	beq.n	80a28f4 <__aeabi_dmul+0xb4>
 80a2882:	fba0 ce02 	umull	ip, lr, r0, r2
 80a2886:	f04f 0500 	mov.w	r5, #0
 80a288a:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a288e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a2892:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a2896:	f04f 0600 	mov.w	r6, #0
 80a289a:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a289e:	f09c 0f00 	teq	ip, #0
 80a28a2:	bf18      	it	ne
 80a28a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80a28a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a28ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a28b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a28b4:	d204      	bcs.n	80a28c0 <__aeabi_dmul+0x80>
 80a28b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a28ba:	416d      	adcs	r5, r5
 80a28bc:	eb46 0606 	adc.w	r6, r6, r6
 80a28c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a28c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a28c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a28cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a28d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a28d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a28d8:	bf88      	it	hi
 80a28da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a28de:	d81e      	bhi.n	80a291e <__aeabi_dmul+0xde>
 80a28e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a28e4:	bf08      	it	eq
 80a28e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a28ea:	f150 0000 	adcs.w	r0, r0, #0
 80a28ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a28f2:	bd70      	pop	{r4, r5, r6, pc}
 80a28f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a28f8:	ea46 0101 	orr.w	r1, r6, r1
 80a28fc:	ea40 0002 	orr.w	r0, r0, r2
 80a2900:	ea81 0103 	eor.w	r1, r1, r3
 80a2904:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a2908:	bfc2      	ittt	gt
 80a290a:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a290e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2912:	bd70      	popgt	{r4, r5, r6, pc}
 80a2914:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2918:	f04f 0e00 	mov.w	lr, #0
 80a291c:	3c01      	subs	r4, #1
 80a291e:	f300 80ab 	bgt.w	80a2a78 <__aeabi_dmul+0x238>
 80a2922:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a2926:	bfde      	ittt	le
 80a2928:	2000      	movle	r0, #0
 80a292a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a292e:	bd70      	pople	{r4, r5, r6, pc}
 80a2930:	f1c4 0400 	rsb	r4, r4, #0
 80a2934:	3c20      	subs	r4, #32
 80a2936:	da35      	bge.n	80a29a4 <__aeabi_dmul+0x164>
 80a2938:	340c      	adds	r4, #12
 80a293a:	dc1b      	bgt.n	80a2974 <__aeabi_dmul+0x134>
 80a293c:	f104 0414 	add.w	r4, r4, #20
 80a2940:	f1c4 0520 	rsb	r5, r4, #32
 80a2944:	fa00 f305 	lsl.w	r3, r0, r5
 80a2948:	fa20 f004 	lsr.w	r0, r0, r4
 80a294c:	fa01 f205 	lsl.w	r2, r1, r5
 80a2950:	ea40 0002 	orr.w	r0, r0, r2
 80a2954:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a2958:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a295c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2960:	fa21 f604 	lsr.w	r6, r1, r4
 80a2964:	eb42 0106 	adc.w	r1, r2, r6
 80a2968:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a296c:	bf08      	it	eq
 80a296e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2972:	bd70      	pop	{r4, r5, r6, pc}
 80a2974:	f1c4 040c 	rsb	r4, r4, #12
 80a2978:	f1c4 0520 	rsb	r5, r4, #32
 80a297c:	fa00 f304 	lsl.w	r3, r0, r4
 80a2980:	fa20 f005 	lsr.w	r0, r0, r5
 80a2984:	fa01 f204 	lsl.w	r2, r1, r4
 80a2988:	ea40 0002 	orr.w	r0, r0, r2
 80a298c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2990:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2994:	f141 0100 	adc.w	r1, r1, #0
 80a2998:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a299c:	bf08      	it	eq
 80a299e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a29a2:	bd70      	pop	{r4, r5, r6, pc}
 80a29a4:	f1c4 0520 	rsb	r5, r4, #32
 80a29a8:	fa00 f205 	lsl.w	r2, r0, r5
 80a29ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80a29b0:	fa20 f304 	lsr.w	r3, r0, r4
 80a29b4:	fa01 f205 	lsl.w	r2, r1, r5
 80a29b8:	ea43 0302 	orr.w	r3, r3, r2
 80a29bc:	fa21 f004 	lsr.w	r0, r1, r4
 80a29c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a29c4:	fa21 f204 	lsr.w	r2, r1, r4
 80a29c8:	ea20 0002 	bic.w	r0, r0, r2
 80a29cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a29d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a29d4:	bf08      	it	eq
 80a29d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a29da:	bd70      	pop	{r4, r5, r6, pc}
 80a29dc:	f094 0f00 	teq	r4, #0
 80a29e0:	d10f      	bne.n	80a2a02 <__aeabi_dmul+0x1c2>
 80a29e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a29e6:	0040      	lsls	r0, r0, #1
 80a29e8:	eb41 0101 	adc.w	r1, r1, r1
 80a29ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a29f0:	bf08      	it	eq
 80a29f2:	3c01      	subeq	r4, #1
 80a29f4:	d0f7      	beq.n	80a29e6 <__aeabi_dmul+0x1a6>
 80a29f6:	ea41 0106 	orr.w	r1, r1, r6
 80a29fa:	f095 0f00 	teq	r5, #0
 80a29fe:	bf18      	it	ne
 80a2a00:	4770      	bxne	lr
 80a2a02:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a2a06:	0052      	lsls	r2, r2, #1
 80a2a08:	eb43 0303 	adc.w	r3, r3, r3
 80a2a0c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a2a10:	bf08      	it	eq
 80a2a12:	3d01      	subeq	r5, #1
 80a2a14:	d0f7      	beq.n	80a2a06 <__aeabi_dmul+0x1c6>
 80a2a16:	ea43 0306 	orr.w	r3, r3, r6
 80a2a1a:	4770      	bx	lr
 80a2a1c:	ea94 0f0c 	teq	r4, ip
 80a2a20:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a2a24:	bf18      	it	ne
 80a2a26:	ea95 0f0c 	teqne	r5, ip
 80a2a2a:	d00c      	beq.n	80a2a46 <__aeabi_dmul+0x206>
 80a2a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2a30:	bf18      	it	ne
 80a2a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2a36:	d1d1      	bne.n	80a29dc <__aeabi_dmul+0x19c>
 80a2a38:	ea81 0103 	eor.w	r1, r1, r3
 80a2a3c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2a40:	f04f 0000 	mov.w	r0, #0
 80a2a44:	bd70      	pop	{r4, r5, r6, pc}
 80a2a46:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2a4a:	bf06      	itte	eq
 80a2a4c:	4610      	moveq	r0, r2
 80a2a4e:	4619      	moveq	r1, r3
 80a2a50:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2a54:	d019      	beq.n	80a2a8a <__aeabi_dmul+0x24a>
 80a2a56:	ea94 0f0c 	teq	r4, ip
 80a2a5a:	d102      	bne.n	80a2a62 <__aeabi_dmul+0x222>
 80a2a5c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a2a60:	d113      	bne.n	80a2a8a <__aeabi_dmul+0x24a>
 80a2a62:	ea95 0f0c 	teq	r5, ip
 80a2a66:	d105      	bne.n	80a2a74 <__aeabi_dmul+0x234>
 80a2a68:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a2a6c:	bf1c      	itt	ne
 80a2a6e:	4610      	movne	r0, r2
 80a2a70:	4619      	movne	r1, r3
 80a2a72:	d10a      	bne.n	80a2a8a <__aeabi_dmul+0x24a>
 80a2a74:	ea81 0103 	eor.w	r1, r1, r3
 80a2a78:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2a7c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2a80:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2a84:	f04f 0000 	mov.w	r0, #0
 80a2a88:	bd70      	pop	{r4, r5, r6, pc}
 80a2a8a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2a8e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a2a92:	bd70      	pop	{r4, r5, r6, pc}

080a2a94 <__aeabi_ddiv>:
 80a2a94:	b570      	push	{r4, r5, r6, lr}
 80a2a96:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2a9a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a2a9e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2aa2:	bf1d      	ittte	ne
 80a2aa4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2aa8:	ea94 0f0c 	teqne	r4, ip
 80a2aac:	ea95 0f0c 	teqne	r5, ip
 80a2ab0:	f000 f8a7 	bleq	80a2c02 <__aeabi_ddiv+0x16e>
 80a2ab4:	eba4 0405 	sub.w	r4, r4, r5
 80a2ab8:	ea81 0e03 	eor.w	lr, r1, r3
 80a2abc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2ac0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2ac4:	f000 8088 	beq.w	80a2bd8 <__aeabi_ddiv+0x144>
 80a2ac8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2acc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a2ad0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a2ad4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a2ad8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a2adc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a2ae0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a2ae4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a2ae8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a2aec:	429d      	cmp	r5, r3
 80a2aee:	bf08      	it	eq
 80a2af0:	4296      	cmpeq	r6, r2
 80a2af2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a2af6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a2afa:	d202      	bcs.n	80a2b02 <__aeabi_ddiv+0x6e>
 80a2afc:	085b      	lsrs	r3, r3, #1
 80a2afe:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2b02:	1ab6      	subs	r6, r6, r2
 80a2b04:	eb65 0503 	sbc.w	r5, r5, r3
 80a2b08:	085b      	lsrs	r3, r3, #1
 80a2b0a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2b0e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a2b12:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a2b16:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2b1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2b1e:	bf22      	ittt	cs
 80a2b20:	1ab6      	subcs	r6, r6, r2
 80a2b22:	4675      	movcs	r5, lr
 80a2b24:	ea40 000c 	orrcs.w	r0, r0, ip
 80a2b28:	085b      	lsrs	r3, r3, #1
 80a2b2a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2b2e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2b32:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2b36:	bf22      	ittt	cs
 80a2b38:	1ab6      	subcs	r6, r6, r2
 80a2b3a:	4675      	movcs	r5, lr
 80a2b3c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a2b40:	085b      	lsrs	r3, r3, #1
 80a2b42:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2b46:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2b4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2b4e:	bf22      	ittt	cs
 80a2b50:	1ab6      	subcs	r6, r6, r2
 80a2b52:	4675      	movcs	r5, lr
 80a2b54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a2b58:	085b      	lsrs	r3, r3, #1
 80a2b5a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2b5e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2b62:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2b66:	bf22      	ittt	cs
 80a2b68:	1ab6      	subcs	r6, r6, r2
 80a2b6a:	4675      	movcs	r5, lr
 80a2b6c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a2b70:	ea55 0e06 	orrs.w	lr, r5, r6
 80a2b74:	d018      	beq.n	80a2ba8 <__aeabi_ddiv+0x114>
 80a2b76:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a2b7a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a2b7e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a2b82:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a2b86:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a2b8a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a2b8e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a2b92:	d1c0      	bne.n	80a2b16 <__aeabi_ddiv+0x82>
 80a2b94:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2b98:	d10b      	bne.n	80a2bb2 <__aeabi_ddiv+0x11e>
 80a2b9a:	ea41 0100 	orr.w	r1, r1, r0
 80a2b9e:	f04f 0000 	mov.w	r0, #0
 80a2ba2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a2ba6:	e7b6      	b.n	80a2b16 <__aeabi_ddiv+0x82>
 80a2ba8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2bac:	bf04      	itt	eq
 80a2bae:	4301      	orreq	r1, r0
 80a2bb0:	2000      	moveq	r0, #0
 80a2bb2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a2bb6:	bf88      	it	hi
 80a2bb8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a2bbc:	f63f aeaf 	bhi.w	80a291e <__aeabi_dmul+0xde>
 80a2bc0:	ebb5 0c03 	subs.w	ip, r5, r3
 80a2bc4:	bf04      	itt	eq
 80a2bc6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a2bca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a2bce:	f150 0000 	adcs.w	r0, r0, #0
 80a2bd2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2bd6:	bd70      	pop	{r4, r5, r6, pc}
 80a2bd8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a2bdc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a2be0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a2be4:	bfc2      	ittt	gt
 80a2be6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a2bea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2bee:	bd70      	popgt	{r4, r5, r6, pc}
 80a2bf0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2bf4:	f04f 0e00 	mov.w	lr, #0
 80a2bf8:	3c01      	subs	r4, #1
 80a2bfa:	e690      	b.n	80a291e <__aeabi_dmul+0xde>
 80a2bfc:	ea45 0e06 	orr.w	lr, r5, r6
 80a2c00:	e68d      	b.n	80a291e <__aeabi_dmul+0xde>
 80a2c02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a2c06:	ea94 0f0c 	teq	r4, ip
 80a2c0a:	bf08      	it	eq
 80a2c0c:	ea95 0f0c 	teqeq	r5, ip
 80a2c10:	f43f af3b 	beq.w	80a2a8a <__aeabi_dmul+0x24a>
 80a2c14:	ea94 0f0c 	teq	r4, ip
 80a2c18:	d10a      	bne.n	80a2c30 <__aeabi_ddiv+0x19c>
 80a2c1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2c1e:	f47f af34 	bne.w	80a2a8a <__aeabi_dmul+0x24a>
 80a2c22:	ea95 0f0c 	teq	r5, ip
 80a2c26:	f47f af25 	bne.w	80a2a74 <__aeabi_dmul+0x234>
 80a2c2a:	4610      	mov	r0, r2
 80a2c2c:	4619      	mov	r1, r3
 80a2c2e:	e72c      	b.n	80a2a8a <__aeabi_dmul+0x24a>
 80a2c30:	ea95 0f0c 	teq	r5, ip
 80a2c34:	d106      	bne.n	80a2c44 <__aeabi_ddiv+0x1b0>
 80a2c36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2c3a:	f43f aefd 	beq.w	80a2a38 <__aeabi_dmul+0x1f8>
 80a2c3e:	4610      	mov	r0, r2
 80a2c40:	4619      	mov	r1, r3
 80a2c42:	e722      	b.n	80a2a8a <__aeabi_dmul+0x24a>
 80a2c44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2c48:	bf18      	it	ne
 80a2c4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2c4e:	f47f aec5 	bne.w	80a29dc <__aeabi_dmul+0x19c>
 80a2c52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a2c56:	f47f af0d 	bne.w	80a2a74 <__aeabi_dmul+0x234>
 80a2c5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a2c5e:	f47f aeeb 	bne.w	80a2a38 <__aeabi_dmul+0x1f8>
 80a2c62:	e712      	b.n	80a2a8a <__aeabi_dmul+0x24a>

080a2c64 <__gedf2>:
 80a2c64:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a2c68:	e006      	b.n	80a2c78 <__cmpdf2+0x4>
 80a2c6a:	bf00      	nop

080a2c6c <__ledf2>:
 80a2c6c:	f04f 0c01 	mov.w	ip, #1
 80a2c70:	e002      	b.n	80a2c78 <__cmpdf2+0x4>
 80a2c72:	bf00      	nop

080a2c74 <__cmpdf2>:
 80a2c74:	f04f 0c01 	mov.w	ip, #1
 80a2c78:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a2c7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2c80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2c84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2c88:	bf18      	it	ne
 80a2c8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a2c8e:	d01b      	beq.n	80a2cc8 <__cmpdf2+0x54>
 80a2c90:	b001      	add	sp, #4
 80a2c92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a2c96:	bf0c      	ite	eq
 80a2c98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a2c9c:	ea91 0f03 	teqne	r1, r3
 80a2ca0:	bf02      	ittt	eq
 80a2ca2:	ea90 0f02 	teqeq	r0, r2
 80a2ca6:	2000      	moveq	r0, #0
 80a2ca8:	4770      	bxeq	lr
 80a2caa:	f110 0f00 	cmn.w	r0, #0
 80a2cae:	ea91 0f03 	teq	r1, r3
 80a2cb2:	bf58      	it	pl
 80a2cb4:	4299      	cmppl	r1, r3
 80a2cb6:	bf08      	it	eq
 80a2cb8:	4290      	cmpeq	r0, r2
 80a2cba:	bf2c      	ite	cs
 80a2cbc:	17d8      	asrcs	r0, r3, #31
 80a2cbe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a2cc2:	f040 0001 	orr.w	r0, r0, #1
 80a2cc6:	4770      	bx	lr
 80a2cc8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2ccc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2cd0:	d102      	bne.n	80a2cd8 <__cmpdf2+0x64>
 80a2cd2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a2cd6:	d107      	bne.n	80a2ce8 <__cmpdf2+0x74>
 80a2cd8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2cdc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2ce0:	d1d6      	bne.n	80a2c90 <__cmpdf2+0x1c>
 80a2ce2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a2ce6:	d0d3      	beq.n	80a2c90 <__cmpdf2+0x1c>
 80a2ce8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a2cec:	4770      	bx	lr
 80a2cee:	bf00      	nop

080a2cf0 <__aeabi_cdrcmple>:
 80a2cf0:	4684      	mov	ip, r0
 80a2cf2:	4610      	mov	r0, r2
 80a2cf4:	4662      	mov	r2, ip
 80a2cf6:	468c      	mov	ip, r1
 80a2cf8:	4619      	mov	r1, r3
 80a2cfa:	4663      	mov	r3, ip
 80a2cfc:	e000      	b.n	80a2d00 <__aeabi_cdcmpeq>
 80a2cfe:	bf00      	nop

080a2d00 <__aeabi_cdcmpeq>:
 80a2d00:	b501      	push	{r0, lr}
 80a2d02:	f7ff ffb7 	bl	80a2c74 <__cmpdf2>
 80a2d06:	2800      	cmp	r0, #0
 80a2d08:	bf48      	it	mi
 80a2d0a:	f110 0f00 	cmnmi.w	r0, #0
 80a2d0e:	bd01      	pop	{r0, pc}

080a2d10 <__aeabi_dcmpeq>:
 80a2d10:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2d14:	f7ff fff4 	bl	80a2d00 <__aeabi_cdcmpeq>
 80a2d18:	bf0c      	ite	eq
 80a2d1a:	2001      	moveq	r0, #1
 80a2d1c:	2000      	movne	r0, #0
 80a2d1e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2d22:	bf00      	nop

080a2d24 <__aeabi_dcmplt>:
 80a2d24:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2d28:	f7ff ffea 	bl	80a2d00 <__aeabi_cdcmpeq>
 80a2d2c:	bf34      	ite	cc
 80a2d2e:	2001      	movcc	r0, #1
 80a2d30:	2000      	movcs	r0, #0
 80a2d32:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2d36:	bf00      	nop

080a2d38 <__aeabi_dcmple>:
 80a2d38:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2d3c:	f7ff ffe0 	bl	80a2d00 <__aeabi_cdcmpeq>
 80a2d40:	bf94      	ite	ls
 80a2d42:	2001      	movls	r0, #1
 80a2d44:	2000      	movhi	r0, #0
 80a2d46:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2d4a:	bf00      	nop

080a2d4c <__aeabi_dcmpge>:
 80a2d4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2d50:	f7ff ffce 	bl	80a2cf0 <__aeabi_cdrcmple>
 80a2d54:	bf94      	ite	ls
 80a2d56:	2001      	movls	r0, #1
 80a2d58:	2000      	movhi	r0, #0
 80a2d5a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2d5e:	bf00      	nop

080a2d60 <__aeabi_dcmpgt>:
 80a2d60:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2d64:	f7ff ffc4 	bl	80a2cf0 <__aeabi_cdrcmple>
 80a2d68:	bf34      	ite	cc
 80a2d6a:	2001      	movcc	r0, #1
 80a2d6c:	2000      	movcs	r0, #0
 80a2d6e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2d72:	bf00      	nop

080a2d74 <__aeabi_dcmpun>:
 80a2d74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2d78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2d7c:	d102      	bne.n	80a2d84 <__aeabi_dcmpun+0x10>
 80a2d7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a2d82:	d10a      	bne.n	80a2d9a <__aeabi_dcmpun+0x26>
 80a2d84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2d88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2d8c:	d102      	bne.n	80a2d94 <__aeabi_dcmpun+0x20>
 80a2d8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a2d92:	d102      	bne.n	80a2d9a <__aeabi_dcmpun+0x26>
 80a2d94:	f04f 0000 	mov.w	r0, #0
 80a2d98:	4770      	bx	lr
 80a2d9a:	f04f 0001 	mov.w	r0, #1
 80a2d9e:	4770      	bx	lr

080a2da0 <atoi>:
 80a2da0:	220a      	movs	r2, #10
 80a2da2:	2100      	movs	r1, #0
 80a2da4:	f000 ba26 	b.w	80a31f4 <strtol>

080a2da8 <__cxa_atexit>:
 80a2da8:	b510      	push	{r4, lr}
 80a2daa:	4c05      	ldr	r4, [pc, #20]	; (80a2dc0 <__cxa_atexit+0x18>)
 80a2dac:	4613      	mov	r3, r2
 80a2dae:	b12c      	cbz	r4, 80a2dbc <__cxa_atexit+0x14>
 80a2db0:	460a      	mov	r2, r1
 80a2db2:	4601      	mov	r1, r0
 80a2db4:	2002      	movs	r0, #2
 80a2db6:	f3af 8000 	nop.w
 80a2dba:	bd10      	pop	{r4, pc}
 80a2dbc:	4620      	mov	r0, r4
 80a2dbe:	bd10      	pop	{r4, pc}
 80a2dc0:	00000000 	.word	0x00000000

080a2dc4 <localtime>:
 80a2dc4:	b538      	push	{r3, r4, r5, lr}
 80a2dc6:	4b07      	ldr	r3, [pc, #28]	; (80a2de4 <localtime+0x20>)
 80a2dc8:	4605      	mov	r5, r0
 80a2dca:	681c      	ldr	r4, [r3, #0]
 80a2dcc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a2dce:	b91b      	cbnz	r3, 80a2dd8 <localtime+0x14>
 80a2dd0:	2024      	movs	r0, #36	; 0x24
 80a2dd2:	f7fd ffab 	bl	80a0d2c <malloc>
 80a2dd6:	63e0      	str	r0, [r4, #60]	; 0x3c
 80a2dd8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a2dda:	4628      	mov	r0, r5
 80a2ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a2de0:	f000 b802 	b.w	80a2de8 <localtime_r>
 80a2de4:	20000140 	.word	0x20000140

080a2de8 <localtime_r>:
 80a2de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2dec:	460c      	mov	r4, r1
 80a2dee:	4680      	mov	r8, r0
 80a2df0:	f000 fd06 	bl	80a3800 <__gettzinfo>
 80a2df4:	4621      	mov	r1, r4
 80a2df6:	4607      	mov	r7, r0
 80a2df8:	4640      	mov	r0, r8
 80a2dfa:	f000 fd05 	bl	80a3808 <gmtime_r>
 80a2dfe:	6946      	ldr	r6, [r0, #20]
 80a2e00:	4604      	mov	r4, r0
 80a2e02:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80a2e06:	07b3      	lsls	r3, r6, #30
 80a2e08:	d105      	bne.n	80a2e16 <localtime_r+0x2e>
 80a2e0a:	2264      	movs	r2, #100	; 0x64
 80a2e0c:	fb96 f3f2 	sdiv	r3, r6, r2
 80a2e10:	fb02 6313 	mls	r3, r2, r3, r6
 80a2e14:	b94b      	cbnz	r3, 80a2e2a <localtime_r+0x42>
 80a2e16:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80a2e1a:	fb96 f3f5 	sdiv	r3, r6, r5
 80a2e1e:	fb05 6513 	mls	r5, r5, r3, r6
 80a2e22:	fab5 f385 	clz	r3, r5
 80a2e26:	095b      	lsrs	r3, r3, #5
 80a2e28:	e000      	b.n	80a2e2c <localtime_r+0x44>
 80a2e2a:	2301      	movs	r3, #1
 80a2e2c:	4a5f      	ldr	r2, [pc, #380]	; (80a2fac <localtime_r+0x1c4>)
 80a2e2e:	2530      	movs	r5, #48	; 0x30
 80a2e30:	fb05 2503 	mla	r5, r5, r3, r2
 80a2e34:	f000 fb18 	bl	80a3468 <__tz_lock>
 80a2e38:	f000 fb18 	bl	80a346c <_tzset_unlocked>
 80a2e3c:	4b5c      	ldr	r3, [pc, #368]	; (80a2fb0 <localtime_r+0x1c8>)
 80a2e3e:	681b      	ldr	r3, [r3, #0]
 80a2e40:	b1f3      	cbz	r3, 80a2e80 <localtime_r+0x98>
 80a2e42:	687b      	ldr	r3, [r7, #4]
 80a2e44:	429e      	cmp	r6, r3
 80a2e46:	d105      	bne.n	80a2e54 <localtime_r+0x6c>
 80a2e48:	6839      	ldr	r1, [r7, #0]
 80a2e4a:	f8d8 3000 	ldr.w	r3, [r8]
 80a2e4e:	69fa      	ldr	r2, [r7, #28]
 80a2e50:	b941      	cbnz	r1, 80a2e64 <localtime_r+0x7c>
 80a2e52:	e00a      	b.n	80a2e6a <localtime_r+0x82>
 80a2e54:	4630      	mov	r0, r6
 80a2e56:	f000 fa5f 	bl	80a3318 <__tzcalc_limits>
 80a2e5a:	2800      	cmp	r0, #0
 80a2e5c:	d1f4      	bne.n	80a2e48 <localtime_r+0x60>
 80a2e5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a2e62:	e00d      	b.n	80a2e80 <localtime_r+0x98>
 80a2e64:	4293      	cmp	r3, r2
 80a2e66:	db08      	blt.n	80a2e7a <localtime_r+0x92>
 80a2e68:	e001      	b.n	80a2e6e <localtime_r+0x86>
 80a2e6a:	4293      	cmp	r3, r2
 80a2e6c:	da07      	bge.n	80a2e7e <localtime_r+0x96>
 80a2e6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80a2e70:	4293      	cmp	r3, r2
 80a2e72:	bfac      	ite	ge
 80a2e74:	2300      	movge	r3, #0
 80a2e76:	2301      	movlt	r3, #1
 80a2e78:	e002      	b.n	80a2e80 <localtime_r+0x98>
 80a2e7a:	2300      	movs	r3, #0
 80a2e7c:	e000      	b.n	80a2e80 <localtime_r+0x98>
 80a2e7e:	2301      	movs	r3, #1
 80a2e80:	6223      	str	r3, [r4, #32]
 80a2e82:	6a23      	ldr	r3, [r4, #32]
 80a2e84:	203c      	movs	r0, #60	; 0x3c
 80a2e86:	2b01      	cmp	r3, #1
 80a2e88:	bf0c      	ite	eq
 80a2e8a:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 80a2e8c:	6a39      	ldrne	r1, [r7, #32]
 80a2e8e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a2e92:	fb91 f6f3 	sdiv	r6, r1, r3
 80a2e96:	fb03 1316 	mls	r3, r3, r6, r1
 80a2e9a:	fb93 f2f0 	sdiv	r2, r3, r0
 80a2e9e:	fb00 3012 	mls	r0, r0, r2, r3
 80a2ea2:	6861      	ldr	r1, [r4, #4]
 80a2ea4:	6823      	ldr	r3, [r4, #0]
 80a2ea6:	1a89      	subs	r1, r1, r2
 80a2ea8:	68a2      	ldr	r2, [r4, #8]
 80a2eaa:	1a1b      	subs	r3, r3, r0
 80a2eac:	1b92      	subs	r2, r2, r6
 80a2eae:	2b3b      	cmp	r3, #59	; 0x3b
 80a2eb0:	6023      	str	r3, [r4, #0]
 80a2eb2:	6061      	str	r1, [r4, #4]
 80a2eb4:	60a2      	str	r2, [r4, #8]
 80a2eb6:	dd03      	ble.n	80a2ec0 <localtime_r+0xd8>
 80a2eb8:	3101      	adds	r1, #1
 80a2eba:	6061      	str	r1, [r4, #4]
 80a2ebc:	3b3c      	subs	r3, #60	; 0x3c
 80a2ebe:	e004      	b.n	80a2eca <localtime_r+0xe2>
 80a2ec0:	2b00      	cmp	r3, #0
 80a2ec2:	da03      	bge.n	80a2ecc <localtime_r+0xe4>
 80a2ec4:	3901      	subs	r1, #1
 80a2ec6:	6061      	str	r1, [r4, #4]
 80a2ec8:	333c      	adds	r3, #60	; 0x3c
 80a2eca:	6023      	str	r3, [r4, #0]
 80a2ecc:	6863      	ldr	r3, [r4, #4]
 80a2ece:	2b3b      	cmp	r3, #59	; 0x3b
 80a2ed0:	dd03      	ble.n	80a2eda <localtime_r+0xf2>
 80a2ed2:	3201      	adds	r2, #1
 80a2ed4:	60a2      	str	r2, [r4, #8]
 80a2ed6:	3b3c      	subs	r3, #60	; 0x3c
 80a2ed8:	e004      	b.n	80a2ee4 <localtime_r+0xfc>
 80a2eda:	2b00      	cmp	r3, #0
 80a2edc:	da03      	bge.n	80a2ee6 <localtime_r+0xfe>
 80a2ede:	3a01      	subs	r2, #1
 80a2ee0:	60a2      	str	r2, [r4, #8]
 80a2ee2:	333c      	adds	r3, #60	; 0x3c
 80a2ee4:	6063      	str	r3, [r4, #4]
 80a2ee6:	68a3      	ldr	r3, [r4, #8]
 80a2ee8:	2b17      	cmp	r3, #23
 80a2eea:	dd22      	ble.n	80a2f32 <localtime_r+0x14a>
 80a2eec:	69e2      	ldr	r2, [r4, #28]
 80a2eee:	3b18      	subs	r3, #24
 80a2ef0:	3201      	adds	r2, #1
 80a2ef2:	61e2      	str	r2, [r4, #28]
 80a2ef4:	69a2      	ldr	r2, [r4, #24]
 80a2ef6:	60a3      	str	r3, [r4, #8]
 80a2ef8:	3201      	adds	r2, #1
 80a2efa:	2a06      	cmp	r2, #6
 80a2efc:	bfc8      	it	gt
 80a2efe:	2200      	movgt	r2, #0
 80a2f00:	61a2      	str	r2, [r4, #24]
 80a2f02:	68e2      	ldr	r2, [r4, #12]
 80a2f04:	6923      	ldr	r3, [r4, #16]
 80a2f06:	3201      	adds	r2, #1
 80a2f08:	60e2      	str	r2, [r4, #12]
 80a2f0a:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80a2f0e:	428a      	cmp	r2, r1
 80a2f10:	dd46      	ble.n	80a2fa0 <localtime_r+0x1b8>
 80a2f12:	3301      	adds	r3, #1
 80a2f14:	2b0c      	cmp	r3, #12
 80a2f16:	bf08      	it	eq
 80a2f18:	6963      	ldreq	r3, [r4, #20]
 80a2f1a:	eba2 0201 	sub.w	r2, r2, r1
 80a2f1e:	60e2      	str	r2, [r4, #12]
 80a2f20:	bf05      	ittet	eq
 80a2f22:	3301      	addeq	r3, #1
 80a2f24:	2200      	moveq	r2, #0
 80a2f26:	6123      	strne	r3, [r4, #16]
 80a2f28:	6122      	streq	r2, [r4, #16]
 80a2f2a:	bf04      	itt	eq
 80a2f2c:	6163      	streq	r3, [r4, #20]
 80a2f2e:	61e2      	streq	r2, [r4, #28]
 80a2f30:	e036      	b.n	80a2fa0 <localtime_r+0x1b8>
 80a2f32:	2b00      	cmp	r3, #0
 80a2f34:	da34      	bge.n	80a2fa0 <localtime_r+0x1b8>
 80a2f36:	69e2      	ldr	r2, [r4, #28]
 80a2f38:	3318      	adds	r3, #24
 80a2f3a:	3a01      	subs	r2, #1
 80a2f3c:	61e2      	str	r2, [r4, #28]
 80a2f3e:	69a2      	ldr	r2, [r4, #24]
 80a2f40:	60a3      	str	r3, [r4, #8]
 80a2f42:	3a01      	subs	r2, #1
 80a2f44:	bf48      	it	mi
 80a2f46:	2206      	movmi	r2, #6
 80a2f48:	61a2      	str	r2, [r4, #24]
 80a2f4a:	68e2      	ldr	r2, [r4, #12]
 80a2f4c:	3a01      	subs	r2, #1
 80a2f4e:	60e2      	str	r2, [r4, #12]
 80a2f50:	bb32      	cbnz	r2, 80a2fa0 <localtime_r+0x1b8>
 80a2f52:	6923      	ldr	r3, [r4, #16]
 80a2f54:	3b01      	subs	r3, #1
 80a2f56:	d401      	bmi.n	80a2f5c <localtime_r+0x174>
 80a2f58:	6123      	str	r3, [r4, #16]
 80a2f5a:	e01d      	b.n	80a2f98 <localtime_r+0x1b0>
 80a2f5c:	230b      	movs	r3, #11
 80a2f5e:	6123      	str	r3, [r4, #16]
 80a2f60:	6963      	ldr	r3, [r4, #20]
 80a2f62:	1e5a      	subs	r2, r3, #1
 80a2f64:	f012 0f03 	tst.w	r2, #3
 80a2f68:	6162      	str	r2, [r4, #20]
 80a2f6a:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80a2f6e:	d105      	bne.n	80a2f7c <localtime_r+0x194>
 80a2f70:	2164      	movs	r1, #100	; 0x64
 80a2f72:	fb93 f2f1 	sdiv	r2, r3, r1
 80a2f76:	fb01 3212 	mls	r2, r1, r2, r3
 80a2f7a:	b94a      	cbnz	r2, 80a2f90 <localtime_r+0x1a8>
 80a2f7c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a2f80:	fb93 f2f1 	sdiv	r2, r3, r1
 80a2f84:	fb01 3312 	mls	r3, r1, r2, r3
 80a2f88:	fab3 f383 	clz	r3, r3
 80a2f8c:	095b      	lsrs	r3, r3, #5
 80a2f8e:	e000      	b.n	80a2f92 <localtime_r+0x1aa>
 80a2f90:	2301      	movs	r3, #1
 80a2f92:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80a2f96:	61e3      	str	r3, [r4, #28]
 80a2f98:	6923      	ldr	r3, [r4, #16]
 80a2f9a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80a2f9e:	60e3      	str	r3, [r4, #12]
 80a2fa0:	f000 fa63 	bl	80a346a <__tz_unlock>
 80a2fa4:	4620      	mov	r0, r4
 80a2fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a2faa:	bf00      	nop
 80a2fac:	080a3ea4 	.word	0x080a3ea4
 80a2fb0:	20000844 	.word	0x20000844

080a2fb4 <memcpy>:
 80a2fb4:	b510      	push	{r4, lr}
 80a2fb6:	1e43      	subs	r3, r0, #1
 80a2fb8:	440a      	add	r2, r1
 80a2fba:	4291      	cmp	r1, r2
 80a2fbc:	d004      	beq.n	80a2fc8 <memcpy+0x14>
 80a2fbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a2fc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a2fc6:	e7f8      	b.n	80a2fba <memcpy+0x6>
 80a2fc8:	bd10      	pop	{r4, pc}

080a2fca <memset>:
 80a2fca:	4603      	mov	r3, r0
 80a2fcc:	4402      	add	r2, r0
 80a2fce:	4293      	cmp	r3, r2
 80a2fd0:	d002      	beq.n	80a2fd8 <memset+0xe>
 80a2fd2:	f803 1b01 	strb.w	r1, [r3], #1
 80a2fd6:	e7fa      	b.n	80a2fce <memset+0x4>
 80a2fd8:	4770      	bx	lr
	...

080a2fdc <srand>:
 80a2fdc:	b538      	push	{r3, r4, r5, lr}
 80a2fde:	4b12      	ldr	r3, [pc, #72]	; (80a3028 <srand+0x4c>)
 80a2fe0:	4605      	mov	r5, r0
 80a2fe2:	681c      	ldr	r4, [r3, #0]
 80a2fe4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2fe6:	b9d3      	cbnz	r3, 80a301e <srand+0x42>
 80a2fe8:	2018      	movs	r0, #24
 80a2fea:	f7fd fe9f 	bl	80a0d2c <malloc>
 80a2fee:	f243 330e 	movw	r3, #13070	; 0x330e
 80a2ff2:	63a0      	str	r0, [r4, #56]	; 0x38
 80a2ff4:	8003      	strh	r3, [r0, #0]
 80a2ff6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a2ffa:	8043      	strh	r3, [r0, #2]
 80a2ffc:	f241 2334 	movw	r3, #4660	; 0x1234
 80a3000:	8083      	strh	r3, [r0, #4]
 80a3002:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a3006:	80c3      	strh	r3, [r0, #6]
 80a3008:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a300c:	8103      	strh	r3, [r0, #8]
 80a300e:	2305      	movs	r3, #5
 80a3010:	8143      	strh	r3, [r0, #10]
 80a3012:	230b      	movs	r3, #11
 80a3014:	8183      	strh	r3, [r0, #12]
 80a3016:	2201      	movs	r2, #1
 80a3018:	2300      	movs	r3, #0
 80a301a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a301e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a3020:	2200      	movs	r2, #0
 80a3022:	611d      	str	r5, [r3, #16]
 80a3024:	615a      	str	r2, [r3, #20]
 80a3026:	bd38      	pop	{r3, r4, r5, pc}
 80a3028:	20000140 	.word	0x20000140

080a302c <strcmp>:
 80a302c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a3030:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a3034:	2a01      	cmp	r2, #1
 80a3036:	bf28      	it	cs
 80a3038:	429a      	cmpcs	r2, r3
 80a303a:	d0f7      	beq.n	80a302c <strcmp>
 80a303c:	1ad0      	subs	r0, r2, r3
 80a303e:	4770      	bx	lr

080a3040 <strcpy>:
 80a3040:	4603      	mov	r3, r0
 80a3042:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a3046:	f803 2b01 	strb.w	r2, [r3], #1
 80a304a:	2a00      	cmp	r2, #0
 80a304c:	d1f9      	bne.n	80a3042 <strcpy+0x2>
 80a304e:	4770      	bx	lr

080a3050 <strdup>:
 80a3050:	4b02      	ldr	r3, [pc, #8]	; (80a305c <strdup+0xc>)
 80a3052:	4601      	mov	r1, r0
 80a3054:	6818      	ldr	r0, [r3, #0]
 80a3056:	f000 b803 	b.w	80a3060 <_strdup_r>
 80a305a:	bf00      	nop
 80a305c:	20000140 	.word	0x20000140

080a3060 <_strdup_r>:
 80a3060:	b570      	push	{r4, r5, r6, lr}
 80a3062:	4606      	mov	r6, r0
 80a3064:	4608      	mov	r0, r1
 80a3066:	460c      	mov	r4, r1
 80a3068:	f000 f80d 	bl	80a3086 <strlen>
 80a306c:	1c45      	adds	r5, r0, #1
 80a306e:	4629      	mov	r1, r5
 80a3070:	4630      	mov	r0, r6
 80a3072:	f7fd fe8b 	bl	80a0d8c <_malloc_r>
 80a3076:	4606      	mov	r6, r0
 80a3078:	b118      	cbz	r0, 80a3082 <_strdup_r+0x22>
 80a307a:	462a      	mov	r2, r5
 80a307c:	4621      	mov	r1, r4
 80a307e:	f7ff ff99 	bl	80a2fb4 <memcpy>
 80a3082:	4630      	mov	r0, r6
 80a3084:	bd70      	pop	{r4, r5, r6, pc}

080a3086 <strlen>:
 80a3086:	4603      	mov	r3, r0
 80a3088:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a308c:	2a00      	cmp	r2, #0
 80a308e:	d1fb      	bne.n	80a3088 <strlen+0x2>
 80a3090:	1a18      	subs	r0, r3, r0
 80a3092:	3801      	subs	r0, #1
 80a3094:	4770      	bx	lr

080a3096 <strncmp>:
 80a3096:	b530      	push	{r4, r5, lr}
 80a3098:	b182      	cbz	r2, 80a30bc <strncmp+0x26>
 80a309a:	1e45      	subs	r5, r0, #1
 80a309c:	3901      	subs	r1, #1
 80a309e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80a30a2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a30a6:	42a3      	cmp	r3, r4
 80a30a8:	d106      	bne.n	80a30b8 <strncmp+0x22>
 80a30aa:	43ec      	mvns	r4, r5
 80a30ac:	4414      	add	r4, r2
 80a30ae:	42e0      	cmn	r0, r4
 80a30b0:	d001      	beq.n	80a30b6 <strncmp+0x20>
 80a30b2:	2b00      	cmp	r3, #0
 80a30b4:	d1f3      	bne.n	80a309e <strncmp+0x8>
 80a30b6:	461c      	mov	r4, r3
 80a30b8:	1b18      	subs	r0, r3, r4
 80a30ba:	bd30      	pop	{r4, r5, pc}
 80a30bc:	4610      	mov	r0, r2
 80a30be:	bd30      	pop	{r4, r5, pc}

080a30c0 <strncpy>:
 80a30c0:	4603      	mov	r3, r0
 80a30c2:	b510      	push	{r4, lr}
 80a30c4:	b142      	cbz	r2, 80a30d8 <strncpy+0x18>
 80a30c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a30ca:	3a01      	subs	r2, #1
 80a30cc:	f803 4b01 	strb.w	r4, [r3], #1
 80a30d0:	2c00      	cmp	r4, #0
 80a30d2:	d1f7      	bne.n	80a30c4 <strncpy+0x4>
 80a30d4:	441a      	add	r2, r3
 80a30d6:	e000      	b.n	80a30da <strncpy+0x1a>
 80a30d8:	bd10      	pop	{r4, pc}
 80a30da:	4293      	cmp	r3, r2
 80a30dc:	d002      	beq.n	80a30e4 <strncpy+0x24>
 80a30de:	f803 4b01 	strb.w	r4, [r3], #1
 80a30e2:	e7fa      	b.n	80a30da <strncpy+0x1a>
 80a30e4:	bd10      	pop	{r4, pc}
	...

080a30e8 <_strtol_r>:
 80a30e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a30ec:	460f      	mov	r7, r1
 80a30ee:	4680      	mov	r8, r0
 80a30f0:	483f      	ldr	r0, [pc, #252]	; (80a31f0 <_strtol_r+0x108>)
 80a30f2:	f8d0 9000 	ldr.w	r9, [r0]
 80a30f6:	463d      	mov	r5, r7
 80a30f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a30fc:	eb09 0004 	add.w	r0, r9, r4
 80a3100:	7840      	ldrb	r0, [r0, #1]
 80a3102:	f000 0008 	and.w	r0, r0, #8
 80a3106:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80a310a:	b108      	cbz	r0, 80a3110 <_strtol_r+0x28>
 80a310c:	462f      	mov	r7, r5
 80a310e:	e7f2      	b.n	80a30f6 <_strtol_r+0xe>
 80a3110:	2c2d      	cmp	r4, #45	; 0x2d
 80a3112:	d103      	bne.n	80a311c <_strtol_r+0x34>
 80a3114:	1cbd      	adds	r5, r7, #2
 80a3116:	787c      	ldrb	r4, [r7, #1]
 80a3118:	2601      	movs	r6, #1
 80a311a:	e003      	b.n	80a3124 <_strtol_r+0x3c>
 80a311c:	2c2b      	cmp	r4, #43	; 0x2b
 80a311e:	bf04      	itt	eq
 80a3120:	787c      	ldrbeq	r4, [r7, #1]
 80a3122:	1cbd      	addeq	r5, r7, #2
 80a3124:	b113      	cbz	r3, 80a312c <_strtol_r+0x44>
 80a3126:	2b10      	cmp	r3, #16
 80a3128:	d10a      	bne.n	80a3140 <_strtol_r+0x58>
 80a312a:	e05b      	b.n	80a31e4 <_strtol_r+0xfc>
 80a312c:	2c30      	cmp	r4, #48	; 0x30
 80a312e:	d157      	bne.n	80a31e0 <_strtol_r+0xf8>
 80a3130:	7828      	ldrb	r0, [r5, #0]
 80a3132:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a3136:	2858      	cmp	r0, #88	; 0x58
 80a3138:	d14d      	bne.n	80a31d6 <_strtol_r+0xee>
 80a313a:	786c      	ldrb	r4, [r5, #1]
 80a313c:	2310      	movs	r3, #16
 80a313e:	3502      	adds	r5, #2
 80a3140:	2e00      	cmp	r6, #0
 80a3142:	bf14      	ite	ne
 80a3144:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80a3148:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80a314c:	fbbc faf3 	udiv	sl, ip, r3
 80a3150:	2700      	movs	r7, #0
 80a3152:	4638      	mov	r0, r7
 80a3154:	fb03 cc1a 	mls	ip, r3, sl, ip
 80a3158:	eb09 0e04 	add.w	lr, r9, r4
 80a315c:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a3160:	f01e 0f04 	tst.w	lr, #4
 80a3164:	d001      	beq.n	80a316a <_strtol_r+0x82>
 80a3166:	3c30      	subs	r4, #48	; 0x30
 80a3168:	e00b      	b.n	80a3182 <_strtol_r+0x9a>
 80a316a:	f01e 0e03 	ands.w	lr, lr, #3
 80a316e:	d01b      	beq.n	80a31a8 <_strtol_r+0xc0>
 80a3170:	f1be 0f01 	cmp.w	lr, #1
 80a3174:	bf0c      	ite	eq
 80a3176:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a317a:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a317e:	ebce 0404 	rsb	r4, lr, r4
 80a3182:	42a3      	cmp	r3, r4
 80a3184:	dd10      	ble.n	80a31a8 <_strtol_r+0xc0>
 80a3186:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 80a318a:	d00a      	beq.n	80a31a2 <_strtol_r+0xba>
 80a318c:	4550      	cmp	r0, sl
 80a318e:	d806      	bhi.n	80a319e <_strtol_r+0xb6>
 80a3190:	d101      	bne.n	80a3196 <_strtol_r+0xae>
 80a3192:	4564      	cmp	r4, ip
 80a3194:	dc03      	bgt.n	80a319e <_strtol_r+0xb6>
 80a3196:	fb03 4000 	mla	r0, r3, r0, r4
 80a319a:	2701      	movs	r7, #1
 80a319c:	e001      	b.n	80a31a2 <_strtol_r+0xba>
 80a319e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80a31a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a31a6:	e7d7      	b.n	80a3158 <_strtol_r+0x70>
 80a31a8:	1c7b      	adds	r3, r7, #1
 80a31aa:	d10c      	bne.n	80a31c6 <_strtol_r+0xde>
 80a31ac:	2e00      	cmp	r6, #0
 80a31ae:	f04f 0322 	mov.w	r3, #34	; 0x22
 80a31b2:	bf14      	ite	ne
 80a31b4:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80a31b8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a31bc:	f8c8 3000 	str.w	r3, [r8]
 80a31c0:	b92a      	cbnz	r2, 80a31ce <_strtol_r+0xe6>
 80a31c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a31c6:	b106      	cbz	r6, 80a31ca <_strtol_r+0xe2>
 80a31c8:	4240      	negs	r0, r0
 80a31ca:	b172      	cbz	r2, 80a31ea <_strtol_r+0x102>
 80a31cc:	b107      	cbz	r7, 80a31d0 <_strtol_r+0xe8>
 80a31ce:	1e69      	subs	r1, r5, #1
 80a31d0:	6011      	str	r1, [r2, #0]
 80a31d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a31d6:	2430      	movs	r4, #48	; 0x30
 80a31d8:	2b00      	cmp	r3, #0
 80a31da:	d1b1      	bne.n	80a3140 <_strtol_r+0x58>
 80a31dc:	2308      	movs	r3, #8
 80a31de:	e7af      	b.n	80a3140 <_strtol_r+0x58>
 80a31e0:	230a      	movs	r3, #10
 80a31e2:	e7ad      	b.n	80a3140 <_strtol_r+0x58>
 80a31e4:	2c30      	cmp	r4, #48	; 0x30
 80a31e6:	d0a3      	beq.n	80a3130 <_strtol_r+0x48>
 80a31e8:	e7aa      	b.n	80a3140 <_strtol_r+0x58>
 80a31ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a31ee:	bf00      	nop
 80a31f0:	200000dc 	.word	0x200000dc

080a31f4 <strtol>:
 80a31f4:	4613      	mov	r3, r2
 80a31f6:	460a      	mov	r2, r1
 80a31f8:	4601      	mov	r1, r0
 80a31fa:	4802      	ldr	r0, [pc, #8]	; (80a3204 <strtol+0x10>)
 80a31fc:	6800      	ldr	r0, [r0, #0]
 80a31fe:	f7ff bf73 	b.w	80a30e8 <_strtol_r>
 80a3202:	bf00      	nop
 80a3204:	20000140 	.word	0x20000140

080a3208 <_strtoul_r>:
 80a3208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a320c:	460e      	mov	r6, r1
 80a320e:	4680      	mov	r8, r0
 80a3210:	483b      	ldr	r0, [pc, #236]	; (80a3300 <_strtoul_r+0xf8>)
 80a3212:	f8d0 9000 	ldr.w	r9, [r0]
 80a3216:	4635      	mov	r5, r6
 80a3218:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a321c:	eb09 0004 	add.w	r0, r9, r4
 80a3220:	7840      	ldrb	r0, [r0, #1]
 80a3222:	f000 0008 	and.w	r0, r0, #8
 80a3226:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 80a322a:	b108      	cbz	r0, 80a3230 <_strtoul_r+0x28>
 80a322c:	462e      	mov	r6, r5
 80a322e:	e7f2      	b.n	80a3216 <_strtoul_r+0xe>
 80a3230:	2c2d      	cmp	r4, #45	; 0x2d
 80a3232:	d103      	bne.n	80a323c <_strtoul_r+0x34>
 80a3234:	1cb5      	adds	r5, r6, #2
 80a3236:	7874      	ldrb	r4, [r6, #1]
 80a3238:	2701      	movs	r7, #1
 80a323a:	e003      	b.n	80a3244 <_strtoul_r+0x3c>
 80a323c:	2c2b      	cmp	r4, #43	; 0x2b
 80a323e:	bf04      	itt	eq
 80a3240:	7874      	ldrbeq	r4, [r6, #1]
 80a3242:	1cb5      	addeq	r5, r6, #2
 80a3244:	b113      	cbz	r3, 80a324c <_strtoul_r+0x44>
 80a3246:	2b10      	cmp	r3, #16
 80a3248:	d10a      	bne.n	80a3260 <_strtoul_r+0x58>
 80a324a:	e053      	b.n	80a32f4 <_strtoul_r+0xec>
 80a324c:	2c30      	cmp	r4, #48	; 0x30
 80a324e:	d14f      	bne.n	80a32f0 <_strtoul_r+0xe8>
 80a3250:	7828      	ldrb	r0, [r5, #0]
 80a3252:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a3256:	2858      	cmp	r0, #88	; 0x58
 80a3258:	d145      	bne.n	80a32e6 <_strtoul_r+0xde>
 80a325a:	786c      	ldrb	r4, [r5, #1]
 80a325c:	2310      	movs	r3, #16
 80a325e:	3502      	adds	r5, #2
 80a3260:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a3264:	fbbc fcf3 	udiv	ip, ip, r3
 80a3268:	fb03 fa0c 	mul.w	sl, r3, ip
 80a326c:	2600      	movs	r6, #0
 80a326e:	ea6f 0a0a 	mvn.w	sl, sl
 80a3272:	4630      	mov	r0, r6
 80a3274:	eb09 0e04 	add.w	lr, r9, r4
 80a3278:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a327c:	f01e 0f04 	tst.w	lr, #4
 80a3280:	d001      	beq.n	80a3286 <_strtoul_r+0x7e>
 80a3282:	3c30      	subs	r4, #48	; 0x30
 80a3284:	e00b      	b.n	80a329e <_strtoul_r+0x96>
 80a3286:	f01e 0e03 	ands.w	lr, lr, #3
 80a328a:	d01a      	beq.n	80a32c2 <_strtoul_r+0xba>
 80a328c:	f1be 0f01 	cmp.w	lr, #1
 80a3290:	bf0c      	ite	eq
 80a3292:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a3296:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a329a:	ebce 0404 	rsb	r4, lr, r4
 80a329e:	42a3      	cmp	r3, r4
 80a32a0:	dd0f      	ble.n	80a32c2 <_strtoul_r+0xba>
 80a32a2:	2e00      	cmp	r6, #0
 80a32a4:	db08      	blt.n	80a32b8 <_strtoul_r+0xb0>
 80a32a6:	4560      	cmp	r0, ip
 80a32a8:	d806      	bhi.n	80a32b8 <_strtoul_r+0xb0>
 80a32aa:	d101      	bne.n	80a32b0 <_strtoul_r+0xa8>
 80a32ac:	4554      	cmp	r4, sl
 80a32ae:	dc03      	bgt.n	80a32b8 <_strtoul_r+0xb0>
 80a32b0:	fb03 4000 	mla	r0, r3, r0, r4
 80a32b4:	2601      	movs	r6, #1
 80a32b6:	e001      	b.n	80a32bc <_strtoul_r+0xb4>
 80a32b8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80a32bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a32c0:	e7d8      	b.n	80a3274 <_strtoul_r+0x6c>
 80a32c2:	2e00      	cmp	r6, #0
 80a32c4:	da07      	bge.n	80a32d6 <_strtoul_r+0xce>
 80a32c6:	2322      	movs	r3, #34	; 0x22
 80a32c8:	f8c8 3000 	str.w	r3, [r8]
 80a32cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a32d0:	b92a      	cbnz	r2, 80a32de <_strtoul_r+0xd6>
 80a32d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a32d6:	b107      	cbz	r7, 80a32da <_strtoul_r+0xd2>
 80a32d8:	4240      	negs	r0, r0
 80a32da:	b172      	cbz	r2, 80a32fa <_strtoul_r+0xf2>
 80a32dc:	b106      	cbz	r6, 80a32e0 <_strtoul_r+0xd8>
 80a32de:	1e69      	subs	r1, r5, #1
 80a32e0:	6011      	str	r1, [r2, #0]
 80a32e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a32e6:	2430      	movs	r4, #48	; 0x30
 80a32e8:	2b00      	cmp	r3, #0
 80a32ea:	d1b9      	bne.n	80a3260 <_strtoul_r+0x58>
 80a32ec:	2308      	movs	r3, #8
 80a32ee:	e7b7      	b.n	80a3260 <_strtoul_r+0x58>
 80a32f0:	230a      	movs	r3, #10
 80a32f2:	e7b5      	b.n	80a3260 <_strtoul_r+0x58>
 80a32f4:	2c30      	cmp	r4, #48	; 0x30
 80a32f6:	d0ab      	beq.n	80a3250 <_strtoul_r+0x48>
 80a32f8:	e7b2      	b.n	80a3260 <_strtoul_r+0x58>
 80a32fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a32fe:	bf00      	nop
 80a3300:	200000dc 	.word	0x200000dc

080a3304 <strtoul>:
 80a3304:	4613      	mov	r3, r2
 80a3306:	460a      	mov	r2, r1
 80a3308:	4601      	mov	r1, r0
 80a330a:	4802      	ldr	r0, [pc, #8]	; (80a3314 <strtoul+0x10>)
 80a330c:	6800      	ldr	r0, [r0, #0]
 80a330e:	f7ff bf7b 	b.w	80a3208 <_strtoul_r>
 80a3312:	bf00      	nop
 80a3314:	20000140 	.word	0x20000140

080a3318 <__tzcalc_limits>:
 80a3318:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a331c:	4604      	mov	r4, r0
 80a331e:	f000 fa6f 	bl	80a3800 <__gettzinfo>
 80a3322:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80a3326:	429c      	cmp	r4, r3
 80a3328:	f340 8096 	ble.w	80a3458 <__tzcalc_limits+0x140>
 80a332c:	f240 156d 	movw	r5, #365	; 0x16d
 80a3330:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80a3334:	18e3      	adds	r3, r4, r3
 80a3336:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 80a333a:	109b      	asrs	r3, r3, #2
 80a333c:	fb05 3502 	mla	r5, r5, r2, r3
 80a3340:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 80a3344:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80a3348:	fb92 f3f3 	sdiv	r3, r2, r3
 80a334c:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80a3350:	442b      	add	r3, r5
 80a3352:	18a5      	adds	r5, r4, r2
 80a3354:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a3358:	fb94 f7f2 	sdiv	r7, r4, r2
 80a335c:	fb95 f5f2 	sdiv	r5, r5, r2
 80a3360:	fb02 4717 	mls	r7, r2, r7, r4
 80a3364:	441d      	add	r5, r3
 80a3366:	2364      	movs	r3, #100	; 0x64
 80a3368:	fb94 f6f3 	sdiv	r6, r4, r3
 80a336c:	fab7 fe87 	clz	lr, r7
 80a3370:	4601      	mov	r1, r0
 80a3372:	fb03 4616 	mls	r6, r3, r6, r4
 80a3376:	f100 0338 	add.w	r3, r0, #56	; 0x38
 80a337a:	9301      	str	r3, [sp, #4]
 80a337c:	f004 0303 	and.w	r3, r4, #3
 80a3380:	6044      	str	r4, [r0, #4]
 80a3382:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80a3386:	9300      	str	r3, [sp, #0]
 80a3388:	f04f 0c07 	mov.w	ip, #7
 80a338c:	7a0b      	ldrb	r3, [r1, #8]
 80a338e:	2b4a      	cmp	r3, #74	; 0x4a
 80a3390:	d10e      	bne.n	80a33b0 <__tzcalc_limits+0x98>
 80a3392:	694b      	ldr	r3, [r1, #20]
 80a3394:	9a00      	ldr	r2, [sp, #0]
 80a3396:	18ec      	adds	r4, r5, r3
 80a3398:	b902      	cbnz	r2, 80a339c <__tzcalc_limits+0x84>
 80a339a:	b906      	cbnz	r6, 80a339e <__tzcalc_limits+0x86>
 80a339c:	b927      	cbnz	r7, 80a33a8 <__tzcalc_limits+0x90>
 80a339e:	2b3b      	cmp	r3, #59	; 0x3b
 80a33a0:	bfd4      	ite	le
 80a33a2:	2300      	movle	r3, #0
 80a33a4:	2301      	movgt	r3, #1
 80a33a6:	e000      	b.n	80a33aa <__tzcalc_limits+0x92>
 80a33a8:	2300      	movs	r3, #0
 80a33aa:	4423      	add	r3, r4
 80a33ac:	3b01      	subs	r3, #1
 80a33ae:	e03f      	b.n	80a3430 <__tzcalc_limits+0x118>
 80a33b0:	2b44      	cmp	r3, #68	; 0x44
 80a33b2:	d102      	bne.n	80a33ba <__tzcalc_limits+0xa2>
 80a33b4:	694b      	ldr	r3, [r1, #20]
 80a33b6:	442b      	add	r3, r5
 80a33b8:	e03a      	b.n	80a3430 <__tzcalc_limits+0x118>
 80a33ba:	9b00      	ldr	r3, [sp, #0]
 80a33bc:	b92b      	cbnz	r3, 80a33ca <__tzcalc_limits+0xb2>
 80a33be:	2e00      	cmp	r6, #0
 80a33c0:	bf0c      	ite	eq
 80a33c2:	46f0      	moveq	r8, lr
 80a33c4:	f04f 0801 	movne.w	r8, #1
 80a33c8:	e000      	b.n	80a33cc <__tzcalc_limits+0xb4>
 80a33ca:	46f0      	mov	r8, lr
 80a33cc:	46a9      	mov	r9, r5
 80a33ce:	4b24      	ldr	r3, [pc, #144]	; (80a3460 <__tzcalc_limits+0x148>)
 80a33d0:	2230      	movs	r2, #48	; 0x30
 80a33d2:	fb02 3808 	mla	r8, r2, r8, r3
 80a33d6:	68cc      	ldr	r4, [r1, #12]
 80a33d8:	f1a8 0a04 	sub.w	sl, r8, #4
 80a33dc:	2301      	movs	r3, #1
 80a33de:	42a3      	cmp	r3, r4
 80a33e0:	da04      	bge.n	80a33ec <__tzcalc_limits+0xd4>
 80a33e2:	f85a bf04 	ldr.w	fp, [sl, #4]!
 80a33e6:	3301      	adds	r3, #1
 80a33e8:	44d9      	add	r9, fp
 80a33ea:	e7f8      	b.n	80a33de <__tzcalc_limits+0xc6>
 80a33ec:	f109 0304 	add.w	r3, r9, #4
 80a33f0:	fb93 fbfc 	sdiv	fp, r3, ip
 80a33f4:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 80a33f8:	ebca 0a03 	rsb	sl, sl, r3
 80a33fc:	694b      	ldr	r3, [r1, #20]
 80a33fe:	2c01      	cmp	r4, #1
 80a3400:	bfb8      	it	lt
 80a3402:	2401      	movlt	r4, #1
 80a3404:	ebb3 0a0a 	subs.w	sl, r3, sl
 80a3408:	690b      	ldr	r3, [r1, #16]
 80a340a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80a340e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80a3412:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80a3416:	bf48      	it	mi
 80a3418:	f10a 0a07 	addmi.w	sl, sl, #7
 80a341c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a3420:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 80a3424:	4453      	add	r3, sl
 80a3426:	42a3      	cmp	r3, r4
 80a3428:	db01      	blt.n	80a342e <__tzcalc_limits+0x116>
 80a342a:	3b07      	subs	r3, #7
 80a342c:	e7fb      	b.n	80a3426 <__tzcalc_limits+0x10e>
 80a342e:	444b      	add	r3, r9
 80a3430:	698c      	ldr	r4, [r1, #24]
 80a3432:	4a0c      	ldr	r2, [pc, #48]	; (80a3464 <__tzcalc_limits+0x14c>)
 80a3434:	fb02 4303 	mla	r3, r2, r3, r4
 80a3438:	6a0c      	ldr	r4, [r1, #32]
 80a343a:	4423      	add	r3, r4
 80a343c:	f841 3f1c 	str.w	r3, [r1, #28]!
 80a3440:	9b01      	ldr	r3, [sp, #4]
 80a3442:	4299      	cmp	r1, r3
 80a3444:	d1a2      	bne.n	80a338c <__tzcalc_limits+0x74>
 80a3446:	69c3      	ldr	r3, [r0, #28]
 80a3448:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80a344a:	4293      	cmp	r3, r2
 80a344c:	bfac      	ite	ge
 80a344e:	2300      	movge	r3, #0
 80a3450:	2301      	movlt	r3, #1
 80a3452:	6003      	str	r3, [r0, #0]
 80a3454:	2001      	movs	r0, #1
 80a3456:	e000      	b.n	80a345a <__tzcalc_limits+0x142>
 80a3458:	2000      	movs	r0, #0
 80a345a:	b003      	add	sp, #12
 80a345c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3460:	080a3ea4 	.word	0x080a3ea4
 80a3464:	00015180 	.word	0x00015180

080a3468 <__tz_lock>:
 80a3468:	4770      	bx	lr

080a346a <__tz_unlock>:
 80a346a:	4770      	bx	lr

080a346c <_tzset_unlocked>:
 80a346c:	4b01      	ldr	r3, [pc, #4]	; (80a3474 <_tzset_unlocked+0x8>)
 80a346e:	6818      	ldr	r0, [r3, #0]
 80a3470:	f000 b802 	b.w	80a3478 <_tzset_unlocked_r>
 80a3474:	20000140 	.word	0x20000140

080a3478 <_tzset_unlocked_r>:
 80a3478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a347c:	b08d      	sub	sp, #52	; 0x34
 80a347e:	4607      	mov	r7, r0
 80a3480:	f000 f9be 	bl	80a3800 <__gettzinfo>
 80a3484:	49b0      	ldr	r1, [pc, #704]	; (80a3748 <_tzset_unlocked_r+0x2d0>)
 80a3486:	4604      	mov	r4, r0
 80a3488:	4638      	mov	r0, r7
 80a348a:	f000 f9b1 	bl	80a37f0 <_getenv_r>
 80a348e:	4eaf      	ldr	r6, [pc, #700]	; (80a374c <_tzset_unlocked_r+0x2d4>)
 80a3490:	4605      	mov	r5, r0
 80a3492:	b960      	cbnz	r0, 80a34ae <_tzset_unlocked_r+0x36>
 80a3494:	4bae      	ldr	r3, [pc, #696]	; (80a3750 <_tzset_unlocked_r+0x2d8>)
 80a3496:	4aaf      	ldr	r2, [pc, #700]	; (80a3754 <_tzset_unlocked_r+0x2dc>)
 80a3498:	6018      	str	r0, [r3, #0]
 80a349a:	4baf      	ldr	r3, [pc, #700]	; (80a3758 <_tzset_unlocked_r+0x2e0>)
 80a349c:	6018      	str	r0, [r3, #0]
 80a349e:	4baf      	ldr	r3, [pc, #700]	; (80a375c <_tzset_unlocked_r+0x2e4>)
 80a34a0:	6830      	ldr	r0, [r6, #0]
 80a34a2:	601a      	str	r2, [r3, #0]
 80a34a4:	605a      	str	r2, [r3, #4]
 80a34a6:	f7fd fc49 	bl	80a0d3c <free>
 80a34aa:	6035      	str	r5, [r6, #0]
 80a34ac:	e148      	b.n	80a3740 <_tzset_unlocked_r+0x2c8>
 80a34ae:	6831      	ldr	r1, [r6, #0]
 80a34b0:	b979      	cbnz	r1, 80a34d2 <_tzset_unlocked_r+0x5a>
 80a34b2:	6830      	ldr	r0, [r6, #0]
 80a34b4:	f7fd fc42 	bl	80a0d3c <free>
 80a34b8:	4628      	mov	r0, r5
 80a34ba:	f7ff fde4 	bl	80a3086 <strlen>
 80a34be:	1c41      	adds	r1, r0, #1
 80a34c0:	4638      	mov	r0, r7
 80a34c2:	f7fd fc63 	bl	80a0d8c <_malloc_r>
 80a34c6:	6030      	str	r0, [r6, #0]
 80a34c8:	b148      	cbz	r0, 80a34de <_tzset_unlocked_r+0x66>
 80a34ca:	4629      	mov	r1, r5
 80a34cc:	f7ff fdb8 	bl	80a3040 <strcpy>
 80a34d0:	e005      	b.n	80a34de <_tzset_unlocked_r+0x66>
 80a34d2:	f7ff fdab 	bl	80a302c <strcmp>
 80a34d6:	2800      	cmp	r0, #0
 80a34d8:	f000 8132 	beq.w	80a3740 <_tzset_unlocked_r+0x2c8>
 80a34dc:	e7e9      	b.n	80a34b2 <_tzset_unlocked_r+0x3a>
 80a34de:	782b      	ldrb	r3, [r5, #0]
 80a34e0:	ae0a      	add	r6, sp, #40	; 0x28
 80a34e2:	2b3a      	cmp	r3, #58	; 0x3a
 80a34e4:	bf08      	it	eq
 80a34e6:	3501      	addeq	r5, #1
 80a34e8:	4633      	mov	r3, r6
 80a34ea:	4a9d      	ldr	r2, [pc, #628]	; (80a3760 <_tzset_unlocked_r+0x2e8>)
 80a34ec:	499d      	ldr	r1, [pc, #628]	; (80a3764 <_tzset_unlocked_r+0x2ec>)
 80a34ee:	4628      	mov	r0, r5
 80a34f0:	f7fd fc34 	bl	80a0d5c <siscanf>
 80a34f4:	2800      	cmp	r0, #0
 80a34f6:	f340 8123 	ble.w	80a3740 <_tzset_unlocked_r+0x2c8>
 80a34fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a34fc:	18ef      	adds	r7, r5, r3
 80a34fe:	5ceb      	ldrb	r3, [r5, r3]
 80a3500:	2b2d      	cmp	r3, #45	; 0x2d
 80a3502:	d103      	bne.n	80a350c <_tzset_unlocked_r+0x94>
 80a3504:	3701      	adds	r7, #1
 80a3506:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80a350a:	e003      	b.n	80a3514 <_tzset_unlocked_r+0x9c>
 80a350c:	2b2b      	cmp	r3, #43	; 0x2b
 80a350e:	bf08      	it	eq
 80a3510:	3701      	addeq	r7, #1
 80a3512:	2501      	movs	r5, #1
 80a3514:	f10d 0a20 	add.w	sl, sp, #32
 80a3518:	f10d 0b1e 	add.w	fp, sp, #30
 80a351c:	f04f 0800 	mov.w	r8, #0
 80a3520:	9603      	str	r6, [sp, #12]
 80a3522:	f8cd a008 	str.w	sl, [sp, #8]
 80a3526:	9601      	str	r6, [sp, #4]
 80a3528:	f8cd b000 	str.w	fp, [sp]
 80a352c:	4633      	mov	r3, r6
 80a352e:	aa07      	add	r2, sp, #28
 80a3530:	498d      	ldr	r1, [pc, #564]	; (80a3768 <_tzset_unlocked_r+0x2f0>)
 80a3532:	4638      	mov	r0, r7
 80a3534:	f8ad 801e 	strh.w	r8, [sp, #30]
 80a3538:	f8ad 8020 	strh.w	r8, [sp, #32]
 80a353c:	f7fd fc0e 	bl	80a0d5c <siscanf>
 80a3540:	4540      	cmp	r0, r8
 80a3542:	f340 80fd 	ble.w	80a3740 <_tzset_unlocked_r+0x2c8>
 80a3546:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a354a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a354e:	213c      	movs	r1, #60	; 0x3c
 80a3550:	fb01 3302 	mla	r3, r1, r2, r3
 80a3554:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a3558:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a355c:	fb01 3302 	mla	r3, r1, r2, r3
 80a3560:	435d      	muls	r5, r3
 80a3562:	4b7f      	ldr	r3, [pc, #508]	; (80a3760 <_tzset_unlocked_r+0x2e8>)
 80a3564:	6225      	str	r5, [r4, #32]
 80a3566:	4d7d      	ldr	r5, [pc, #500]	; (80a375c <_tzset_unlocked_r+0x2e4>)
 80a3568:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80a3774 <_tzset_unlocked_r+0x2fc>
 80a356c:	602b      	str	r3, [r5, #0]
 80a356e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a3570:	464a      	mov	r2, r9
 80a3572:	441f      	add	r7, r3
 80a3574:	497b      	ldr	r1, [pc, #492]	; (80a3764 <_tzset_unlocked_r+0x2ec>)
 80a3576:	4633      	mov	r3, r6
 80a3578:	4638      	mov	r0, r7
 80a357a:	f7fd fbef 	bl	80a0d5c <siscanf>
 80a357e:	4540      	cmp	r0, r8
 80a3580:	dc08      	bgt.n	80a3594 <_tzset_unlocked_r+0x11c>
 80a3582:	682b      	ldr	r3, [r5, #0]
 80a3584:	6a22      	ldr	r2, [r4, #32]
 80a3586:	606b      	str	r3, [r5, #4]
 80a3588:	4b71      	ldr	r3, [pc, #452]	; (80a3750 <_tzset_unlocked_r+0x2d8>)
 80a358a:	601a      	str	r2, [r3, #0]
 80a358c:	4b72      	ldr	r3, [pc, #456]	; (80a3758 <_tzset_unlocked_r+0x2e0>)
 80a358e:	f8c3 8000 	str.w	r8, [r3]
 80a3592:	e0d5      	b.n	80a3740 <_tzset_unlocked_r+0x2c8>
 80a3594:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a3596:	f8c5 9004 	str.w	r9, [r5, #4]
 80a359a:	18fd      	adds	r5, r7, r3
 80a359c:	5cfb      	ldrb	r3, [r7, r3]
 80a359e:	2b2d      	cmp	r3, #45	; 0x2d
 80a35a0:	d103      	bne.n	80a35aa <_tzset_unlocked_r+0x132>
 80a35a2:	3501      	adds	r5, #1
 80a35a4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80a35a8:	e003      	b.n	80a35b2 <_tzset_unlocked_r+0x13a>
 80a35aa:	2b2b      	cmp	r3, #43	; 0x2b
 80a35ac:	bf08      	it	eq
 80a35ae:	3501      	addeq	r5, #1
 80a35b0:	2701      	movs	r7, #1
 80a35b2:	2300      	movs	r3, #0
 80a35b4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a35b8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a35bc:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a35c0:	930a      	str	r3, [sp, #40]	; 0x28
 80a35c2:	9603      	str	r6, [sp, #12]
 80a35c4:	f8cd a008 	str.w	sl, [sp, #8]
 80a35c8:	9601      	str	r6, [sp, #4]
 80a35ca:	f8cd b000 	str.w	fp, [sp]
 80a35ce:	4633      	mov	r3, r6
 80a35d0:	aa07      	add	r2, sp, #28
 80a35d2:	4965      	ldr	r1, [pc, #404]	; (80a3768 <_tzset_unlocked_r+0x2f0>)
 80a35d4:	4628      	mov	r0, r5
 80a35d6:	f7fd fbc1 	bl	80a0d5c <siscanf>
 80a35da:	2800      	cmp	r0, #0
 80a35dc:	dc04      	bgt.n	80a35e8 <_tzset_unlocked_r+0x170>
 80a35de:	6a23      	ldr	r3, [r4, #32]
 80a35e0:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80a35e4:	63e3      	str	r3, [r4, #60]	; 0x3c
 80a35e6:	e00e      	b.n	80a3606 <_tzset_unlocked_r+0x18e>
 80a35e8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a35ec:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a35f0:	213c      	movs	r1, #60	; 0x3c
 80a35f2:	fb01 3302 	mla	r3, r1, r2, r3
 80a35f6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a35fa:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a35fe:	fb01 3302 	mla	r3, r1, r2, r3
 80a3602:	435f      	muls	r7, r3
 80a3604:	63e7      	str	r7, [r4, #60]	; 0x3c
 80a3606:	4627      	mov	r7, r4
 80a3608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a360a:	f04f 0900 	mov.w	r9, #0
 80a360e:	441d      	add	r5, r3
 80a3610:	782b      	ldrb	r3, [r5, #0]
 80a3612:	2b2c      	cmp	r3, #44	; 0x2c
 80a3614:	bf08      	it	eq
 80a3616:	3501      	addeq	r5, #1
 80a3618:	f895 8000 	ldrb.w	r8, [r5]
 80a361c:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80a3620:	d126      	bne.n	80a3670 <_tzset_unlocked_r+0x1f8>
 80a3622:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80a3626:	9302      	str	r3, [sp, #8]
 80a3628:	ab09      	add	r3, sp, #36	; 0x24
 80a362a:	9300      	str	r3, [sp, #0]
 80a362c:	9603      	str	r6, [sp, #12]
 80a362e:	9601      	str	r6, [sp, #4]
 80a3630:	4633      	mov	r3, r6
 80a3632:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80a3636:	494d      	ldr	r1, [pc, #308]	; (80a376c <_tzset_unlocked_r+0x2f4>)
 80a3638:	4628      	mov	r0, r5
 80a363a:	f7fd fb8f 	bl	80a0d5c <siscanf>
 80a363e:	2803      	cmp	r0, #3
 80a3640:	d17e      	bne.n	80a3740 <_tzset_unlocked_r+0x2c8>
 80a3642:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80a3646:	1e4b      	subs	r3, r1, #1
 80a3648:	2b0b      	cmp	r3, #11
 80a364a:	d879      	bhi.n	80a3740 <_tzset_unlocked_r+0x2c8>
 80a364c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80a3650:	1e53      	subs	r3, r2, #1
 80a3652:	2b04      	cmp	r3, #4
 80a3654:	d874      	bhi.n	80a3740 <_tzset_unlocked_r+0x2c8>
 80a3656:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80a365a:	2b06      	cmp	r3, #6
 80a365c:	d870      	bhi.n	80a3740 <_tzset_unlocked_r+0x2c8>
 80a365e:	f887 8008 	strb.w	r8, [r7, #8]
 80a3662:	60f9      	str	r1, [r7, #12]
 80a3664:	613a      	str	r2, [r7, #16]
 80a3666:	617b      	str	r3, [r7, #20]
 80a3668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a366a:	eb05 0803 	add.w	r8, r5, r3
 80a366e:	e02a      	b.n	80a36c6 <_tzset_unlocked_r+0x24e>
 80a3670:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80a3674:	bf06      	itte	eq
 80a3676:	4643      	moveq	r3, r8
 80a3678:	3501      	addeq	r5, #1
 80a367a:	2344      	movne	r3, #68	; 0x44
 80a367c:	220a      	movs	r2, #10
 80a367e:	a90b      	add	r1, sp, #44	; 0x2c
 80a3680:	4628      	mov	r0, r5
 80a3682:	9305      	str	r3, [sp, #20]
 80a3684:	f7ff fe3e 	bl	80a3304 <strtoul>
 80a3688:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80a368c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80a3690:	4545      	cmp	r5, r8
 80a3692:	9b05      	ldr	r3, [sp, #20]
 80a3694:	d114      	bne.n	80a36c0 <_tzset_unlocked_r+0x248>
 80a3696:	234d      	movs	r3, #77	; 0x4d
 80a3698:	f1b9 0f00 	cmp.w	r9, #0
 80a369c:	d107      	bne.n	80a36ae <_tzset_unlocked_r+0x236>
 80a369e:	7223      	strb	r3, [r4, #8]
 80a36a0:	2303      	movs	r3, #3
 80a36a2:	60e3      	str	r3, [r4, #12]
 80a36a4:	2302      	movs	r3, #2
 80a36a6:	6123      	str	r3, [r4, #16]
 80a36a8:	f8c4 9014 	str.w	r9, [r4, #20]
 80a36ac:	e00b      	b.n	80a36c6 <_tzset_unlocked_r+0x24e>
 80a36ae:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80a36b2:	230b      	movs	r3, #11
 80a36b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80a36b6:	2301      	movs	r3, #1
 80a36b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80a36ba:	2300      	movs	r3, #0
 80a36bc:	6323      	str	r3, [r4, #48]	; 0x30
 80a36be:	e002      	b.n	80a36c6 <_tzset_unlocked_r+0x24e>
 80a36c0:	b280      	uxth	r0, r0
 80a36c2:	723b      	strb	r3, [r7, #8]
 80a36c4:	6178      	str	r0, [r7, #20]
 80a36c6:	2302      	movs	r3, #2
 80a36c8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a36cc:	2300      	movs	r3, #0
 80a36ce:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a36d2:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a36d6:	930a      	str	r3, [sp, #40]	; 0x28
 80a36d8:	f898 3000 	ldrb.w	r3, [r8]
 80a36dc:	2b2f      	cmp	r3, #47	; 0x2f
 80a36de:	d10b      	bne.n	80a36f8 <_tzset_unlocked_r+0x280>
 80a36e0:	9603      	str	r6, [sp, #12]
 80a36e2:	f8cd a008 	str.w	sl, [sp, #8]
 80a36e6:	9601      	str	r6, [sp, #4]
 80a36e8:	f8cd b000 	str.w	fp, [sp]
 80a36ec:	4633      	mov	r3, r6
 80a36ee:	aa07      	add	r2, sp, #28
 80a36f0:	491f      	ldr	r1, [pc, #124]	; (80a3770 <_tzset_unlocked_r+0x2f8>)
 80a36f2:	4640      	mov	r0, r8
 80a36f4:	f7fd fb32 	bl	80a0d5c <siscanf>
 80a36f8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a36fc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a3700:	213c      	movs	r1, #60	; 0x3c
 80a3702:	fb01 3302 	mla	r3, r1, r2, r3
 80a3706:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a370a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a370e:	fb01 3302 	mla	r3, r1, r2, r3
 80a3712:	61bb      	str	r3, [r7, #24]
 80a3714:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80a3716:	f109 0901 	add.w	r9, r9, #1
 80a371a:	f1b9 0f02 	cmp.w	r9, #2
 80a371e:	4445      	add	r5, r8
 80a3720:	f107 071c 	add.w	r7, r7, #28
 80a3724:	f47f af74 	bne.w	80a3610 <_tzset_unlocked_r+0x198>
 80a3728:	6860      	ldr	r0, [r4, #4]
 80a372a:	f7ff fdf5 	bl	80a3318 <__tzcalc_limits>
 80a372e:	6a22      	ldr	r2, [r4, #32]
 80a3730:	4b07      	ldr	r3, [pc, #28]	; (80a3750 <_tzset_unlocked_r+0x2d8>)
 80a3732:	601a      	str	r2, [r3, #0]
 80a3734:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a3736:	1a9b      	subs	r3, r3, r2
 80a3738:	4a07      	ldr	r2, [pc, #28]	; (80a3758 <_tzset_unlocked_r+0x2e0>)
 80a373a:	bf18      	it	ne
 80a373c:	2301      	movne	r3, #1
 80a373e:	6013      	str	r3, [r2, #0]
 80a3740:	b00d      	add	sp, #52	; 0x34
 80a3742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3746:	bf00      	nop
 80a3748:	080a3f04 	.word	0x080a3f04
 80a374c:	20000840 	.word	0x20000840
 80a3750:	20000848 	.word	0x20000848
 80a3754:	080a3f07 	.word	0x080a3f07
 80a3758:	20000844 	.word	0x20000844
 80a375c:	20000144 	.word	0x20000144
 80a3760:	20000833 	.word	0x20000833
 80a3764:	080a3f0b 	.word	0x080a3f0b
 80a3768:	080a3f2e 	.word	0x080a3f2e
 80a376c:	080a3f1a 	.word	0x080a3f1a
 80a3770:	080a3f2d 	.word	0x080a3f2d
 80a3774:	20000828 	.word	0x20000828

080a3778 <_findenv_r>:
 80a3778:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a377c:	4607      	mov	r7, r0
 80a377e:	468b      	mov	fp, r1
 80a3780:	4690      	mov	r8, r2
 80a3782:	f000 f8d7 	bl	80a3934 <__env_lock>
 80a3786:	4b19      	ldr	r3, [pc, #100]	; (80a37ec <_findenv_r+0x74>)
 80a3788:	681d      	ldr	r5, [r3, #0]
 80a378a:	469a      	mov	sl, r3
 80a378c:	b13d      	cbz	r5, 80a379e <_findenv_r+0x26>
 80a378e:	465c      	mov	r4, fp
 80a3790:	4623      	mov	r3, r4
 80a3792:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a3796:	b142      	cbz	r2, 80a37aa <_findenv_r+0x32>
 80a3798:	2a3d      	cmp	r2, #61	; 0x3d
 80a379a:	461c      	mov	r4, r3
 80a379c:	d1f8      	bne.n	80a3790 <_findenv_r+0x18>
 80a379e:	4638      	mov	r0, r7
 80a37a0:	f000 f8c9 	bl	80a3936 <__env_unlock>
 80a37a4:	2000      	movs	r0, #0
 80a37a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a37aa:	ebcb 0404 	rsb	r4, fp, r4
 80a37ae:	46a9      	mov	r9, r5
 80a37b0:	f859 0b04 	ldr.w	r0, [r9], #4
 80a37b4:	2800      	cmp	r0, #0
 80a37b6:	d0f2      	beq.n	80a379e <_findenv_r+0x26>
 80a37b8:	4622      	mov	r2, r4
 80a37ba:	4659      	mov	r1, fp
 80a37bc:	f7ff fc6b 	bl	80a3096 <strncmp>
 80a37c0:	b988      	cbnz	r0, 80a37e6 <_findenv_r+0x6e>
 80a37c2:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80a37c6:	191e      	adds	r6, r3, r4
 80a37c8:	5d1b      	ldrb	r3, [r3, r4]
 80a37ca:	2b3d      	cmp	r3, #61	; 0x3d
 80a37cc:	d10b      	bne.n	80a37e6 <_findenv_r+0x6e>
 80a37ce:	f8da 3000 	ldr.w	r3, [sl]
 80a37d2:	4638      	mov	r0, r7
 80a37d4:	1aed      	subs	r5, r5, r3
 80a37d6:	10ad      	asrs	r5, r5, #2
 80a37d8:	f8c8 5000 	str.w	r5, [r8]
 80a37dc:	f000 f8ab 	bl	80a3936 <__env_unlock>
 80a37e0:	1c70      	adds	r0, r6, #1
 80a37e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a37e6:	464d      	mov	r5, r9
 80a37e8:	e7e1      	b.n	80a37ae <_findenv_r+0x36>
 80a37ea:	bf00      	nop
 80a37ec:	2000018c 	.word	0x2000018c

080a37f0 <_getenv_r>:
 80a37f0:	b507      	push	{r0, r1, r2, lr}
 80a37f2:	aa01      	add	r2, sp, #4
 80a37f4:	f7ff ffc0 	bl	80a3778 <_findenv_r>
 80a37f8:	b003      	add	sp, #12
 80a37fa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a3800 <__gettzinfo>:
 80a3800:	4800      	ldr	r0, [pc, #0]	; (80a3804 <__gettzinfo+0x4>)
 80a3802:	4770      	bx	lr
 80a3804:	2000014c 	.word	0x2000014c

080a3808 <gmtime_r>:
 80a3808:	6802      	ldr	r2, [r0, #0]
 80a380a:	4b46      	ldr	r3, [pc, #280]	; (80a3924 <gmtime_r+0x11c>)
 80a380c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a380e:	fb92 f4f3 	sdiv	r4, r2, r3
 80a3812:	fb03 2214 	mls	r2, r3, r4, r2
 80a3816:	2a00      	cmp	r2, #0
 80a3818:	bfbc      	itt	lt
 80a381a:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80a381e:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80a3822:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80a3826:	fb92 f3f0 	sdiv	r3, r2, r0
 80a382a:	fb00 2213 	mls	r2, r0, r3, r2
 80a382e:	f04f 003c 	mov.w	r0, #60	; 0x3c
 80a3832:	608b      	str	r3, [r1, #8]
 80a3834:	fb92 f3f0 	sdiv	r3, r2, r0
 80a3838:	fb00 2213 	mls	r2, r0, r3, r2
 80a383c:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 80a3840:	bfac      	ite	ge
 80a3842:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 80a3846:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 80a384a:	604b      	str	r3, [r1, #4]
 80a384c:	600a      	str	r2, [r1, #0]
 80a384e:	2307      	movs	r3, #7
 80a3850:	1ce2      	adds	r2, r4, #3
 80a3852:	fb92 f3f3 	sdiv	r3, r2, r3
 80a3856:	4d34      	ldr	r5, [pc, #208]	; (80a3928 <gmtime_r+0x120>)
 80a3858:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a385c:	fb94 f5f5 	sdiv	r5, r4, r5
 80a3860:	1ad3      	subs	r3, r2, r3
 80a3862:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80a3866:	f240 57b4 	movw	r7, #1460	; 0x5b4
 80a386a:	618b      	str	r3, [r1, #24]
 80a386c:	4b2f      	ldr	r3, [pc, #188]	; (80a392c <gmtime_r+0x124>)
 80a386e:	4830      	ldr	r0, [pc, #192]	; (80a3930 <gmtime_r+0x128>)
 80a3870:	fb03 4405 	mla	r4, r3, r5, r4
 80a3874:	fbb4 f2f2 	udiv	r2, r4, r2
 80a3878:	fbb4 f3f7 	udiv	r3, r4, r7
 80a387c:	fbb4 f0f0 	udiv	r0, r4, r0
 80a3880:	4422      	add	r2, r4
 80a3882:	1ad2      	subs	r2, r2, r3
 80a3884:	f648 6694 	movw	r6, #36500	; 0x8e94
 80a3888:	1a13      	subs	r3, r2, r0
 80a388a:	f240 126d 	movw	r2, #365	; 0x16d
 80a388e:	fbb3 f6f6 	udiv	r6, r3, r6
 80a3892:	fbb3 f0f2 	udiv	r0, r3, r2
 80a3896:	fbb3 f3f7 	udiv	r3, r3, r7
 80a389a:	4434      	add	r4, r6
 80a389c:	1ae3      	subs	r3, r4, r3
 80a389e:	fb02 3310 	mls	r3, r2, r0, r3
 80a38a2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80a38a6:	2499      	movs	r4, #153	; 0x99
 80a38a8:	3202      	adds	r2, #2
 80a38aa:	fbb2 f2f4 	udiv	r2, r2, r4
 80a38ae:	4354      	muls	r4, r2
 80a38b0:	1ca6      	adds	r6, r4, #2
 80a38b2:	2405      	movs	r4, #5
 80a38b4:	fbb6 f4f4 	udiv	r4, r6, r4
 80a38b8:	2a0a      	cmp	r2, #10
 80a38ba:	bf34      	ite	cc
 80a38bc:	2602      	movcc	r6, #2
 80a38be:	f06f 0609 	mvncs.w	r6, #9
 80a38c2:	4416      	add	r6, r2
 80a38c4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a38c8:	fb02 0505 	mla	r5, r2, r5, r0
 80a38cc:	1c5f      	adds	r7, r3, #1
 80a38ce:	2e01      	cmp	r6, #1
 80a38d0:	bf98      	it	ls
 80a38d2:	3501      	addls	r5, #1
 80a38d4:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80a38d8:	eba7 0704 	sub.w	r7, r7, r4
 80a38dc:	d302      	bcc.n	80a38e4 <gmtime_r+0xdc>
 80a38de:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 80a38e2:	e014      	b.n	80a390e <gmtime_r+0x106>
 80a38e4:	0782      	lsls	r2, r0, #30
 80a38e6:	d105      	bne.n	80a38f4 <gmtime_r+0xec>
 80a38e8:	2464      	movs	r4, #100	; 0x64
 80a38ea:	fbb0 f2f4 	udiv	r2, r0, r4
 80a38ee:	fb04 0212 	mls	r2, r4, r2, r0
 80a38f2:	b94a      	cbnz	r2, 80a3908 <gmtime_r+0x100>
 80a38f4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a38f8:	fbb0 f4f2 	udiv	r4, r0, r2
 80a38fc:	fb02 0014 	mls	r0, r2, r4, r0
 80a3900:	fab0 f280 	clz	r2, r0
 80a3904:	0952      	lsrs	r2, r2, #5
 80a3906:	e000      	b.n	80a390a <gmtime_r+0x102>
 80a3908:	2201      	movs	r2, #1
 80a390a:	333b      	adds	r3, #59	; 0x3b
 80a390c:	441a      	add	r2, r3
 80a390e:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 80a3912:	2300      	movs	r3, #0
 80a3914:	61ca      	str	r2, [r1, #28]
 80a3916:	614d      	str	r5, [r1, #20]
 80a3918:	610e      	str	r6, [r1, #16]
 80a391a:	60cf      	str	r7, [r1, #12]
 80a391c:	620b      	str	r3, [r1, #32]
 80a391e:	4608      	mov	r0, r1
 80a3920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a3922:	bf00      	nop
 80a3924:	00015180 	.word	0x00015180
 80a3928:	00023ab1 	.word	0x00023ab1
 80a392c:	fffdc54f 	.word	0xfffdc54f
 80a3930:	00023ab0 	.word	0x00023ab0

080a3934 <__env_lock>:
 80a3934:	4770      	bx	lr

080a3936 <__env_unlock>:
 80a3936:	4770      	bx	lr

080a3938 <dynalib_user>:
 80a3938:	0021 080a 0061 080a 008d 080a 0091 080a     !...a...........
 80a3948:	0000 0000 7453 7261 7574 2070 7553 6363     ....Startup Succ
 80a3958:	7365 6673 6c75 0000 0000 0000 0000 0000     essful..........
	...
 80a398c:	227b 7563 7272 6e65 2274 253a 2e34 6631     {"current":%4.1f
 80a399c:	007d 7563 7272 6e65 2d74 6577 6862 6f6f     }.current-webhoo
 80a39ac:	006b 6f4e 4420 7461 0061 6255 6469 746f     k.No Data.Ubidot
 80a39bc:	2073 6f48 6b6f 5200 7365 6f70 736e 2065     s Hook.Response 
 80a39cc:	6552 6563 7669 6465 5300 6174 6574 5300     Received.State.S
 80a39dc:	7465 5620 7265 6f62 6573 4d20 646f 0065     et Verbose Mode.
 80a39ec:	0030 6c43 6165 6572 2064 6556 6272 736f     0.Cleared Verbos
 80a39fc:	2065 6f4d 6564 4600 6f72 206d 7325 7420     e Mode.From %s t
 80a3a0c:	206f 7325 5300 6174 6574 5420 6172 736e     o %s.State Trans
 80a3a1c:	7469 6f69 006e 7245 6f72 2072 6174 696b     ition.Error taki
 80a3a2c:	676e 4d20 6165 7573 6572 656d 746e 0073     ng Measurements.
 80a3a3c:	7073 7261 2f6b 6564 6976 6563 732f 7365     spark/device/ses
 80a3a4c:	6973 6e6f 652f 646e 4500 7272 726f 5320     sion/end.Error S
 80a3a5c:	6174 6574 2d20 5220 7365 7465 4300 6d6f     tate - Reset.Com
 80a3a6c:	616d 646e 6120 6363 7065 6574 2064 202d     mand accepted - 
 80a3a7c:	6573 736e 6e69 2067 6f6e 0077 7546 636e     sensing now.Func
 80a3a8c:	6974 6e6f 4300 6d6f 616d 646e 6120 6363     tion.Command acc
 80a3a9c:	7065 6574 2064 202d 6572 6f70 7472 6e69     epted - reportin
 80a3aac:	2067 6f6e 0077 6576 6272 736f 4d65 646f     g now.verboseMod
 80a3abc:	0065 6547 2d74 6552 6461 6e69 0067 6553     e.Get-Reading.Se
 80a3acc:	646e 522d 7065 726f 0074 6146 6c69 6465     nd-Report.Failed
 80a3adc:	7420 206f 6f63 6e6e 6365 0074 7453 7261      to connect.Star
 80a3aec:	7574 0070 2e31 3130 0000 0000               tup.1.01....

080a3af8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a3b00:	0ddb 080a 0de1 080a 0e37 080a 0def 080a     ........7.......
 80a3b10:	0ddd 080a                                   ....

080a3b14 <_ZTV7TwoWire>:
	...
 80a3b1c:	1425 080a 146f 080a 1447 080a 1427 080a     %...o...G...'...
 80a3b2c:	144f 080a 1457 080a 145f 080a 1467 080a     O...W..._...g...

080a3b3c <_ZTV9IPAddress>:
	...
 80a3b44:	14b9 080a 14a9 080a 14ab 080a 0066 6e6c     ............f.ln
 80a3b54:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
 80a3b64:	0a0d 2500 3130 7530 0020 205d 2500 0064     ...%010u .] .%d.
 80a3b74:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
 80a3b84:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
 80a3b94:	6200 7561 0064 6553 6972 6c61 5500 4253     .baud.Serial.USB
 80a3ba4:	6553 6972 6c61 0031 7974 6570 7000 7261     Serial1.type.par
 80a3bb4:	6d61 6300 646d 6900 0064 6e68 0064 7473     am.cmd.id.hnd.st
 80a3bc4:	6d72 6600 6c69 0074 766c 006c 6461 4864     rm.filt.lvl.addH
 80a3bd4:	6e61 6c64 7265 7200 6d65 766f 4865 6e61     andler.removeHan
 80a3be4:	6c64 7265 6500 756e 486d 6e61 6c64 7265     dler.enumHandler
 80a3bf4:	0073 534a 4e4f 7453 6572 6d61 6f4c 4867     s.JSONStreamLogH
 80a3c04:	6e61 6c64 7265 6100 7070 6e00 6e6f 0065     andler.app.none.
 80a3c14:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
 80a3c24:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.

080a3c34 <_ZTVN5spark12NetworkClassE>:
	...
 80a3c3c:	1581 080a 158b 080a 1595 080a 159f 080a     ................
 80a3c4c:	15a9 080a 15b5 080a 15c1 080a 15cd 080a     ................
 80a3c5c:	15d5 080a 15df 080a 15e9 080a               ............

080a3c68 <_ZTV8SPIClass>:
	...
 80a3c70:	174d 080a 174f 080a 2b25 3330 3a64 3025     M...O...%+03d:%0
 80a3c80:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
 80a3c90:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

080a3ca0 <_ZTV11USARTSerial>:
	...
 80a3ca8:	1a1d 080a 1a6d 080a 1a7b 080a 164d 080a     ....m...{...M...
 80a3cb8:	1a31 080a 1a53 080a 1a3f 080a 1a67 080a     1...S...?...g...
 80a3cc8:	1a1f 080a 1a23 080a                         ....#...

080a3cd0 <_ZTV9USBSerial>:
	...
 80a3cd8:	1b25 080a 1b75 080a 1b83 080a 164d 080a     %...u.......M...
 80a3ce8:	1b61 080a 1b27 080a 1b3d 080a 1b6f 080a     a...'...=...o...
 80a3cf8:	1b53 080a 1b21 080a                         S...!...

080a3d00 <_ZTVN5spark9WiFiClassE>:
	...
 80a3d08:	1d67 080a 1d5d 080a 1d53 080a 1cc5 080a     g...]...S.......
 80a3d18:	1d47 080a 1d3b 080a 1d2f 080a 1d27 080a     G...;.../...'...
 80a3d28:	1d1d 080a 1d13 080a 1ccf 080a 7173 7472     ............sqrt
 80a3d38:	0000 0000                                   ....

080a3d3c <_ctype_>:
 80a3d3c:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80a3d4c:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80a3d5c:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80a3d6c:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80a3d7c:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80a3d8c:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80a3d9c:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80a3dac:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80a3dbc:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080a3e40 <__sf_fake_stdin>:
	...

080a3e60 <__sf_fake_stdout>:
	...

080a3e80 <__sf_fake_stderr>:
	...
 80a3ea0:	0043 0000                                   C...

080a3ea4 <__month_lengths>:
 80a3ea4:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80a3eb4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a3ec4:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a3ed4:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80a3ee4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a3ef4:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a3f04:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
 80a3f14:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
 80a3f24:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
 80a3f34:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

080a3f40 <link_const_variable_data_end>:
 80a3f40:	080a07f5 	.word	0x080a07f5
 80a3f44:	080a090d 	.word	0x080a090d
 80a3f48:	080a1571 	.word	0x080a1571
 80a3f4c:	080a1639 	.word	0x080a1639
 80a3f50:	080a1731 	.word	0x080a1731
 80a3f54:	080a18f9 	.word	0x080a18f9
 80a3f58:	080a1a09 	.word	0x080a1a09
 80a3f5c:	080a1d71 	.word	0x080a1d71
 80a3f60:	080a1f75 	.word	0x080a1f75
 80a3f64:	080a1fa5 	.word	0x080a1fa5
 80a3f68:	080a1ffd 	.word	0x080a1ffd
 80a3f6c:	080a20c1 	.word	0x080a20c1
 80a3f70:	080a2145 	.word	0x080a2145
 80a3f74:	080a21c9 	.word	0x080a21c9

080a3f78 <link_constructors_end>:
	...
